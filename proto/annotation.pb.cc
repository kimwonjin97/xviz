// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: annotation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "annotation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xviz {

namespace {

const ::google::protobuf::Descriptor* VisualBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisualBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* Visual_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Visual_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_annotation_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_annotation_2eproto() {
  protobuf_AddDesc_annotation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "annotation.proto");
  GOOGLE_CHECK(file != NULL);
  VisualBase_descriptor_ = file->message_type(0);
  static const int VisualBase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualBase, object_id_),
  };
  VisualBase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VisualBase_descriptor_,
      VisualBase::default_instance_,
      VisualBase_offsets_,
      -1,
      -1,
      -1,
      sizeof(VisualBase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualBase, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualBase, _is_default_instance_));
  Visual_descriptor_ = file->message_type(1);
  static const int Visual_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, style_classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, inline_style_),
  };
  Visual_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Visual_descriptor_,
      Visual::default_instance_,
      Visual_offsets_,
      -1,
      -1,
      -1,
      sizeof(Visual),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_annotation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VisualBase_descriptor_, &VisualBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Visual_descriptor_, &Visual::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_annotation_2eproto() {
  delete VisualBase::default_instance_;
  delete VisualBase_reflection_;
  delete Visual::default_instance_;
  delete Visual_reflection_;
}

void protobuf_AddDesc_annotation_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_annotation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::xviz::protobuf_AddDesc_options_2eproto();
  ::xviz::protobuf_AddDesc_style_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020annotation.proto\022\004xviz\032\roptions.proto\032"
    "\013style.proto\"9\n\nVisualBase\022\021\n\tobject_id\030"
    "\001 \001(\t:\030\302\273\032\024core/annotation_base\"\211\001\n\006Visu"
    "al\022\036\n\004base\030\001 \001(\0132\020.xviz.VisualBase\022\025\n\rst"
    "yle_classes\030\002 \003(\t\022,\n\014inline_style\030\003 \001(\0132"
    "\026.xviz.StyleObjectValue:\032\302\273\032\026core/annota"
    "tion_visualB7\n\013com.xviz.v2B\017AnnotationPr"
    "otoP\001Z\004v2pb\242\002\004XVIZ\252\002\007xviz.V2b\006proto3", 316);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "annotation.proto", &protobuf_RegisterTypes);
  VisualBase::default_instance_ = new VisualBase();
  Visual::default_instance_ = new Visual();
  VisualBase::default_instance_->InitAsDefaultInstance();
  Visual::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_annotation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_annotation_2eproto {
  StaticDescriptorInitializer_annotation_2eproto() {
    protobuf_AddDesc_annotation_2eproto();
  }
} static_descriptor_initializer_annotation_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisualBase::kObjectIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisualBase::VisualBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.VisualBase)
}

void VisualBase::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VisualBase::VisualBase(const VisualBase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.VisualBase)
}

void VisualBase::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VisualBase::~VisualBase() {
  // @@protoc_insertion_point(destructor:xviz.VisualBase)
  SharedDtor();
}

void VisualBase::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VisualBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisualBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisualBase_descriptor_;
}

const VisualBase& VisualBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_annotation_2eproto();
  return *default_instance_;
}

VisualBase* VisualBase::default_instance_ = NULL;

VisualBase* VisualBase::New(::google::protobuf::Arena* arena) const {
  VisualBase* n = new VisualBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VisualBase::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.VisualBase)
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool VisualBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.VisualBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string object_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), this->object_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.VisualBase.object_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.VisualBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.VisualBase)
  return false;
#undef DO_
}

void VisualBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.VisualBase)
  // optional string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), this->object_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.VisualBase.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->object_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.VisualBase)
}

::google::protobuf::uint8* VisualBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.VisualBase)
  // optional string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), this->object_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.VisualBase.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.VisualBase)
  return target;
}

int VisualBase::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.VisualBase)
  int total_size = 0;

  // optional string object_id = 1;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisualBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.VisualBase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VisualBase* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VisualBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.VisualBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.VisualBase)
    MergeFrom(*source);
  }
}

void VisualBase::MergeFrom(const VisualBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.VisualBase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
}

void VisualBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.VisualBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualBase::CopyFrom(const VisualBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.VisualBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualBase::IsInitialized() const {

  return true;
}

void VisualBase::Swap(VisualBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisualBase::InternalSwap(VisualBase* other) {
  object_id_.Swap(&other->object_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VisualBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisualBase_descriptor_;
  metadata.reflection = VisualBase_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VisualBase

// optional string object_id = 1;
void VisualBase::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VisualBase::object_id() const {
  // @@protoc_insertion_point(field_get:xviz.VisualBase.object_id)
  return object_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisualBase::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.VisualBase.object_id)
}
 void VisualBase::set_object_id(const char* value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.VisualBase.object_id)
}
 void VisualBase::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.VisualBase.object_id)
}
 ::std::string* VisualBase::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:xviz.VisualBase.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VisualBase::release_object_id() {
  // @@protoc_insertion_point(field_release:xviz.VisualBase.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VisualBase::set_allocated_object_id(::std::string* object_id) {
  if (object_id != NULL) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:xviz.VisualBase.object_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Visual::kBaseFieldNumber;
const int Visual::kStyleClassesFieldNumber;
const int Visual::kInlineStyleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Visual::Visual()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Visual)
}

void Visual::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::xviz::VisualBase*>(&::xviz::VisualBase::default_instance());
  inline_style_ = const_cast< ::xviz::StyleObjectValue*>(&::xviz::StyleObjectValue::default_instance());
}

Visual::Visual(const Visual& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Visual)
}

void Visual::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  base_ = NULL;
  inline_style_ = NULL;
}

Visual::~Visual() {
  // @@protoc_insertion_point(destructor:xviz.Visual)
  SharedDtor();
}

void Visual::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete inline_style_;
  }
}

void Visual::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Visual::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Visual_descriptor_;
}

const Visual& Visual::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_annotation_2eproto();
  return *default_instance_;
}

Visual* Visual::default_instance_ = NULL;

Visual* Visual::New(::google::protobuf::Arena* arena) const {
  Visual* n = new Visual;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Visual::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Visual)
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && inline_style_ != NULL) delete inline_style_;
  inline_style_ = NULL;
  style_classes_.Clear();
}

bool Visual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Visual)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .xviz.VisualBase base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_style_classes;
        break;
      }

      // repeated string style_classes = 2;
      case 2: {
        if (tag == 18) {
         parse_style_classes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_style_classes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->style_classes(this->style_classes_size() - 1).data(),
            this->style_classes(this->style_classes_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.Visual.style_classes"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_style_classes;
        if (input->ExpectTag(26)) goto parse_inline_style;
        break;
      }

      // optional .xviz.StyleObjectValue inline_style = 3;
      case 3: {
        if (tag == 26) {
         parse_inline_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inline_style()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Visual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Visual)
  return false;
#undef DO_
}

void Visual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Visual)
  // optional .xviz.VisualBase base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // repeated string style_classes = 2;
  for (int i = 0; i < this->style_classes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->style_classes(i).data(), this->style_classes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Visual.style_classes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->style_classes(i), output);
  }

  // optional .xviz.StyleObjectValue inline_style = 3;
  if (this->has_inline_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->inline_style_, output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Visual)
}

::google::protobuf::uint8* Visual::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Visual)
  // optional .xviz.VisualBase base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, false, target);
  }

  // repeated string style_classes = 2;
  for (int i = 0; i < this->style_classes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->style_classes(i).data(), this->style_classes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Visual.style_classes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->style_classes(i), target);
  }

  // optional .xviz.StyleObjectValue inline_style = 3;
  if (this->has_inline_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->inline_style_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Visual)
  return target;
}

int Visual::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Visual)
  int total_size = 0;

  // optional .xviz.VisualBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional .xviz.StyleObjectValue inline_style = 3;
  if (this->has_inline_style()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->inline_style_);
  }

  // repeated string style_classes = 2;
  total_size += 1 * this->style_classes_size();
  for (int i = 0; i < this->style_classes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->style_classes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Visual::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Visual)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Visual* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Visual>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Visual)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Visual)
    MergeFrom(*source);
  }
}

void Visual::MergeFrom(const Visual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Visual)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  style_classes_.MergeFrom(from.style_classes_);
  if (from.has_base()) {
    mutable_base()->::xviz::VisualBase::MergeFrom(from.base());
  }
  if (from.has_inline_style()) {
    mutable_inline_style()->::xviz::StyleObjectValue::MergeFrom(from.inline_style());
  }
}

void Visual::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Visual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visual::CopyFrom(const Visual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Visual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visual::IsInitialized() const {

  return true;
}

void Visual::Swap(Visual* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Visual::InternalSwap(Visual* other) {
  std::swap(base_, other->base_);
  style_classes_.UnsafeArenaSwap(&other->style_classes_);
  std::swap(inline_style_, other->inline_style_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Visual::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Visual_descriptor_;
  metadata.reflection = Visual_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Visual

// optional .xviz.VisualBase base = 1;
bool Visual::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void Visual::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::xviz::VisualBase& Visual::base() const {
  // @@protoc_insertion_point(field_get:xviz.Visual.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::xviz::VisualBase* Visual::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::xviz::VisualBase;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Visual.base)
  return base_;
}
::xviz::VisualBase* Visual::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Visual.base)
  
  ::xviz::VisualBase* temp = base_;
  base_ = NULL;
  return temp;
}
void Visual::set_allocated_base(::xviz::VisualBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Visual.base)
}

// repeated string style_classes = 2;
int Visual::style_classes_size() const {
  return style_classes_.size();
}
void Visual::clear_style_classes() {
  style_classes_.Clear();
}
 const ::std::string& Visual::style_classes(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Visual.style_classes)
  return style_classes_.Get(index);
}
 ::std::string* Visual::mutable_style_classes(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.Visual.style_classes)
  return style_classes_.Mutable(index);
}
 void Visual::set_style_classes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.Visual.style_classes)
  style_classes_.Mutable(index)->assign(value);
}
 void Visual::set_style_classes(int index, const char* value) {
  style_classes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.Visual.style_classes)
}
 void Visual::set_style_classes(int index, const char* value, size_t size) {
  style_classes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.Visual.style_classes)
}
 ::std::string* Visual::add_style_classes() {
  // @@protoc_insertion_point(field_add_mutable:xviz.Visual.style_classes)
  return style_classes_.Add();
}
 void Visual::add_style_classes(const ::std::string& value) {
  style_classes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.Visual.style_classes)
}
 void Visual::add_style_classes(const char* value) {
  style_classes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.Visual.style_classes)
}
 void Visual::add_style_classes(const char* value, size_t size) {
  style_classes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.Visual.style_classes)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Visual::style_classes() const {
  // @@protoc_insertion_point(field_list:xviz.Visual.style_classes)
  return style_classes_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Visual::mutable_style_classes() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Visual.style_classes)
  return &style_classes_;
}

// optional .xviz.StyleObjectValue inline_style = 3;
bool Visual::has_inline_style() const {
  return !_is_default_instance_ && inline_style_ != NULL;
}
void Visual::clear_inline_style() {
  if (GetArenaNoVirtual() == NULL && inline_style_ != NULL) delete inline_style_;
  inline_style_ = NULL;
}
const ::xviz::StyleObjectValue& Visual::inline_style() const {
  // @@protoc_insertion_point(field_get:xviz.Visual.inline_style)
  return inline_style_ != NULL ? *inline_style_ : *default_instance_->inline_style_;
}
::xviz::StyleObjectValue* Visual::mutable_inline_style() {
  
  if (inline_style_ == NULL) {
    inline_style_ = new ::xviz::StyleObjectValue;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Visual.inline_style)
  return inline_style_;
}
::xviz::StyleObjectValue* Visual::release_inline_style() {
  // @@protoc_insertion_point(field_release:xviz.Visual.inline_style)
  
  ::xviz::StyleObjectValue* temp = inline_style_;
  inline_style_ = NULL;
  return temp;
}
void Visual::set_allocated_inline_style(::xviz::StyleObjectValue* inline_style) {
  delete inline_style_;
  inline_style_ = inline_style;
  if (inline_style) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Visual.inline_style)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

// @@protoc_insertion_point(global_scope)
