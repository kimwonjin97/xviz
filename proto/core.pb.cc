// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "core.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xviz {

namespace {

const ::google::protobuf::Descriptor* StreamSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamSet_PosesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StreamSet_PrimitivesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StreamSet_FutureInstancesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StreamSet_VariablesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StreamSet_AnnotationsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StreamSet_UiPrimitivesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StreamSet_LinksEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Pose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pose_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapOrigin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapOrigin_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrimitiveState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrimitiveState_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIPrimitiveState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIPrimitiveState_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSeriesState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSeriesState_reflection_ = NULL;
const ::google::protobuf::Descriptor* FutureInstances_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FutureInstances_reflection_ = NULL;
const ::google::protobuf::Descriptor* VariableState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VariableState_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnnotationState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnnotationState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Variable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Variable_reflection_ = NULL;
const ::google::protobuf::Descriptor* VariableBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VariableBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* Values_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Values_reflection_ = NULL;
const ::google::protobuf::Descriptor* Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Link_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_core_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_core_2eproto() {
  protobuf_AddDesc_core_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "core.proto");
  GOOGLE_CHECK(file != NULL);
  StreamSet_descriptor_ = file->message_type(0);
  static const int StreamSet_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSet, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSet, poses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSet, primitives_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSet, time_series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSet, future_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSet, variables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSet, annotations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSet, ui_primitives_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSet, no_data_streams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSet, links_),
  };
  StreamSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamSet_descriptor_,
      StreamSet::default_instance_,
      StreamSet_offsets_,
      -1,
      -1,
      -1,
      sizeof(StreamSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSet, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSet, _is_default_instance_));
  StreamSet_PosesEntry_descriptor_ = StreamSet_descriptor_->nested_type(0);
  StreamSet_PrimitivesEntry_descriptor_ = StreamSet_descriptor_->nested_type(1);
  StreamSet_FutureInstancesEntry_descriptor_ = StreamSet_descriptor_->nested_type(2);
  StreamSet_VariablesEntry_descriptor_ = StreamSet_descriptor_->nested_type(3);
  StreamSet_AnnotationsEntry_descriptor_ = StreamSet_descriptor_->nested_type(4);
  StreamSet_UiPrimitivesEntry_descriptor_ = StreamSet_descriptor_->nested_type(5);
  StreamSet_LinksEntry_descriptor_ = StreamSet_descriptor_->nested_type(6);
  Pose_descriptor_ = file->message_type(1);
  static const int Pose_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, map_origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, orientation_),
  };
  Pose_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pose_descriptor_,
      Pose::default_instance_,
      Pose_offsets_,
      -1,
      -1,
      -1,
      sizeof(Pose),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _is_default_instance_));
  MapOrigin_descriptor_ = file->message_type(2);
  static const int MapOrigin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOrigin, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOrigin, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOrigin, altitude_),
  };
  MapOrigin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapOrigin_descriptor_,
      MapOrigin::default_instance_,
      MapOrigin_offsets_,
      -1,
      -1,
      -1,
      sizeof(MapOrigin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOrigin, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOrigin, _is_default_instance_));
  PrimitiveState_descriptor_ = file->message_type(3);
  static const int PrimitiveState_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveState, polygons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveState, polylines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveState, texts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveState, circles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveState, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveState, stadiums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveState, images_),
  };
  PrimitiveState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrimitiveState_descriptor_,
      PrimitiveState::default_instance_,
      PrimitiveState_offsets_,
      -1,
      -1,
      -1,
      sizeof(PrimitiveState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveState, _is_default_instance_));
  UIPrimitiveState_descriptor_ = file->message_type(4);
  static const int UIPrimitiveState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIPrimitiveState, treetable_),
  };
  UIPrimitiveState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UIPrimitiveState_descriptor_,
      UIPrimitiveState::default_instance_,
      UIPrimitiveState_offsets_,
      -1,
      -1,
      -1,
      sizeof(UIPrimitiveState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIPrimitiveState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIPrimitiveState, _is_default_instance_));
  TimeSeriesState_descriptor_ = file->message_type(5);
  static const int TimeSeriesState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesState, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesState, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesState, streams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesState, values_),
  };
  TimeSeriesState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimeSeriesState_descriptor_,
      TimeSeriesState::default_instance_,
      TimeSeriesState_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimeSeriesState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesState, _is_default_instance_));
  FutureInstances_descriptor_ = file->message_type(6);
  static const int FutureInstances_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureInstances, timestamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureInstances, primitives_),
  };
  FutureInstances_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FutureInstances_descriptor_,
      FutureInstances::default_instance_,
      FutureInstances_offsets_,
      -1,
      -1,
      -1,
      sizeof(FutureInstances),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureInstances, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureInstances, _is_default_instance_));
  VariableState_descriptor_ = file->message_type(7);
  static const int VariableState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableState, variables_),
  };
  VariableState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VariableState_descriptor_,
      VariableState::default_instance_,
      VariableState_offsets_,
      -1,
      -1,
      -1,
      sizeof(VariableState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableState, _is_default_instance_));
  AnnotationState_descriptor_ = file->message_type(8);
  static const int AnnotationState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationState, visuals_),
  };
  AnnotationState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AnnotationState_descriptor_,
      AnnotationState::default_instance_,
      AnnotationState_offsets_,
      -1,
      -1,
      -1,
      sizeof(AnnotationState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationState, _is_default_instance_));
  Variable_descriptor_ = file->message_type(9);
  static const int Variable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, values_),
  };
  Variable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Variable_descriptor_,
      Variable::default_instance_,
      Variable_offsets_,
      -1,
      -1,
      -1,
      sizeof(Variable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, _is_default_instance_));
  VariableBase_descriptor_ = file->message_type(10);
  static const int VariableBase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableBase, object_id_),
  };
  VariableBase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VariableBase_descriptor_,
      VariableBase::default_instance_,
      VariableBase_offsets_,
      -1,
      -1,
      -1,
      sizeof(VariableBase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableBase, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableBase, _is_default_instance_));
  Values_descriptor_ = file->message_type(11);
  static const int Values_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Values, doubles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Values, int32s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Values, bools_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Values, strings_),
  };
  Values_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Values_descriptor_,
      Values::default_instance_,
      Values_offsets_,
      -1,
      -1,
      -1,
      sizeof(Values),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Values, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Values, _is_default_instance_));
  Link_descriptor_ = file->message_type(12);
  static const int Link_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, target_pose_),
  };
  Link_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Link_descriptor_,
      Link::default_instance_,
      Link_offsets_,
      -1,
      -1,
      -1,
      sizeof(Link),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_core_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamSet_descriptor_, &StreamSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        StreamSet_PosesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::xviz::Pose,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                StreamSet_PosesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        StreamSet_PrimitivesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::xviz::PrimitiveState,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                StreamSet_PrimitivesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        StreamSet_FutureInstancesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::xviz::FutureInstances,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                StreamSet_FutureInstancesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        StreamSet_VariablesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::xviz::VariableState,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                StreamSet_VariablesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        StreamSet_AnnotationsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::xviz::AnnotationState,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                StreamSet_AnnotationsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        StreamSet_UiPrimitivesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::xviz::UIPrimitiveState,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                StreamSet_UiPrimitivesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        StreamSet_LinksEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::xviz::Link,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                StreamSet_LinksEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pose_descriptor_, &Pose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapOrigin_descriptor_, &MapOrigin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrimitiveState_descriptor_, &PrimitiveState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UIPrimitiveState_descriptor_, &UIPrimitiveState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimeSeriesState_descriptor_, &TimeSeriesState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FutureInstances_descriptor_, &FutureInstances::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VariableState_descriptor_, &VariableState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AnnotationState_descriptor_, &AnnotationState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Variable_descriptor_, &Variable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VariableBase_descriptor_, &VariableBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Values_descriptor_, &Values::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Link_descriptor_, &Link::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_core_2eproto() {
  delete StreamSet::default_instance_;
  delete StreamSet_reflection_;
  delete Pose::default_instance_;
  delete Pose_reflection_;
  delete MapOrigin::default_instance_;
  delete MapOrigin_reflection_;
  delete PrimitiveState::default_instance_;
  delete PrimitiveState_reflection_;
  delete UIPrimitiveState::default_instance_;
  delete UIPrimitiveState_reflection_;
  delete TimeSeriesState::default_instance_;
  delete TimeSeriesState_reflection_;
  delete FutureInstances::default_instance_;
  delete FutureInstances_reflection_;
  delete VariableState::default_instance_;
  delete VariableState_reflection_;
  delete AnnotationState::default_instance_;
  delete AnnotationState_reflection_;
  delete Variable::default_instance_;
  delete Variable_reflection_;
  delete VariableBase::default_instance_;
  delete VariableBase_reflection_;
  delete Values::default_instance_;
  delete Values_reflection_;
  delete Link::default_instance_;
  delete Link_reflection_;
}

void protobuf_AddDesc_core_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_core_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::xviz::protobuf_AddDesc_annotation_2eproto();
  ::xviz::protobuf_AddDesc_options_2eproto();
  ::xviz::protobuf_AddDesc_primitives_2eproto();
  ::xviz::protobuf_AddDesc_uiprimitives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncore.proto\022\004xviz\032\020annotation.proto\032\rop"
    "tions.proto\032\020primitives.proto\032\022uiprimiti"
    "ves.proto\"\322\007\n\tStreamSet\022\021\n\ttimestamp\030\001 \001"
    "(\001\022)\n\005poses\030\002 \003(\0132\032.xviz.StreamSet.Poses"
    "Entry\0223\n\nprimitives\030\003 \003(\0132\037.xviz.StreamS"
    "et.PrimitivesEntry\022*\n\013time_series\030\004 \003(\0132"
    "\025.xviz.TimeSeriesState\022>\n\020future_instanc"
    "es\030\006 \003(\0132$.xviz.StreamSet.FutureInstance"
    "sEntry\0221\n\tvariables\030\007 \003(\0132\036.xviz.StreamS"
    "et.VariablesEntry\0225\n\013annotations\030\010 \003(\0132 "
    ".xviz.StreamSet.AnnotationsEntry\0228\n\rui_p"
    "rimitives\030\t \003(\0132!.xviz.StreamSet.UiPrimi"
    "tivesEntry\022\027\n\017no_data_streams\030\n \003(\t\022)\n\005l"
    "inks\030\013 \003(\0132\032.xviz.StreamSet.LinksEntry\0328"
    "\n\nPosesEntry\022\013\n\003key\030\001 \001(\t\022\031\n\005value\030\002 \001(\013"
    "2\n.xviz.Pose:\0028\001\032G\n\017PrimitivesEntry\022\013\n\003k"
    "ey\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.xviz.Primitive"
    "State:\0028\001\032M\n\024FutureInstancesEntry\022\013\n\003key"
    "\030\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.xviz.FutureInsta"
    "nces:\0028\001\032E\n\016VariablesEntry\022\013\n\003key\030\001 \001(\t\022"
    "\"\n\005value\030\002 \001(\0132\023.xviz.VariableState:\0028\001\032"
    "I\n\020AnnotationsEntry\022\013\n\003key\030\001 \001(\t\022$\n\005valu"
    "e\030\002 \001(\0132\025.xviz.AnnotationState:\0028\001\032K\n\021Ui"
    "PrimitivesEntry\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 "
    "\001(\0132\026.xviz.UIPrimitiveState:\0028\001\0328\n\nLinks"
    "Entry\022\013\n\003key\030\001 \001(\t\022\031\n\005value\030\002 \001(\0132\n.xviz"
    ".Link:\0028\001:\023\302\273\032\017core/stream_set\"t\n\004Pose\022\021"
    "\n\ttimestamp\030\001 \001(\001\022#\n\nmap_origin\030\002 \001(\0132\017."
    "xviz.MapOrigin\022\020\n\010position\030\003 \003(\001\022\023\n\013orie"
    "ntation\030\004 \003(\001:\r\302\273\032\tcore/pose\"B\n\tMapOrigi"
    "n\022\021\n\tlongitude\030\001 \001(\001\022\020\n\010latitude\030\002 \001(\001\022\020"
    "\n\010altitude\030\003 \001(\001\"\203\002\n\016PrimitiveState\022\037\n\010p"
    "olygons\030\001 \003(\0132\r.xviz.Polygon\022!\n\tpolyline"
    "s\030\002 \003(\0132\016.xviz.Polyline\022\031\n\005texts\030\003 \003(\0132\n"
    ".xviz.Text\022\035\n\007circles\030\004 \003(\0132\014.xviz.Circl"
    "e\022\033\n\006points\030\005 \003(\0132\013.xviz.Point\022\037\n\010stadiu"
    "ms\030\006 \003(\0132\r.xviz.Stadium\022\033\n\006images\030\007 \003(\0132"
    "\013.xviz.Image:\030\302\273\032\024core/primitive_state\"S"
    "\n\020UIPrimitiveState\022\"\n\ttreetable\030\001 \001(\0132\017."
    "xviz.TreeTable:\033\302\273\032\027core/ui_primitive_st"
    "ate\"\201\001\n\017TimeSeriesState\022\021\n\ttimestamp\030\001 \001"
    "(\001\022\021\n\tobject_id\030\002 \001(\t\022\017\n\007streams\030\003 \003(\t\022\034"
    "\n\006values\030\004 \001(\0132\014.xviz.Values:\031\302\273\032\025core/t"
    "imeseries_state\"j\n\017FutureInstances\022\022\n\nti"
    "mestamps\030\001 \003(\001\022(\n\nprimitives\030\002 \003(\0132\024.xvi"
    "z.PrimitiveState:\031\302\273\032\025core/future_instan"
    "ces\"K\n\rVariableState\022!\n\tvariables\030\001 \003(\0132"
    "\016.xviz.Variable:\027\302\273\032\023core/variable_state"
    "\"K\n\017AnnotationState\022\035\n\007visuals\030\001 \003(\0132\014.x"
    "viz.Visual:\031\302\273\032\025core/annotation_state\"]\n"
    "\010Variable\022 \n\004base\030\001 \001(\0132\022.xviz.VariableB"
    "ase\022\034\n\006values\030\002 \001(\0132\014.xviz.Values:\021\302\273\032\rc"
    "ore/variable\"!\n\014VariableBase\022\021\n\tobject_i"
    "d\030\001 \001(\t\"Z\n\006Values\022\017\n\007doubles\030\002 \003(\001\022\016\n\006in"
    "t32s\030\003 \003(\005\022\r\n\005bools\030\004 \003(\010\022\017\n\007strings\030\005 \003"
    "(\t:\017\302\273\032\013core/values\"0\n\004Link\022\023\n\013target_po"
    "se\030\001 \001(\t:\023\302\273\032\017core/link_stateB1\n\013com.xvi"
    "z.v2B\tCoreProtoP\001Z\004v2pb\242\002\004XVIZ\252\002\007xviz.V2"
    "b\006proto3", 2328);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "core.proto", &protobuf_RegisterTypes);
  StreamSet::default_instance_ = new StreamSet();
  Pose::default_instance_ = new Pose();
  MapOrigin::default_instance_ = new MapOrigin();
  PrimitiveState::default_instance_ = new PrimitiveState();
  UIPrimitiveState::default_instance_ = new UIPrimitiveState();
  TimeSeriesState::default_instance_ = new TimeSeriesState();
  FutureInstances::default_instance_ = new FutureInstances();
  VariableState::default_instance_ = new VariableState();
  AnnotationState::default_instance_ = new AnnotationState();
  Variable::default_instance_ = new Variable();
  VariableBase::default_instance_ = new VariableBase();
  Values::default_instance_ = new Values();
  Link::default_instance_ = new Link();
  StreamSet::default_instance_->InitAsDefaultInstance();
  Pose::default_instance_->InitAsDefaultInstance();
  MapOrigin::default_instance_->InitAsDefaultInstance();
  PrimitiveState::default_instance_->InitAsDefaultInstance();
  UIPrimitiveState::default_instance_->InitAsDefaultInstance();
  TimeSeriesState::default_instance_->InitAsDefaultInstance();
  FutureInstances::default_instance_->InitAsDefaultInstance();
  VariableState::default_instance_->InitAsDefaultInstance();
  AnnotationState::default_instance_->InitAsDefaultInstance();
  Variable::default_instance_->InitAsDefaultInstance();
  VariableBase::default_instance_->InitAsDefaultInstance();
  Values::default_instance_->InitAsDefaultInstance();
  Link::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_core_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_core_2eproto {
  StaticDescriptorInitializer_core_2eproto() {
    protobuf_AddDesc_core_2eproto();
  }
} static_descriptor_initializer_core_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSet::kTimestampFieldNumber;
const int StreamSet::kPosesFieldNumber;
const int StreamSet::kPrimitivesFieldNumber;
const int StreamSet::kTimeSeriesFieldNumber;
const int StreamSet::kFutureInstancesFieldNumber;
const int StreamSet::kVariablesFieldNumber;
const int StreamSet::kAnnotationsFieldNumber;
const int StreamSet::kUiPrimitivesFieldNumber;
const int StreamSet::kNoDataStreamsFieldNumber;
const int StreamSet::kLinksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSet::StreamSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.StreamSet)
}

void StreamSet::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StreamSet::StreamSet(const StreamSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.StreamSet)
}

void StreamSet::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = 0;
  poses_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  poses_.SetEntryDescriptor(
      &::xviz::StreamSet_PosesEntry_descriptor_);
  primitives_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  primitives_.SetEntryDescriptor(
      &::xviz::StreamSet_PrimitivesEntry_descriptor_);
  future_instances_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  future_instances_.SetEntryDescriptor(
      &::xviz::StreamSet_FutureInstancesEntry_descriptor_);
  variables_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  variables_.SetEntryDescriptor(
      &::xviz::StreamSet_VariablesEntry_descriptor_);
  annotations_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  annotations_.SetEntryDescriptor(
      &::xviz::StreamSet_AnnotationsEntry_descriptor_);
  ui_primitives_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  ui_primitives_.SetEntryDescriptor(
      &::xviz::StreamSet_UiPrimitivesEntry_descriptor_);
  links_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  links_.SetEntryDescriptor(
      &::xviz::StreamSet_LinksEntry_descriptor_);
}

StreamSet::~StreamSet() {
  // @@protoc_insertion_point(destructor:xviz.StreamSet)
  SharedDtor();
}

void StreamSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamSet_descriptor_;
}

const StreamSet& StreamSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

StreamSet* StreamSet::default_instance_ = NULL;

StreamSet* StreamSet::New(::google::protobuf::Arena* arena) const {
  StreamSet* n = new StreamSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamSet::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.StreamSet)
  timestamp_ = 0;
  poses_.Clear();
  primitives_.Clear();
  time_series_.Clear();
  future_instances_.Clear();
  variables_.Clear();
  annotations_.Clear();
  ui_primitives_.Clear();
  no_data_streams_.Clear();
  links_.Clear();
}

bool StreamSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.StreamSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_poses;
        break;
      }

      // map<string, .xviz.Pose> poses = 2;
      case 2: {
        if (tag == 18) {
         parse_poses:
          DO_(input->IncrementRecursionDepth());
         parse_loop_poses:
          StreamSet_PosesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::xviz::Pose,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::Pose > > parser(&poses_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamSet.PosesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_poses;
        if (input->ExpectTag(26)) goto parse_loop_primitives;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .xviz.PrimitiveState> primitives = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_primitives:
          StreamSet_PrimitivesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::xviz::PrimitiveState,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState > > parser(&primitives_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamSet.PrimitivesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_primitives;
        if (input->ExpectTag(34)) goto parse_loop_time_series;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .xviz.TimeSeriesState time_series = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_time_series:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_time_series()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_time_series;
        if (input->ExpectTag(50)) goto parse_loop_future_instances;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .xviz.FutureInstances> future_instances = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_future_instances:
          StreamSet_FutureInstancesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::xviz::FutureInstances,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::FutureInstances > > parser(&future_instances_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamSet.FutureInstancesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_future_instances;
        if (input->ExpectTag(58)) goto parse_loop_variables;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .xviz.VariableState> variables = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_variables:
          StreamSet_VariablesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::xviz::VariableState,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::VariableState > > parser(&variables_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamSet.VariablesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_variables;
        if (input->ExpectTag(66)) goto parse_loop_annotations;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .xviz.AnnotationState> annotations = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_annotations:
          StreamSet_AnnotationsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::xviz::AnnotationState,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::AnnotationState > > parser(&annotations_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamSet.AnnotationsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_annotations;
        if (input->ExpectTag(74)) goto parse_loop_ui_primitives;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .xviz.UIPrimitiveState> ui_primitives = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_ui_primitives:
          StreamSet_UiPrimitivesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::xviz::UIPrimitiveState,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState > > parser(&ui_primitives_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamSet.UiPrimitivesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_ui_primitives;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(82)) goto parse_no_data_streams;
        break;
      }

      // repeated string no_data_streams = 10;
      case 10: {
        if (tag == 82) {
         parse_no_data_streams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_no_data_streams()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->no_data_streams(this->no_data_streams_size() - 1).data(),
            this->no_data_streams(this->no_data_streams_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamSet.no_data_streams"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_no_data_streams;
        if (input->ExpectTag(90)) goto parse_links;
        break;
      }

      // map<string, .xviz.Link> links = 11;
      case 11: {
        if (tag == 90) {
         parse_links:
          DO_(input->IncrementRecursionDepth());
         parse_loop_links:
          StreamSet_LinksEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::xviz::Link,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::Link > > parser(&links_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamSet.LinksEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_links;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.StreamSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.StreamSet)
  return false;
#undef DO_
}

void StreamSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.StreamSet)
  // optional double timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // map<string, .xviz.Pose> poses = 2;
  if (!this->poses().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::Pose >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.PosesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->poses().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->poses().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::Pose >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::Pose >::const_iterator
          it = this->poses().begin();
          it != this->poses().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StreamSet_PosesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(poses_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StreamSet_PosesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::Pose >::const_iterator
          it = this->poses().begin();
          it != this->poses().end(); ++it) {
        entry.reset(poses_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.PrimitiveState> primitives = 3;
  if (!this->primitives().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.PrimitivesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->primitives().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->primitives().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::const_iterator
          it = this->primitives().begin();
          it != this->primitives().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StreamSet_PrimitivesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(primitives_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StreamSet_PrimitivesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::const_iterator
          it = this->primitives().begin();
          it != this->primitives().end(); ++it) {
        entry.reset(primitives_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .xviz.TimeSeriesState time_series = 4;
  for (unsigned int i = 0, n = this->time_series_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->time_series(i), output);
  }

  // map<string, .xviz.FutureInstances> future_instances = 6;
  if (!this->future_instances().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.FutureInstancesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->future_instances().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->future_instances().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::const_iterator
          it = this->future_instances().begin();
          it != this->future_instances().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StreamSet_FutureInstancesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(future_instances_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StreamSet_FutureInstancesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::const_iterator
          it = this->future_instances().begin();
          it != this->future_instances().end(); ++it) {
        entry.reset(future_instances_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.VariableState> variables = 7;
  if (!this->variables().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::VariableState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.VariablesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->variables().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->variables().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::VariableState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::VariableState >::const_iterator
          it = this->variables().begin();
          it != this->variables().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StreamSet_VariablesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(variables_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StreamSet_VariablesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::VariableState >::const_iterator
          it = this->variables().begin();
          it != this->variables().end(); ++it) {
        entry.reset(variables_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.AnnotationState> annotations = 8;
  if (!this->annotations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.AnnotationsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->annotations().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->annotations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StreamSet_AnnotationsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(annotations_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StreamSet_AnnotationsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it) {
        entry.reset(annotations_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.UIPrimitiveState> ui_primitives = 9;
  if (!this->ui_primitives().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.UiPrimitivesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->ui_primitives().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ui_primitives().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::const_iterator
          it = this->ui_primitives().begin();
          it != this->ui_primitives().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StreamSet_UiPrimitivesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ui_primitives_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StreamSet_UiPrimitivesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::const_iterator
          it = this->ui_primitives().begin();
          it != this->ui_primitives().end(); ++it) {
        entry.reset(ui_primitives_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string no_data_streams = 10;
  for (int i = 0; i < this->no_data_streams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->no_data_streams(i).data(), this->no_data_streams(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.StreamSet.no_data_streams");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->no_data_streams(i), output);
  }

  // map<string, .xviz.Link> links = 11;
  if (!this->links().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::Link >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.LinksEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->links().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->links().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::Link >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::Link >::const_iterator
          it = this->links().begin();
          it != this->links().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StreamSet_LinksEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(links_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StreamSet_LinksEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::Link >::const_iterator
          it = this->links().begin();
          it != this->links().end(); ++it) {
        entry.reset(links_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:xviz.StreamSet)
}

::google::protobuf::uint8* StreamSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.StreamSet)
  // optional double timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // map<string, .xviz.Pose> poses = 2;
  if (!this->poses().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::Pose >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.PosesEntry.key");
      }
    };

    if (deterministic &&
        this->poses().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->poses().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::Pose >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::Pose >::const_iterator
          it = this->poses().begin();
          it != this->poses().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StreamSet_PosesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(poses_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StreamSet_PosesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::Pose >::const_iterator
          it = this->poses().begin();
          it != this->poses().end(); ++it) {
        entry.reset(poses_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.PrimitiveState> primitives = 3;
  if (!this->primitives().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.PrimitivesEntry.key");
      }
    };

    if (deterministic &&
        this->primitives().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->primitives().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::const_iterator
          it = this->primitives().begin();
          it != this->primitives().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StreamSet_PrimitivesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(primitives_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StreamSet_PrimitivesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::const_iterator
          it = this->primitives().begin();
          it != this->primitives().end(); ++it) {
        entry.reset(primitives_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .xviz.TimeSeriesState time_series = 4;
  for (unsigned int i = 0, n = this->time_series_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->time_series(i), false, target);
  }

  // map<string, .xviz.FutureInstances> future_instances = 6;
  if (!this->future_instances().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.FutureInstancesEntry.key");
      }
    };

    if (deterministic &&
        this->future_instances().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->future_instances().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::const_iterator
          it = this->future_instances().begin();
          it != this->future_instances().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StreamSet_FutureInstancesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(future_instances_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StreamSet_FutureInstancesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::const_iterator
          it = this->future_instances().begin();
          it != this->future_instances().end(); ++it) {
        entry.reset(future_instances_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.VariableState> variables = 7;
  if (!this->variables().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::VariableState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.VariablesEntry.key");
      }
    };

    if (deterministic &&
        this->variables().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->variables().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::VariableState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::VariableState >::const_iterator
          it = this->variables().begin();
          it != this->variables().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StreamSet_VariablesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(variables_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StreamSet_VariablesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::VariableState >::const_iterator
          it = this->variables().begin();
          it != this->variables().end(); ++it) {
        entry.reset(variables_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.AnnotationState> annotations = 8;
  if (!this->annotations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.AnnotationsEntry.key");
      }
    };

    if (deterministic &&
        this->annotations().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->annotations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StreamSet_AnnotationsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(annotations_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StreamSet_AnnotationsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it) {
        entry.reset(annotations_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.UIPrimitiveState> ui_primitives = 9;
  if (!this->ui_primitives().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.UiPrimitivesEntry.key");
      }
    };

    if (deterministic &&
        this->ui_primitives().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ui_primitives().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::const_iterator
          it = this->ui_primitives().begin();
          it != this->ui_primitives().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StreamSet_UiPrimitivesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ui_primitives_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StreamSet_UiPrimitivesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::const_iterator
          it = this->ui_primitives().begin();
          it != this->ui_primitives().end(); ++it) {
        entry.reset(ui_primitives_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string no_data_streams = 10;
  for (int i = 0; i < this->no_data_streams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->no_data_streams(i).data(), this->no_data_streams(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.StreamSet.no_data_streams");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->no_data_streams(i), target);
  }

  // map<string, .xviz.Link> links = 11;
  if (!this->links().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::Link >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.LinksEntry.key");
      }
    };

    if (deterministic &&
        this->links().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->links().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::Link >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::Link >::const_iterator
          it = this->links().begin();
          it != this->links().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<StreamSet_LinksEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(links_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<StreamSet_LinksEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::Link >::const_iterator
          it = this->links().begin();
          it != this->links().end(); ++it) {
        entry.reset(links_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.StreamSet)
  return target;
}

int StreamSet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.StreamSet)
  int total_size = 0;

  // optional double timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // map<string, .xviz.Pose> poses = 2;
  total_size += 1 * this->poses_size();
  {
    ::google::protobuf::scoped_ptr<StreamSet_PosesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::Pose >::const_iterator
        it = this->poses().begin();
        it != this->poses().end(); ++it) {
      entry.reset(poses_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .xviz.PrimitiveState> primitives = 3;
  total_size += 1 * this->primitives_size();
  {
    ::google::protobuf::scoped_ptr<StreamSet_PrimitivesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::const_iterator
        it = this->primitives().begin();
        it != this->primitives().end(); ++it) {
      entry.reset(primitives_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .xviz.TimeSeriesState time_series = 4;
  total_size += 1 * this->time_series_size();
  for (int i = 0; i < this->time_series_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->time_series(i));
  }

  // map<string, .xviz.FutureInstances> future_instances = 6;
  total_size += 1 * this->future_instances_size();
  {
    ::google::protobuf::scoped_ptr<StreamSet_FutureInstancesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::const_iterator
        it = this->future_instances().begin();
        it != this->future_instances().end(); ++it) {
      entry.reset(future_instances_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .xviz.VariableState> variables = 7;
  total_size += 1 * this->variables_size();
  {
    ::google::protobuf::scoped_ptr<StreamSet_VariablesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::VariableState >::const_iterator
        it = this->variables().begin();
        it != this->variables().end(); ++it) {
      entry.reset(variables_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .xviz.AnnotationState> annotations = 8;
  total_size += 1 * this->annotations_size();
  {
    ::google::protobuf::scoped_ptr<StreamSet_AnnotationsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::const_iterator
        it = this->annotations().begin();
        it != this->annotations().end(); ++it) {
      entry.reset(annotations_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .xviz.UIPrimitiveState> ui_primitives = 9;
  total_size += 1 * this->ui_primitives_size();
  {
    ::google::protobuf::scoped_ptr<StreamSet_UiPrimitivesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::const_iterator
        it = this->ui_primitives().begin();
        it != this->ui_primitives().end(); ++it) {
      entry.reset(ui_primitives_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string no_data_streams = 10;
  total_size += 1 * this->no_data_streams_size();
  for (int i = 0; i < this->no_data_streams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->no_data_streams(i));
  }

  // map<string, .xviz.Link> links = 11;
  total_size += 1 * this->links_size();
  {
    ::google::protobuf::scoped_ptr<StreamSet_LinksEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::Link >::const_iterator
        it = this->links().begin();
        it != this->links().end(); ++it) {
      entry.reset(links_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.StreamSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StreamSet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.StreamSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.StreamSet)
    MergeFrom(*source);
  }
}

void StreamSet::MergeFrom(const StreamSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.StreamSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  poses_.MergeFrom(from.poses_);
  primitives_.MergeFrom(from.primitives_);
  time_series_.MergeFrom(from.time_series_);
  future_instances_.MergeFrom(from.future_instances_);
  variables_.MergeFrom(from.variables_);
  annotations_.MergeFrom(from.annotations_);
  ui_primitives_.MergeFrom(from.ui_primitives_);
  no_data_streams_.MergeFrom(from.no_data_streams_);
  links_.MergeFrom(from.links_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void StreamSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.StreamSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSet::CopyFrom(const StreamSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.StreamSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSet::IsInitialized() const {

  return true;
}

void StreamSet::Swap(StreamSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamSet::InternalSwap(StreamSet* other) {
  std::swap(timestamp_, other->timestamp_);
  poses_.Swap(&other->poses_);
  primitives_.Swap(&other->primitives_);
  time_series_.UnsafeArenaSwap(&other->time_series_);
  future_instances_.Swap(&other->future_instances_);
  variables_.Swap(&other->variables_);
  annotations_.Swap(&other->annotations_);
  ui_primitives_.Swap(&other->ui_primitives_);
  no_data_streams_.UnsafeArenaSwap(&other->no_data_streams_);
  links_.Swap(&other->links_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamSet_descriptor_;
  metadata.reflection = StreamSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamSet

// optional double timestamp = 1;
void StreamSet::clear_timestamp() {
  timestamp_ = 0;
}
 double StreamSet::timestamp() const {
  // @@protoc_insertion_point(field_get:xviz.StreamSet.timestamp)
  return timestamp_;
}
 void StreamSet::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xviz.StreamSet.timestamp)
}

// map<string, .xviz.Pose> poses = 2;
int StreamSet::poses_size() const {
  return poses_.size();
}
void StreamSet::clear_poses() {
  poses_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::xviz::Pose >&
StreamSet::poses() const {
  // @@protoc_insertion_point(field_map:xviz.StreamSet.poses)
  return poses_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::xviz::Pose >*
StreamSet::mutable_poses() {
  // @@protoc_insertion_point(field_mutable_map:xviz.StreamSet.poses)
  return poses_.MutableMap();
}

// map<string, .xviz.PrimitiveState> primitives = 3;
int StreamSet::primitives_size() const {
  return primitives_.size();
}
void StreamSet::clear_primitives() {
  primitives_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >&
StreamSet::primitives() const {
  // @@protoc_insertion_point(field_map:xviz.StreamSet.primitives)
  return primitives_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >*
StreamSet::mutable_primitives() {
  // @@protoc_insertion_point(field_mutable_map:xviz.StreamSet.primitives)
  return primitives_.MutableMap();
}

// repeated .xviz.TimeSeriesState time_series = 4;
int StreamSet::time_series_size() const {
  return time_series_.size();
}
void StreamSet::clear_time_series() {
  time_series_.Clear();
}
const ::xviz::TimeSeriesState& StreamSet::time_series(int index) const {
  // @@protoc_insertion_point(field_get:xviz.StreamSet.time_series)
  return time_series_.Get(index);
}
::xviz::TimeSeriesState* StreamSet::mutable_time_series(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.StreamSet.time_series)
  return time_series_.Mutable(index);
}
::xviz::TimeSeriesState* StreamSet::add_time_series() {
  // @@protoc_insertion_point(field_add:xviz.StreamSet.time_series)
  return time_series_.Add();
}
::google::protobuf::RepeatedPtrField< ::xviz::TimeSeriesState >*
StreamSet::mutable_time_series() {
  // @@protoc_insertion_point(field_mutable_list:xviz.StreamSet.time_series)
  return &time_series_;
}
const ::google::protobuf::RepeatedPtrField< ::xviz::TimeSeriesState >&
StreamSet::time_series() const {
  // @@protoc_insertion_point(field_list:xviz.StreamSet.time_series)
  return time_series_;
}

// map<string, .xviz.FutureInstances> future_instances = 6;
int StreamSet::future_instances_size() const {
  return future_instances_.size();
}
void StreamSet::clear_future_instances() {
  future_instances_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >&
StreamSet::future_instances() const {
  // @@protoc_insertion_point(field_map:xviz.StreamSet.future_instances)
  return future_instances_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >*
StreamSet::mutable_future_instances() {
  // @@protoc_insertion_point(field_mutable_map:xviz.StreamSet.future_instances)
  return future_instances_.MutableMap();
}

// map<string, .xviz.VariableState> variables = 7;
int StreamSet::variables_size() const {
  return variables_.size();
}
void StreamSet::clear_variables() {
  variables_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::xviz::VariableState >&
StreamSet::variables() const {
  // @@protoc_insertion_point(field_map:xviz.StreamSet.variables)
  return variables_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::xviz::VariableState >*
StreamSet::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_map:xviz.StreamSet.variables)
  return variables_.MutableMap();
}

// map<string, .xviz.AnnotationState> annotations = 8;
int StreamSet::annotations_size() const {
  return annotations_.size();
}
void StreamSet::clear_annotations() {
  annotations_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >&
StreamSet::annotations() const {
  // @@protoc_insertion_point(field_map:xviz.StreamSet.annotations)
  return annotations_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >*
StreamSet::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:xviz.StreamSet.annotations)
  return annotations_.MutableMap();
}

// map<string, .xviz.UIPrimitiveState> ui_primitives = 9;
int StreamSet::ui_primitives_size() const {
  return ui_primitives_.size();
}
void StreamSet::clear_ui_primitives() {
  ui_primitives_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >&
StreamSet::ui_primitives() const {
  // @@protoc_insertion_point(field_map:xviz.StreamSet.ui_primitives)
  return ui_primitives_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >*
StreamSet::mutable_ui_primitives() {
  // @@protoc_insertion_point(field_mutable_map:xviz.StreamSet.ui_primitives)
  return ui_primitives_.MutableMap();
}

// repeated string no_data_streams = 10;
int StreamSet::no_data_streams_size() const {
  return no_data_streams_.size();
}
void StreamSet::clear_no_data_streams() {
  no_data_streams_.Clear();
}
 const ::std::string& StreamSet::no_data_streams(int index) const {
  // @@protoc_insertion_point(field_get:xviz.StreamSet.no_data_streams)
  return no_data_streams_.Get(index);
}
 ::std::string* StreamSet::mutable_no_data_streams(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.StreamSet.no_data_streams)
  return no_data_streams_.Mutable(index);
}
 void StreamSet::set_no_data_streams(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.StreamSet.no_data_streams)
  no_data_streams_.Mutable(index)->assign(value);
}
 void StreamSet::set_no_data_streams(int index, const char* value) {
  no_data_streams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.StreamSet.no_data_streams)
}
 void StreamSet::set_no_data_streams(int index, const char* value, size_t size) {
  no_data_streams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.StreamSet.no_data_streams)
}
 ::std::string* StreamSet::add_no_data_streams() {
  // @@protoc_insertion_point(field_add_mutable:xviz.StreamSet.no_data_streams)
  return no_data_streams_.Add();
}
 void StreamSet::add_no_data_streams(const ::std::string& value) {
  no_data_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.StreamSet.no_data_streams)
}
 void StreamSet::add_no_data_streams(const char* value) {
  no_data_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.StreamSet.no_data_streams)
}
 void StreamSet::add_no_data_streams(const char* value, size_t size) {
  no_data_streams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.StreamSet.no_data_streams)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
StreamSet::no_data_streams() const {
  // @@protoc_insertion_point(field_list:xviz.StreamSet.no_data_streams)
  return no_data_streams_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
StreamSet::mutable_no_data_streams() {
  // @@protoc_insertion_point(field_mutable_list:xviz.StreamSet.no_data_streams)
  return &no_data_streams_;
}

// map<string, .xviz.Link> links = 11;
int StreamSet::links_size() const {
  return links_.size();
}
void StreamSet::clear_links() {
  links_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::xviz::Link >&
StreamSet::links() const {
  // @@protoc_insertion_point(field_map:xviz.StreamSet.links)
  return links_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::xviz::Link >*
StreamSet::mutable_links() {
  // @@protoc_insertion_point(field_mutable_map:xviz.StreamSet.links)
  return links_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kTimestampFieldNumber;
const int Pose::kMapOriginFieldNumber;
const int Pose::kPositionFieldNumber;
const int Pose::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Pose)
}

void Pose::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  map_origin_ = const_cast< ::xviz::MapOrigin*>(&::xviz::MapOrigin::default_instance());
}

Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Pose)
}

void Pose::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ = 0;
  map_origin_ = NULL;
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:xviz.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
  if (this != default_instance_) {
    delete map_origin_;
  }
}

void Pose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pose_descriptor_;
}

const Pose& Pose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

Pose* Pose::default_instance_ = NULL;

Pose* Pose::New(::google::protobuf::Arena* arena) const {
  Pose* n = new Pose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Pose)
  timestamp_ = 0;
  if (GetArenaNoVirtual() == NULL && map_origin_ != NULL) delete map_origin_;
  map_origin_ = NULL;
  position_.Clear();
  orientation_.Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Pose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_map_origin;
        break;
      }

      // optional .xviz.MapOrigin map_origin = 2;
      case 2: {
        if (tag == 18) {
         parse_map_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // repeated double position = 3;
      case 3: {
        if (tag == 26) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_orientation;
        break;
      }

      // repeated double orientation = 4;
      case 4: {
        if (tag == 34) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_orientation())));
        } else if (tag == 33) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_orientation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Pose)
  // optional double timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional .xviz.MapOrigin map_origin = 2;
  if (this->has_map_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->map_origin_, output);
  }

  // repeated double position = 3;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_cached_byte_size_);
  }
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->position(i), output);
  }

  // repeated double orientation = 4;
  if (this->orientation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_orientation_cached_byte_size_);
  }
  for (int i = 0; i < this->orientation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->orientation(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Pose)
  // optional double timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional .xviz.MapOrigin map_origin = 2;
  if (this->has_map_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->map_origin_, false, target);
  }

  // repeated double position = 3;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _position_cached_byte_size_, target);
  }
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position(i), target);
  }

  // repeated double orientation = 4;
  if (this->orientation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _orientation_cached_byte_size_, target);
  }
  for (int i = 0; i < this->orientation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->orientation(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Pose)
  return target;
}

int Pose::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Pose)
  int total_size = 0;

  // optional double timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // optional .xviz.MapOrigin map_origin = 2;
  if (this->has_map_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->map_origin_);
  }

  // repeated double position = 3;
  {
    int data_size = 0;
    data_size = 8 * this->position_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double orientation = 4;
  {
    int data_size = 0;
    data_size = 8 * this->orientation_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _orientation_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Pose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Pose* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Pose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  position_.MergeFrom(from.position_);
  orientation_.MergeFrom(from.orientation_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.has_map_origin()) {
    mutable_map_origin()->::xviz::MapOrigin::MergeFrom(from.map_origin());
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {

  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(map_origin_, other->map_origin_);
  position_.UnsafeArenaSwap(&other->position_);
  orientation_.UnsafeArenaSwap(&other->orientation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pose_descriptor_;
  metadata.reflection = Pose_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose

// optional double timestamp = 1;
void Pose::clear_timestamp() {
  timestamp_ = 0;
}
 double Pose::timestamp() const {
  // @@protoc_insertion_point(field_get:xviz.Pose.timestamp)
  return timestamp_;
}
 void Pose::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xviz.Pose.timestamp)
}

// optional .xviz.MapOrigin map_origin = 2;
bool Pose::has_map_origin() const {
  return !_is_default_instance_ && map_origin_ != NULL;
}
void Pose::clear_map_origin() {
  if (GetArenaNoVirtual() == NULL && map_origin_ != NULL) delete map_origin_;
  map_origin_ = NULL;
}
const ::xviz::MapOrigin& Pose::map_origin() const {
  // @@protoc_insertion_point(field_get:xviz.Pose.map_origin)
  return map_origin_ != NULL ? *map_origin_ : *default_instance_->map_origin_;
}
::xviz::MapOrigin* Pose::mutable_map_origin() {
  
  if (map_origin_ == NULL) {
    map_origin_ = new ::xviz::MapOrigin;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Pose.map_origin)
  return map_origin_;
}
::xviz::MapOrigin* Pose::release_map_origin() {
  // @@protoc_insertion_point(field_release:xviz.Pose.map_origin)
  
  ::xviz::MapOrigin* temp = map_origin_;
  map_origin_ = NULL;
  return temp;
}
void Pose::set_allocated_map_origin(::xviz::MapOrigin* map_origin) {
  delete map_origin_;
  map_origin_ = map_origin;
  if (map_origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Pose.map_origin)
}

// repeated double position = 3;
int Pose::position_size() const {
  return position_.size();
}
void Pose::clear_position() {
  position_.Clear();
}
 double Pose::position(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Pose.position)
  return position_.Get(index);
}
 void Pose::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Pose.position)
}
 void Pose::add_position(double value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Pose.position)
}
 const ::google::protobuf::RepeatedField< double >&
Pose::position() const {
  // @@protoc_insertion_point(field_list:xviz.Pose.position)
  return position_;
}
 ::google::protobuf::RepeatedField< double >*
Pose::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Pose.position)
  return &position_;
}

// repeated double orientation = 4;
int Pose::orientation_size() const {
  return orientation_.size();
}
void Pose::clear_orientation() {
  orientation_.Clear();
}
 double Pose::orientation(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Pose.orientation)
  return orientation_.Get(index);
}
 void Pose::set_orientation(int index, double value) {
  orientation_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Pose.orientation)
}
 void Pose::add_orientation(double value) {
  orientation_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Pose.orientation)
}
 const ::google::protobuf::RepeatedField< double >&
Pose::orientation() const {
  // @@protoc_insertion_point(field_list:xviz.Pose.orientation)
  return orientation_;
}
 ::google::protobuf::RepeatedField< double >*
Pose::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Pose.orientation)
  return &orientation_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapOrigin::kLongitudeFieldNumber;
const int MapOrigin::kLatitudeFieldNumber;
const int MapOrigin::kAltitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapOrigin::MapOrigin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.MapOrigin)
}

void MapOrigin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MapOrigin::MapOrigin(const MapOrigin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.MapOrigin)
}

void MapOrigin::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  altitude_ = 0;
}

MapOrigin::~MapOrigin() {
  // @@protoc_insertion_point(destructor:xviz.MapOrigin)
  SharedDtor();
}

void MapOrigin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapOrigin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapOrigin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapOrigin_descriptor_;
}

const MapOrigin& MapOrigin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

MapOrigin* MapOrigin::default_instance_ = NULL;

MapOrigin* MapOrigin::New(::google::protobuf::Arena* arena) const {
  MapOrigin* n = new MapOrigin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapOrigin::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.MapOrigin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MapOrigin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MapOrigin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(longitude_, altitude_);

#undef ZR_HELPER_
#undef ZR_

}

bool MapOrigin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.MapOrigin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double longitude = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_latitude;
        break;
      }

      // optional double latitude = 2;
      case 2: {
        if (tag == 17) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_altitude;
        break;
      }

      // optional double altitude = 3;
      case 3: {
        if (tag == 25) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.MapOrigin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.MapOrigin)
  return false;
#undef DO_
}

void MapOrigin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.MapOrigin)
  // optional double longitude = 1;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // optional double latitude = 2;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // optional double altitude = 3;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->altitude(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.MapOrigin)
}

::google::protobuf::uint8* MapOrigin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.MapOrigin)
  // optional double longitude = 1;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitude(), target);
  }

  // optional double latitude = 2;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // optional double altitude = 3;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->altitude(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.MapOrigin)
  return target;
}

int MapOrigin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.MapOrigin)
  int total_size = 0;

  // optional double longitude = 1;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // optional double latitude = 2;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // optional double altitude = 3;
  if (this->altitude() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapOrigin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.MapOrigin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapOrigin* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapOrigin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.MapOrigin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.MapOrigin)
    MergeFrom(*source);
  }
}

void MapOrigin::MergeFrom(const MapOrigin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.MapOrigin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
}

void MapOrigin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.MapOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOrigin::CopyFrom(const MapOrigin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.MapOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOrigin::IsInitialized() const {

  return true;
}

void MapOrigin::Swap(MapOrigin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapOrigin::InternalSwap(MapOrigin* other) {
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(altitude_, other->altitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapOrigin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapOrigin_descriptor_;
  metadata.reflection = MapOrigin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapOrigin

// optional double longitude = 1;
void MapOrigin::clear_longitude() {
  longitude_ = 0;
}
 double MapOrigin::longitude() const {
  // @@protoc_insertion_point(field_get:xviz.MapOrigin.longitude)
  return longitude_;
}
 void MapOrigin::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:xviz.MapOrigin.longitude)
}

// optional double latitude = 2;
void MapOrigin::clear_latitude() {
  latitude_ = 0;
}
 double MapOrigin::latitude() const {
  // @@protoc_insertion_point(field_get:xviz.MapOrigin.latitude)
  return latitude_;
}
 void MapOrigin::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:xviz.MapOrigin.latitude)
}

// optional double altitude = 3;
void MapOrigin::clear_altitude() {
  altitude_ = 0;
}
 double MapOrigin::altitude() const {
  // @@protoc_insertion_point(field_get:xviz.MapOrigin.altitude)
  return altitude_;
}
 void MapOrigin::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:xviz.MapOrigin.altitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrimitiveState::kPolygonsFieldNumber;
const int PrimitiveState::kPolylinesFieldNumber;
const int PrimitiveState::kTextsFieldNumber;
const int PrimitiveState::kCirclesFieldNumber;
const int PrimitiveState::kPointsFieldNumber;
const int PrimitiveState::kStadiumsFieldNumber;
const int PrimitiveState::kImagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrimitiveState::PrimitiveState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.PrimitiveState)
}

void PrimitiveState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PrimitiveState::PrimitiveState(const PrimitiveState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.PrimitiveState)
}

void PrimitiveState::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PrimitiveState::~PrimitiveState() {
  // @@protoc_insertion_point(destructor:xviz.PrimitiveState)
  SharedDtor();
}

void PrimitiveState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrimitiveState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrimitiveState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrimitiveState_descriptor_;
}

const PrimitiveState& PrimitiveState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

PrimitiveState* PrimitiveState::default_instance_ = NULL;

PrimitiveState* PrimitiveState::New(::google::protobuf::Arena* arena) const {
  PrimitiveState* n = new PrimitiveState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrimitiveState::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.PrimitiveState)
  polygons_.Clear();
  polylines_.Clear();
  texts_.Clear();
  circles_.Clear();
  points_.Clear();
  stadiums_.Clear();
  images_.Clear();
}

bool PrimitiveState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.PrimitiveState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xviz.Polygon polygons = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_polygons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_polygons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_polygons;
        if (input->ExpectTag(18)) goto parse_loop_polylines;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .xviz.Polyline polylines = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_polylines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_polylines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_polylines;
        if (input->ExpectTag(26)) goto parse_loop_texts;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .xviz.Text texts = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_texts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_texts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_texts;
        if (input->ExpectTag(34)) goto parse_loop_circles;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .xviz.Circle circles = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_circles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_circles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_circles;
        if (input->ExpectTag(42)) goto parse_loop_points;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .xviz.Point points = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_points;
        if (input->ExpectTag(50)) goto parse_loop_stadiums;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .xviz.Stadium stadiums = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stadiums:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stadiums()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_stadiums;
        if (input->ExpectTag(58)) goto parse_loop_images;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .xviz.Image images = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_images;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.PrimitiveState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.PrimitiveState)
  return false;
#undef DO_
}

void PrimitiveState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.PrimitiveState)
  // repeated .xviz.Polygon polygons = 1;
  for (unsigned int i = 0, n = this->polygons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->polygons(i), output);
  }

  // repeated .xviz.Polyline polylines = 2;
  for (unsigned int i = 0, n = this->polylines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->polylines(i), output);
  }

  // repeated .xviz.Text texts = 3;
  for (unsigned int i = 0, n = this->texts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->texts(i), output);
  }

  // repeated .xviz.Circle circles = 4;
  for (unsigned int i = 0, n = this->circles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->circles(i), output);
  }

  // repeated .xviz.Point points = 5;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->points(i), output);
  }

  // repeated .xviz.Stadium stadiums = 6;
  for (unsigned int i = 0, n = this->stadiums_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stadiums(i), output);
  }

  // repeated .xviz.Image images = 7;
  for (unsigned int i = 0, n = this->images_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->images(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.PrimitiveState)
}

::google::protobuf::uint8* PrimitiveState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.PrimitiveState)
  // repeated .xviz.Polygon polygons = 1;
  for (unsigned int i = 0, n = this->polygons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->polygons(i), false, target);
  }

  // repeated .xviz.Polyline polylines = 2;
  for (unsigned int i = 0, n = this->polylines_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->polylines(i), false, target);
  }

  // repeated .xviz.Text texts = 3;
  for (unsigned int i = 0, n = this->texts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->texts(i), false, target);
  }

  // repeated .xviz.Circle circles = 4;
  for (unsigned int i = 0, n = this->circles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->circles(i), false, target);
  }

  // repeated .xviz.Point points = 5;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->points(i), false, target);
  }

  // repeated .xviz.Stadium stadiums = 6;
  for (unsigned int i = 0, n = this->stadiums_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->stadiums(i), false, target);
  }

  // repeated .xviz.Image images = 7;
  for (unsigned int i = 0, n = this->images_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->images(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.PrimitiveState)
  return target;
}

int PrimitiveState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.PrimitiveState)
  int total_size = 0;

  // repeated .xviz.Polygon polygons = 1;
  total_size += 1 * this->polygons_size();
  for (int i = 0; i < this->polygons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polygons(i));
  }

  // repeated .xviz.Polyline polylines = 2;
  total_size += 1 * this->polylines_size();
  for (int i = 0; i < this->polylines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polylines(i));
  }

  // repeated .xviz.Text texts = 3;
  total_size += 1 * this->texts_size();
  for (int i = 0; i < this->texts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->texts(i));
  }

  // repeated .xviz.Circle circles = 4;
  total_size += 1 * this->circles_size();
  for (int i = 0; i < this->circles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->circles(i));
  }

  // repeated .xviz.Point points = 5;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  // repeated .xviz.Stadium stadiums = 6;
  total_size += 1 * this->stadiums_size();
  for (int i = 0; i < this->stadiums_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stadiums(i));
  }

  // repeated .xviz.Image images = 7;
  total_size += 1 * this->images_size();
  for (int i = 0; i < this->images_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->images(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrimitiveState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.PrimitiveState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PrimitiveState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PrimitiveState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.PrimitiveState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.PrimitiveState)
    MergeFrom(*source);
  }
}

void PrimitiveState::MergeFrom(const PrimitiveState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.PrimitiveState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  polygons_.MergeFrom(from.polygons_);
  polylines_.MergeFrom(from.polylines_);
  texts_.MergeFrom(from.texts_);
  circles_.MergeFrom(from.circles_);
  points_.MergeFrom(from.points_);
  stadiums_.MergeFrom(from.stadiums_);
  images_.MergeFrom(from.images_);
}

void PrimitiveState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.PrimitiveState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrimitiveState::CopyFrom(const PrimitiveState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.PrimitiveState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveState::IsInitialized() const {

  return true;
}

void PrimitiveState::Swap(PrimitiveState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrimitiveState::InternalSwap(PrimitiveState* other) {
  polygons_.UnsafeArenaSwap(&other->polygons_);
  polylines_.UnsafeArenaSwap(&other->polylines_);
  texts_.UnsafeArenaSwap(&other->texts_);
  circles_.UnsafeArenaSwap(&other->circles_);
  points_.UnsafeArenaSwap(&other->points_);
  stadiums_.UnsafeArenaSwap(&other->stadiums_);
  images_.UnsafeArenaSwap(&other->images_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrimitiveState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrimitiveState_descriptor_;
  metadata.reflection = PrimitiveState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrimitiveState

// repeated .xviz.Polygon polygons = 1;
int PrimitiveState::polygons_size() const {
  return polygons_.size();
}
void PrimitiveState::clear_polygons() {
  polygons_.Clear();
}
const ::xviz::Polygon& PrimitiveState::polygons(int index) const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveState.polygons)
  return polygons_.Get(index);
}
::xviz::Polygon* PrimitiveState::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveState.polygons)
  return polygons_.Mutable(index);
}
::xviz::Polygon* PrimitiveState::add_polygons() {
  // @@protoc_insertion_point(field_add:xviz.PrimitiveState.polygons)
  return polygons_.Add();
}
::google::protobuf::RepeatedPtrField< ::xviz::Polygon >*
PrimitiveState::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:xviz.PrimitiveState.polygons)
  return &polygons_;
}
const ::google::protobuf::RepeatedPtrField< ::xviz::Polygon >&
PrimitiveState::polygons() const {
  // @@protoc_insertion_point(field_list:xviz.PrimitiveState.polygons)
  return polygons_;
}

// repeated .xviz.Polyline polylines = 2;
int PrimitiveState::polylines_size() const {
  return polylines_.size();
}
void PrimitiveState::clear_polylines() {
  polylines_.Clear();
}
const ::xviz::Polyline& PrimitiveState::polylines(int index) const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveState.polylines)
  return polylines_.Get(index);
}
::xviz::Polyline* PrimitiveState::mutable_polylines(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveState.polylines)
  return polylines_.Mutable(index);
}
::xviz::Polyline* PrimitiveState::add_polylines() {
  // @@protoc_insertion_point(field_add:xviz.PrimitiveState.polylines)
  return polylines_.Add();
}
::google::protobuf::RepeatedPtrField< ::xviz::Polyline >*
PrimitiveState::mutable_polylines() {
  // @@protoc_insertion_point(field_mutable_list:xviz.PrimitiveState.polylines)
  return &polylines_;
}
const ::google::protobuf::RepeatedPtrField< ::xviz::Polyline >&
PrimitiveState::polylines() const {
  // @@protoc_insertion_point(field_list:xviz.PrimitiveState.polylines)
  return polylines_;
}

// repeated .xviz.Text texts = 3;
int PrimitiveState::texts_size() const {
  return texts_.size();
}
void PrimitiveState::clear_texts() {
  texts_.Clear();
}
const ::xviz::Text& PrimitiveState::texts(int index) const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveState.texts)
  return texts_.Get(index);
}
::xviz::Text* PrimitiveState::mutable_texts(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveState.texts)
  return texts_.Mutable(index);
}
::xviz::Text* PrimitiveState::add_texts() {
  // @@protoc_insertion_point(field_add:xviz.PrimitiveState.texts)
  return texts_.Add();
}
::google::protobuf::RepeatedPtrField< ::xviz::Text >*
PrimitiveState::mutable_texts() {
  // @@protoc_insertion_point(field_mutable_list:xviz.PrimitiveState.texts)
  return &texts_;
}
const ::google::protobuf::RepeatedPtrField< ::xviz::Text >&
PrimitiveState::texts() const {
  // @@protoc_insertion_point(field_list:xviz.PrimitiveState.texts)
  return texts_;
}

// repeated .xviz.Circle circles = 4;
int PrimitiveState::circles_size() const {
  return circles_.size();
}
void PrimitiveState::clear_circles() {
  circles_.Clear();
}
const ::xviz::Circle& PrimitiveState::circles(int index) const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveState.circles)
  return circles_.Get(index);
}
::xviz::Circle* PrimitiveState::mutable_circles(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveState.circles)
  return circles_.Mutable(index);
}
::xviz::Circle* PrimitiveState::add_circles() {
  // @@protoc_insertion_point(field_add:xviz.PrimitiveState.circles)
  return circles_.Add();
}
::google::protobuf::RepeatedPtrField< ::xviz::Circle >*
PrimitiveState::mutable_circles() {
  // @@protoc_insertion_point(field_mutable_list:xviz.PrimitiveState.circles)
  return &circles_;
}
const ::google::protobuf::RepeatedPtrField< ::xviz::Circle >&
PrimitiveState::circles() const {
  // @@protoc_insertion_point(field_list:xviz.PrimitiveState.circles)
  return circles_;
}

// repeated .xviz.Point points = 5;
int PrimitiveState::points_size() const {
  return points_.size();
}
void PrimitiveState::clear_points() {
  points_.Clear();
}
const ::xviz::Point& PrimitiveState::points(int index) const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveState.points)
  return points_.Get(index);
}
::xviz::Point* PrimitiveState::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveState.points)
  return points_.Mutable(index);
}
::xviz::Point* PrimitiveState::add_points() {
  // @@protoc_insertion_point(field_add:xviz.PrimitiveState.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::xviz::Point >*
PrimitiveState::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:xviz.PrimitiveState.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::xviz::Point >&
PrimitiveState::points() const {
  // @@protoc_insertion_point(field_list:xviz.PrimitiveState.points)
  return points_;
}

// repeated .xviz.Stadium stadiums = 6;
int PrimitiveState::stadiums_size() const {
  return stadiums_.size();
}
void PrimitiveState::clear_stadiums() {
  stadiums_.Clear();
}
const ::xviz::Stadium& PrimitiveState::stadiums(int index) const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveState.stadiums)
  return stadiums_.Get(index);
}
::xviz::Stadium* PrimitiveState::mutable_stadiums(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveState.stadiums)
  return stadiums_.Mutable(index);
}
::xviz::Stadium* PrimitiveState::add_stadiums() {
  // @@protoc_insertion_point(field_add:xviz.PrimitiveState.stadiums)
  return stadiums_.Add();
}
::google::protobuf::RepeatedPtrField< ::xviz::Stadium >*
PrimitiveState::mutable_stadiums() {
  // @@protoc_insertion_point(field_mutable_list:xviz.PrimitiveState.stadiums)
  return &stadiums_;
}
const ::google::protobuf::RepeatedPtrField< ::xviz::Stadium >&
PrimitiveState::stadiums() const {
  // @@protoc_insertion_point(field_list:xviz.PrimitiveState.stadiums)
  return stadiums_;
}

// repeated .xviz.Image images = 7;
int PrimitiveState::images_size() const {
  return images_.size();
}
void PrimitiveState::clear_images() {
  images_.Clear();
}
const ::xviz::Image& PrimitiveState::images(int index) const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveState.images)
  return images_.Get(index);
}
::xviz::Image* PrimitiveState::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveState.images)
  return images_.Mutable(index);
}
::xviz::Image* PrimitiveState::add_images() {
  // @@protoc_insertion_point(field_add:xviz.PrimitiveState.images)
  return images_.Add();
}
::google::protobuf::RepeatedPtrField< ::xviz::Image >*
PrimitiveState::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:xviz.PrimitiveState.images)
  return &images_;
}
const ::google::protobuf::RepeatedPtrField< ::xviz::Image >&
PrimitiveState::images() const {
  // @@protoc_insertion_point(field_list:xviz.PrimitiveState.images)
  return images_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UIPrimitiveState::kTreetableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UIPrimitiveState::UIPrimitiveState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.UIPrimitiveState)
}

void UIPrimitiveState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  treetable_ = const_cast< ::xviz::TreeTable*>(&::xviz::TreeTable::default_instance());
}

UIPrimitiveState::UIPrimitiveState(const UIPrimitiveState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.UIPrimitiveState)
}

void UIPrimitiveState::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  treetable_ = NULL;
}

UIPrimitiveState::~UIPrimitiveState() {
  // @@protoc_insertion_point(destructor:xviz.UIPrimitiveState)
  SharedDtor();
}

void UIPrimitiveState::SharedDtor() {
  if (this != default_instance_) {
    delete treetable_;
  }
}

void UIPrimitiveState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIPrimitiveState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIPrimitiveState_descriptor_;
}

const UIPrimitiveState& UIPrimitiveState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

UIPrimitiveState* UIPrimitiveState::default_instance_ = NULL;

UIPrimitiveState* UIPrimitiveState::New(::google::protobuf::Arena* arena) const {
  UIPrimitiveState* n = new UIPrimitiveState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UIPrimitiveState::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.UIPrimitiveState)
  if (GetArenaNoVirtual() == NULL && treetable_ != NULL) delete treetable_;
  treetable_ = NULL;
}

bool UIPrimitiveState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.UIPrimitiveState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .xviz.TreeTable treetable = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treetable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.UIPrimitiveState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.UIPrimitiveState)
  return false;
#undef DO_
}

void UIPrimitiveState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.UIPrimitiveState)
  // optional .xviz.TreeTable treetable = 1;
  if (this->has_treetable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->treetable_, output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.UIPrimitiveState)
}

::google::protobuf::uint8* UIPrimitiveState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.UIPrimitiveState)
  // optional .xviz.TreeTable treetable = 1;
  if (this->has_treetable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->treetable_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.UIPrimitiveState)
  return target;
}

int UIPrimitiveState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.UIPrimitiveState)
  int total_size = 0;

  // optional .xviz.TreeTable treetable = 1;
  if (this->has_treetable()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->treetable_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIPrimitiveState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.UIPrimitiveState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UIPrimitiveState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UIPrimitiveState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.UIPrimitiveState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.UIPrimitiveState)
    MergeFrom(*source);
  }
}

void UIPrimitiveState::MergeFrom(const UIPrimitiveState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.UIPrimitiveState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_treetable()) {
    mutable_treetable()->::xviz::TreeTable::MergeFrom(from.treetable());
  }
}

void UIPrimitiveState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.UIPrimitiveState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIPrimitiveState::CopyFrom(const UIPrimitiveState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.UIPrimitiveState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIPrimitiveState::IsInitialized() const {

  return true;
}

void UIPrimitiveState::Swap(UIPrimitiveState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UIPrimitiveState::InternalSwap(UIPrimitiveState* other) {
  std::swap(treetable_, other->treetable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UIPrimitiveState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIPrimitiveState_descriptor_;
  metadata.reflection = UIPrimitiveState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UIPrimitiveState

// optional .xviz.TreeTable treetable = 1;
bool UIPrimitiveState::has_treetable() const {
  return !_is_default_instance_ && treetable_ != NULL;
}
void UIPrimitiveState::clear_treetable() {
  if (GetArenaNoVirtual() == NULL && treetable_ != NULL) delete treetable_;
  treetable_ = NULL;
}
const ::xviz::TreeTable& UIPrimitiveState::treetable() const {
  // @@protoc_insertion_point(field_get:xviz.UIPrimitiveState.treetable)
  return treetable_ != NULL ? *treetable_ : *default_instance_->treetable_;
}
::xviz::TreeTable* UIPrimitiveState::mutable_treetable() {
  
  if (treetable_ == NULL) {
    treetable_ = new ::xviz::TreeTable;
  }
  // @@protoc_insertion_point(field_mutable:xviz.UIPrimitiveState.treetable)
  return treetable_;
}
::xviz::TreeTable* UIPrimitiveState::release_treetable() {
  // @@protoc_insertion_point(field_release:xviz.UIPrimitiveState.treetable)
  
  ::xviz::TreeTable* temp = treetable_;
  treetable_ = NULL;
  return temp;
}
void UIPrimitiveState::set_allocated_treetable(::xviz::TreeTable* treetable) {
  delete treetable_;
  treetable_ = treetable;
  if (treetable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.UIPrimitiveState.treetable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeSeriesState::kTimestampFieldNumber;
const int TimeSeriesState::kObjectIdFieldNumber;
const int TimeSeriesState::kStreamsFieldNumber;
const int TimeSeriesState::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeSeriesState::TimeSeriesState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.TimeSeriesState)
}

void TimeSeriesState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  values_ = const_cast< ::xviz::Values*>(&::xviz::Values::default_instance());
}

TimeSeriesState::TimeSeriesState(const TimeSeriesState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.TimeSeriesState)
}

void TimeSeriesState::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = 0;
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  values_ = NULL;
}

TimeSeriesState::~TimeSeriesState() {
  // @@protoc_insertion_point(destructor:xviz.TimeSeriesState)
  SharedDtor();
}

void TimeSeriesState::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete values_;
  }
}

void TimeSeriesState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSeriesState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSeriesState_descriptor_;
}

const TimeSeriesState& TimeSeriesState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

TimeSeriesState* TimeSeriesState::default_instance_ = NULL;

TimeSeriesState* TimeSeriesState::New(::google::protobuf::Arena* arena) const {
  TimeSeriesState* n = new TimeSeriesState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeSeriesState::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.TimeSeriesState)
  timestamp_ = 0;
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && values_ != NULL) delete values_;
  values_ = NULL;
  streams_.Clear();
}

bool TimeSeriesState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.TimeSeriesState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_object_id;
        break;
      }

      // optional string object_id = 2;
      case 2: {
        if (tag == 18) {
         parse_object_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), this->object_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.TimeSeriesState.object_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_streams;
        break;
      }

      // repeated string streams = 3;
      case 3: {
        if (tag == 26) {
         parse_streams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_streams()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->streams(this->streams_size() - 1).data(),
            this->streams(this->streams_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.TimeSeriesState.streams"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_streams;
        if (input->ExpectTag(34)) goto parse_values;
        break;
      }

      // optional .xviz.Values values = 4;
      case 4: {
        if (tag == 34) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.TimeSeriesState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.TimeSeriesState)
  return false;
#undef DO_
}

void TimeSeriesState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.TimeSeriesState)
  // optional double timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), this->object_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TimeSeriesState.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object_id(), output);
  }

  // repeated string streams = 3;
  for (int i = 0; i < this->streams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->streams(i).data(), this->streams(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TimeSeriesState.streams");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->streams(i), output);
  }

  // optional .xviz.Values values = 4;
  if (this->has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->values_, output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.TimeSeriesState)
}

::google::protobuf::uint8* TimeSeriesState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.TimeSeriesState)
  // optional double timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), this->object_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TimeSeriesState.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_id(), target);
  }

  // repeated string streams = 3;
  for (int i = 0; i < this->streams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->streams(i).data(), this->streams(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TimeSeriesState.streams");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->streams(i), target);
  }

  // optional .xviz.Values values = 4;
  if (this->has_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->values_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.TimeSeriesState)
  return target;
}

int TimeSeriesState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.TimeSeriesState)
  int total_size = 0;

  // optional double timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // optional string object_id = 2;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // optional .xviz.Values values = 4;
  if (this->has_values()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->values_);
  }

  // repeated string streams = 3;
  total_size += 1 * this->streams_size();
  for (int i = 0; i < this->streams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->streams(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSeriesState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.TimeSeriesState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TimeSeriesState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeSeriesState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.TimeSeriesState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.TimeSeriesState)
    MergeFrom(*source);
  }
}

void TimeSeriesState::MergeFrom(const TimeSeriesState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.TimeSeriesState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  streams_.MergeFrom(from.streams_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.has_values()) {
    mutable_values()->::xviz::Values::MergeFrom(from.values());
  }
}

void TimeSeriesState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.TimeSeriesState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSeriesState::CopyFrom(const TimeSeriesState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.TimeSeriesState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSeriesState::IsInitialized() const {

  return true;
}

void TimeSeriesState::Swap(TimeSeriesState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeSeriesState::InternalSwap(TimeSeriesState* other) {
  std::swap(timestamp_, other->timestamp_);
  object_id_.Swap(&other->object_id_);
  streams_.UnsafeArenaSwap(&other->streams_);
  std::swap(values_, other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeSeriesState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSeriesState_descriptor_;
  metadata.reflection = TimeSeriesState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeSeriesState

// optional double timestamp = 1;
void TimeSeriesState::clear_timestamp() {
  timestamp_ = 0;
}
 double TimeSeriesState::timestamp() const {
  // @@protoc_insertion_point(field_get:xviz.TimeSeriesState.timestamp)
  return timestamp_;
}
 void TimeSeriesState::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xviz.TimeSeriesState.timestamp)
}

// optional string object_id = 2;
void TimeSeriesState::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TimeSeriesState::object_id() const {
  // @@protoc_insertion_point(field_get:xviz.TimeSeriesState.object_id)
  return object_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TimeSeriesState::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.TimeSeriesState.object_id)
}
 void TimeSeriesState::set_object_id(const char* value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.TimeSeriesState.object_id)
}
 void TimeSeriesState::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.TimeSeriesState.object_id)
}
 ::std::string* TimeSeriesState::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:xviz.TimeSeriesState.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TimeSeriesState::release_object_id() {
  // @@protoc_insertion_point(field_release:xviz.TimeSeriesState.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TimeSeriesState::set_allocated_object_id(::std::string* object_id) {
  if (object_id != NULL) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:xviz.TimeSeriesState.object_id)
}

// repeated string streams = 3;
int TimeSeriesState::streams_size() const {
  return streams_.size();
}
void TimeSeriesState::clear_streams() {
  streams_.Clear();
}
 const ::std::string& TimeSeriesState::streams(int index) const {
  // @@protoc_insertion_point(field_get:xviz.TimeSeriesState.streams)
  return streams_.Get(index);
}
 ::std::string* TimeSeriesState::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.TimeSeriesState.streams)
  return streams_.Mutable(index);
}
 void TimeSeriesState::set_streams(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.TimeSeriesState.streams)
  streams_.Mutable(index)->assign(value);
}
 void TimeSeriesState::set_streams(int index, const char* value) {
  streams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.TimeSeriesState.streams)
}
 void TimeSeriesState::set_streams(int index, const char* value, size_t size) {
  streams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.TimeSeriesState.streams)
}
 ::std::string* TimeSeriesState::add_streams() {
  // @@protoc_insertion_point(field_add_mutable:xviz.TimeSeriesState.streams)
  return streams_.Add();
}
 void TimeSeriesState::add_streams(const ::std::string& value) {
  streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.TimeSeriesState.streams)
}
 void TimeSeriesState::add_streams(const char* value) {
  streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.TimeSeriesState.streams)
}
 void TimeSeriesState::add_streams(const char* value, size_t size) {
  streams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.TimeSeriesState.streams)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TimeSeriesState::streams() const {
  // @@protoc_insertion_point(field_list:xviz.TimeSeriesState.streams)
  return streams_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TimeSeriesState::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:xviz.TimeSeriesState.streams)
  return &streams_;
}

// optional .xviz.Values values = 4;
bool TimeSeriesState::has_values() const {
  return !_is_default_instance_ && values_ != NULL;
}
void TimeSeriesState::clear_values() {
  if (GetArenaNoVirtual() == NULL && values_ != NULL) delete values_;
  values_ = NULL;
}
const ::xviz::Values& TimeSeriesState::values() const {
  // @@protoc_insertion_point(field_get:xviz.TimeSeriesState.values)
  return values_ != NULL ? *values_ : *default_instance_->values_;
}
::xviz::Values* TimeSeriesState::mutable_values() {
  
  if (values_ == NULL) {
    values_ = new ::xviz::Values;
  }
  // @@protoc_insertion_point(field_mutable:xviz.TimeSeriesState.values)
  return values_;
}
::xviz::Values* TimeSeriesState::release_values() {
  // @@protoc_insertion_point(field_release:xviz.TimeSeriesState.values)
  
  ::xviz::Values* temp = values_;
  values_ = NULL;
  return temp;
}
void TimeSeriesState::set_allocated_values(::xviz::Values* values) {
  delete values_;
  values_ = values;
  if (values) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.TimeSeriesState.values)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureInstances::kTimestampsFieldNumber;
const int FutureInstances::kPrimitivesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureInstances::FutureInstances()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.FutureInstances)
}

void FutureInstances::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FutureInstances::FutureInstances(const FutureInstances& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.FutureInstances)
}

void FutureInstances::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

FutureInstances::~FutureInstances() {
  // @@protoc_insertion_point(destructor:xviz.FutureInstances)
  SharedDtor();
}

void FutureInstances::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FutureInstances::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FutureInstances::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FutureInstances_descriptor_;
}

const FutureInstances& FutureInstances::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

FutureInstances* FutureInstances::default_instance_ = NULL;

FutureInstances* FutureInstances::New(::google::protobuf::Arena* arena) const {
  FutureInstances* n = new FutureInstances;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FutureInstances::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.FutureInstances)
  timestamps_.Clear();
  primitives_.Clear();
}

bool FutureInstances::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.FutureInstances)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double timestamps = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_timestamps())));
        } else if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_timestamps())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_primitives;
        break;
      }

      // repeated .xviz.PrimitiveState primitives = 2;
      case 2: {
        if (tag == 18) {
         parse_primitives:
          DO_(input->IncrementRecursionDepth());
         parse_loop_primitives:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_primitives()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_primitives;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.FutureInstances)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.FutureInstances)
  return false;
#undef DO_
}

void FutureInstances::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.FutureInstances)
  // repeated double timestamps = 1;
  if (this->timestamps_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_timestamps_cached_byte_size_);
  }
  for (int i = 0; i < this->timestamps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->timestamps(i), output);
  }

  // repeated .xviz.PrimitiveState primitives = 2;
  for (unsigned int i = 0, n = this->primitives_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->primitives(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.FutureInstances)
}

::google::protobuf::uint8* FutureInstances::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.FutureInstances)
  // repeated double timestamps = 1;
  if (this->timestamps_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _timestamps_cached_byte_size_, target);
  }
  for (int i = 0; i < this->timestamps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->timestamps(i), target);
  }

  // repeated .xviz.PrimitiveState primitives = 2;
  for (unsigned int i = 0, n = this->primitives_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->primitives(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.FutureInstances)
  return target;
}

int FutureInstances::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.FutureInstances)
  int total_size = 0;

  // repeated double timestamps = 1;
  {
    int data_size = 0;
    data_size = 8 * this->timestamps_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _timestamps_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .xviz.PrimitiveState primitives = 2;
  total_size += 1 * this->primitives_size();
  for (int i = 0; i < this->primitives_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->primitives(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FutureInstances::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.FutureInstances)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FutureInstances* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureInstances>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.FutureInstances)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.FutureInstances)
    MergeFrom(*source);
  }
}

void FutureInstances::MergeFrom(const FutureInstances& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.FutureInstances)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  timestamps_.MergeFrom(from.timestamps_);
  primitives_.MergeFrom(from.primitives_);
}

void FutureInstances::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.FutureInstances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureInstances::CopyFrom(const FutureInstances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.FutureInstances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureInstances::IsInitialized() const {

  return true;
}

void FutureInstances::Swap(FutureInstances* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureInstances::InternalSwap(FutureInstances* other) {
  timestamps_.UnsafeArenaSwap(&other->timestamps_);
  primitives_.UnsafeArenaSwap(&other->primitives_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FutureInstances::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FutureInstances_descriptor_;
  metadata.reflection = FutureInstances_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FutureInstances

// repeated double timestamps = 1;
int FutureInstances::timestamps_size() const {
  return timestamps_.size();
}
void FutureInstances::clear_timestamps() {
  timestamps_.Clear();
}
 double FutureInstances::timestamps(int index) const {
  // @@protoc_insertion_point(field_get:xviz.FutureInstances.timestamps)
  return timestamps_.Get(index);
}
 void FutureInstances::set_timestamps(int index, double value) {
  timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.FutureInstances.timestamps)
}
 void FutureInstances::add_timestamps(double value) {
  timestamps_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.FutureInstances.timestamps)
}
 const ::google::protobuf::RepeatedField< double >&
FutureInstances::timestamps() const {
  // @@protoc_insertion_point(field_list:xviz.FutureInstances.timestamps)
  return timestamps_;
}
 ::google::protobuf::RepeatedField< double >*
FutureInstances::mutable_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:xviz.FutureInstances.timestamps)
  return &timestamps_;
}

// repeated .xviz.PrimitiveState primitives = 2;
int FutureInstances::primitives_size() const {
  return primitives_.size();
}
void FutureInstances::clear_primitives() {
  primitives_.Clear();
}
const ::xviz::PrimitiveState& FutureInstances::primitives(int index) const {
  // @@protoc_insertion_point(field_get:xviz.FutureInstances.primitives)
  return primitives_.Get(index);
}
::xviz::PrimitiveState* FutureInstances::mutable_primitives(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.FutureInstances.primitives)
  return primitives_.Mutable(index);
}
::xviz::PrimitiveState* FutureInstances::add_primitives() {
  // @@protoc_insertion_point(field_add:xviz.FutureInstances.primitives)
  return primitives_.Add();
}
::google::protobuf::RepeatedPtrField< ::xviz::PrimitiveState >*
FutureInstances::mutable_primitives() {
  // @@protoc_insertion_point(field_mutable_list:xviz.FutureInstances.primitives)
  return &primitives_;
}
const ::google::protobuf::RepeatedPtrField< ::xviz::PrimitiveState >&
FutureInstances::primitives() const {
  // @@protoc_insertion_point(field_list:xviz.FutureInstances.primitives)
  return primitives_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariableState::kVariablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariableState::VariableState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.VariableState)
}

void VariableState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VariableState::VariableState(const VariableState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.VariableState)
}

void VariableState::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

VariableState::~VariableState() {
  // @@protoc_insertion_point(destructor:xviz.VariableState)
  SharedDtor();
}

void VariableState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VariableState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariableState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VariableState_descriptor_;
}

const VariableState& VariableState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

VariableState* VariableState::default_instance_ = NULL;

VariableState* VariableState::New(::google::protobuf::Arena* arena) const {
  VariableState* n = new VariableState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VariableState::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.VariableState)
  variables_.Clear();
}

bool VariableState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.VariableState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xviz.Variable variables = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_variables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_variables()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_variables;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.VariableState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.VariableState)
  return false;
#undef DO_
}

void VariableState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.VariableState)
  // repeated .xviz.Variable variables = 1;
  for (unsigned int i = 0, n = this->variables_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->variables(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.VariableState)
}

::google::protobuf::uint8* VariableState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.VariableState)
  // repeated .xviz.Variable variables = 1;
  for (unsigned int i = 0, n = this->variables_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->variables(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.VariableState)
  return target;
}

int VariableState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.VariableState)
  int total_size = 0;

  // repeated .xviz.Variable variables = 1;
  total_size += 1 * this->variables_size();
  for (int i = 0; i < this->variables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variables(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariableState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.VariableState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VariableState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VariableState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.VariableState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.VariableState)
    MergeFrom(*source);
  }
}

void VariableState::MergeFrom(const VariableState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.VariableState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  variables_.MergeFrom(from.variables_);
}

void VariableState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.VariableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableState::CopyFrom(const VariableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.VariableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableState::IsInitialized() const {

  return true;
}

void VariableState::Swap(VariableState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VariableState::InternalSwap(VariableState* other) {
  variables_.UnsafeArenaSwap(&other->variables_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VariableState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VariableState_descriptor_;
  metadata.reflection = VariableState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VariableState

// repeated .xviz.Variable variables = 1;
int VariableState::variables_size() const {
  return variables_.size();
}
void VariableState::clear_variables() {
  variables_.Clear();
}
const ::xviz::Variable& VariableState::variables(int index) const {
  // @@protoc_insertion_point(field_get:xviz.VariableState.variables)
  return variables_.Get(index);
}
::xviz::Variable* VariableState::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.VariableState.variables)
  return variables_.Mutable(index);
}
::xviz::Variable* VariableState::add_variables() {
  // @@protoc_insertion_point(field_add:xviz.VariableState.variables)
  return variables_.Add();
}
::google::protobuf::RepeatedPtrField< ::xviz::Variable >*
VariableState::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:xviz.VariableState.variables)
  return &variables_;
}
const ::google::protobuf::RepeatedPtrField< ::xviz::Variable >&
VariableState::variables() const {
  // @@protoc_insertion_point(field_list:xviz.VariableState.variables)
  return variables_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotationState::kVisualsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnotationState::AnnotationState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.AnnotationState)
}

void AnnotationState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AnnotationState::AnnotationState(const AnnotationState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.AnnotationState)
}

void AnnotationState::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

AnnotationState::~AnnotationState() {
  // @@protoc_insertion_point(destructor:xviz.AnnotationState)
  SharedDtor();
}

void AnnotationState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnnotationState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnotationState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnnotationState_descriptor_;
}

const AnnotationState& AnnotationState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

AnnotationState* AnnotationState::default_instance_ = NULL;

AnnotationState* AnnotationState::New(::google::protobuf::Arena* arena) const {
  AnnotationState* n = new AnnotationState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnotationState::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.AnnotationState)
  visuals_.Clear();
}

bool AnnotationState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.AnnotationState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xviz.Visual visuals = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_visuals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_visuals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_visuals;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.AnnotationState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.AnnotationState)
  return false;
#undef DO_
}

void AnnotationState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.AnnotationState)
  // repeated .xviz.Visual visuals = 1;
  for (unsigned int i = 0, n = this->visuals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->visuals(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.AnnotationState)
}

::google::protobuf::uint8* AnnotationState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.AnnotationState)
  // repeated .xviz.Visual visuals = 1;
  for (unsigned int i = 0, n = this->visuals_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->visuals(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.AnnotationState)
  return target;
}

int AnnotationState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.AnnotationState)
  int total_size = 0;

  // repeated .xviz.Visual visuals = 1;
  total_size += 1 * this->visuals_size();
  for (int i = 0; i < this->visuals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->visuals(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnotationState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.AnnotationState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AnnotationState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnotationState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.AnnotationState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.AnnotationState)
    MergeFrom(*source);
  }
}

void AnnotationState::MergeFrom(const AnnotationState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.AnnotationState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  visuals_.MergeFrom(from.visuals_);
}

void AnnotationState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.AnnotationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotationState::CopyFrom(const AnnotationState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.AnnotationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationState::IsInitialized() const {

  return true;
}

void AnnotationState::Swap(AnnotationState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnotationState::InternalSwap(AnnotationState* other) {
  visuals_.UnsafeArenaSwap(&other->visuals_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnnotationState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnnotationState_descriptor_;
  metadata.reflection = AnnotationState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnnotationState

// repeated .xviz.Visual visuals = 1;
int AnnotationState::visuals_size() const {
  return visuals_.size();
}
void AnnotationState::clear_visuals() {
  visuals_.Clear();
}
const ::xviz::Visual& AnnotationState::visuals(int index) const {
  // @@protoc_insertion_point(field_get:xviz.AnnotationState.visuals)
  return visuals_.Get(index);
}
::xviz::Visual* AnnotationState::mutable_visuals(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.AnnotationState.visuals)
  return visuals_.Mutable(index);
}
::xviz::Visual* AnnotationState::add_visuals() {
  // @@protoc_insertion_point(field_add:xviz.AnnotationState.visuals)
  return visuals_.Add();
}
::google::protobuf::RepeatedPtrField< ::xviz::Visual >*
AnnotationState::mutable_visuals() {
  // @@protoc_insertion_point(field_mutable_list:xviz.AnnotationState.visuals)
  return &visuals_;
}
const ::google::protobuf::RepeatedPtrField< ::xviz::Visual >&
AnnotationState::visuals() const {
  // @@protoc_insertion_point(field_list:xviz.AnnotationState.visuals)
  return visuals_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Variable::kBaseFieldNumber;
const int Variable::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Variable::Variable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Variable)
}

void Variable::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::xviz::VariableBase*>(&::xviz::VariableBase::default_instance());
  values_ = const_cast< ::xviz::Values*>(&::xviz::Values::default_instance());
}

Variable::Variable(const Variable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Variable)
}

void Variable::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_ = NULL;
  values_ = NULL;
}

Variable::~Variable() {
  // @@protoc_insertion_point(destructor:xviz.Variable)
  SharedDtor();
}

void Variable::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete values_;
  }
}

void Variable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Variable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Variable_descriptor_;
}

const Variable& Variable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

Variable* Variable::default_instance_ = NULL;

Variable* Variable::New(::google::protobuf::Arena* arena) const {
  Variable* n = new Variable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Variable::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Variable)
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && values_ != NULL) delete values_;
  values_ = NULL;
}

bool Variable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Variable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .xviz.VariableBase base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // optional .xviz.Values values = 2;
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Variable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Variable)
  return false;
#undef DO_
}

void Variable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Variable)
  // optional .xviz.VariableBase base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // optional .xviz.Values values = 2;
  if (this->has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->values_, output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Variable)
}

::google::protobuf::uint8* Variable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Variable)
  // optional .xviz.VariableBase base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, false, target);
  }

  // optional .xviz.Values values = 2;
  if (this->has_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->values_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Variable)
  return target;
}

int Variable::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Variable)
  int total_size = 0;

  // optional .xviz.VariableBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional .xviz.Values values = 2;
  if (this->has_values()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->values_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Variable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Variable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Variable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Variable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Variable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Variable)
    MergeFrom(*source);
  }
}

void Variable::MergeFrom(const Variable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Variable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_base()) {
    mutable_base()->::xviz::VariableBase::MergeFrom(from.base());
  }
  if (from.has_values()) {
    mutable_values()->::xviz::Values::MergeFrom(from.values());
  }
}

void Variable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Variable::CopyFrom(const Variable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Variable::IsInitialized() const {

  return true;
}

void Variable::Swap(Variable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Variable::InternalSwap(Variable* other) {
  std::swap(base_, other->base_);
  std::swap(values_, other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Variable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Variable_descriptor_;
  metadata.reflection = Variable_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Variable

// optional .xviz.VariableBase base = 1;
bool Variable::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void Variable::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::xviz::VariableBase& Variable::base() const {
  // @@protoc_insertion_point(field_get:xviz.Variable.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::xviz::VariableBase* Variable::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::xviz::VariableBase;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Variable.base)
  return base_;
}
::xviz::VariableBase* Variable::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Variable.base)
  
  ::xviz::VariableBase* temp = base_;
  base_ = NULL;
  return temp;
}
void Variable::set_allocated_base(::xviz::VariableBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Variable.base)
}

// optional .xviz.Values values = 2;
bool Variable::has_values() const {
  return !_is_default_instance_ && values_ != NULL;
}
void Variable::clear_values() {
  if (GetArenaNoVirtual() == NULL && values_ != NULL) delete values_;
  values_ = NULL;
}
const ::xviz::Values& Variable::values() const {
  // @@protoc_insertion_point(field_get:xviz.Variable.values)
  return values_ != NULL ? *values_ : *default_instance_->values_;
}
::xviz::Values* Variable::mutable_values() {
  
  if (values_ == NULL) {
    values_ = new ::xviz::Values;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Variable.values)
  return values_;
}
::xviz::Values* Variable::release_values() {
  // @@protoc_insertion_point(field_release:xviz.Variable.values)
  
  ::xviz::Values* temp = values_;
  values_ = NULL;
  return temp;
}
void Variable::set_allocated_values(::xviz::Values* values) {
  delete values_;
  values_ = values;
  if (values) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Variable.values)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariableBase::kObjectIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariableBase::VariableBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.VariableBase)
}

void VariableBase::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VariableBase::VariableBase(const VariableBase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.VariableBase)
}

void VariableBase::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VariableBase::~VariableBase() {
  // @@protoc_insertion_point(destructor:xviz.VariableBase)
  SharedDtor();
}

void VariableBase::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VariableBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariableBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VariableBase_descriptor_;
}

const VariableBase& VariableBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

VariableBase* VariableBase::default_instance_ = NULL;

VariableBase* VariableBase::New(::google::protobuf::Arena* arena) const {
  VariableBase* n = new VariableBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VariableBase::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.VariableBase)
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool VariableBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.VariableBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string object_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), this->object_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.VariableBase.object_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.VariableBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.VariableBase)
  return false;
#undef DO_
}

void VariableBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.VariableBase)
  // optional string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), this->object_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.VariableBase.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->object_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.VariableBase)
}

::google::protobuf::uint8* VariableBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.VariableBase)
  // optional string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), this->object_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.VariableBase.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.VariableBase)
  return target;
}

int VariableBase::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.VariableBase)
  int total_size = 0;

  // optional string object_id = 1;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariableBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.VariableBase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VariableBase* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VariableBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.VariableBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.VariableBase)
    MergeFrom(*source);
  }
}

void VariableBase::MergeFrom(const VariableBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.VariableBase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
}

void VariableBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.VariableBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableBase::CopyFrom(const VariableBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.VariableBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableBase::IsInitialized() const {

  return true;
}

void VariableBase::Swap(VariableBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VariableBase::InternalSwap(VariableBase* other) {
  object_id_.Swap(&other->object_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VariableBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VariableBase_descriptor_;
  metadata.reflection = VariableBase_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VariableBase

// optional string object_id = 1;
void VariableBase::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VariableBase::object_id() const {
  // @@protoc_insertion_point(field_get:xviz.VariableBase.object_id)
  return object_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VariableBase::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.VariableBase.object_id)
}
 void VariableBase::set_object_id(const char* value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.VariableBase.object_id)
}
 void VariableBase::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.VariableBase.object_id)
}
 ::std::string* VariableBase::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:xviz.VariableBase.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VariableBase::release_object_id() {
  // @@protoc_insertion_point(field_release:xviz.VariableBase.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VariableBase::set_allocated_object_id(::std::string* object_id) {
  if (object_id != NULL) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:xviz.VariableBase.object_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Values::kDoublesFieldNumber;
const int Values::kInt32SFieldNumber;
const int Values::kBoolsFieldNumber;
const int Values::kStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Values::Values()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Values)
}

void Values::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Values::Values(const Values& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Values)
}

void Values::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

Values::~Values() {
  // @@protoc_insertion_point(destructor:xviz.Values)
  SharedDtor();
}

void Values::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Values::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Values::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Values_descriptor_;
}

const Values& Values::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

Values* Values::default_instance_ = NULL;

Values* Values::New(::google::protobuf::Arena* arena) const {
  Values* n = new Values;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Values::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Values)
  doubles_.Clear();
  int32s_.Clear();
  bools_.Clear();
  strings_.Clear();
}

bool Values::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Values)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double doubles = 2;
      case 2: {
        if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_doubles())));
        } else if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_doubles())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_int32s;
        break;
      }

      // repeated int32 int32s = 3;
      case 3: {
        if (tag == 26) {
         parse_int32s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32s())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_int32s())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bools;
        break;
      }

      // repeated bool bools = 4;
      case 4: {
        if (tag == 34) {
         parse_bools:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_bools())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 34, input, this->mutable_bools())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_strings;
        break;
      }

      // repeated string strings = 5;
      case 5: {
        if (tag == 42) {
         parse_strings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strings()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strings(this->strings_size() - 1).data(),
            this->strings(this->strings_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.Values.strings"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_strings;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Values)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Values)
  return false;
#undef DO_
}

void Values::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Values)
  // repeated double doubles = 2;
  if (this->doubles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_doubles_cached_byte_size_);
  }
  for (int i = 0; i < this->doubles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->doubles(i), output);
  }

  // repeated int32 int32s = 3;
  if (this->int32s_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_int32s_cached_byte_size_);
  }
  for (int i = 0; i < this->int32s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->int32s(i), output);
  }

  // repeated bool bools = 4;
  if (this->bools_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bools_cached_byte_size_);
  }
  for (int i = 0; i < this->bools_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->bools(i), output);
  }

  // repeated string strings = 5;
  for (int i = 0; i < this->strings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strings(i).data(), this->strings(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Values.strings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strings(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Values)
}

::google::protobuf::uint8* Values::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Values)
  // repeated double doubles = 2;
  if (this->doubles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _doubles_cached_byte_size_, target);
  }
  for (int i = 0; i < this->doubles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->doubles(i), target);
  }

  // repeated int32 int32s = 3;
  if (this->int32s_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _int32s_cached_byte_size_, target);
  }
  for (int i = 0; i < this->int32s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->int32s(i), target);
  }

  // repeated bool bools = 4;
  if (this->bools_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _bools_cached_byte_size_, target);
  }
  for (int i = 0; i < this->bools_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->bools(i), target);
  }

  // repeated string strings = 5;
  for (int i = 0; i < this->strings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strings(i).data(), this->strings(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Values.strings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->strings(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Values)
  return target;
}

int Values::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Values)
  int total_size = 0;

  // repeated double doubles = 2;
  {
    int data_size = 0;
    data_size = 8 * this->doubles_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _doubles_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 int32s = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->int32s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int32s(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int32s_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool bools = 4;
  {
    int data_size = 0;
    data_size = 1 * this->bools_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bools_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string strings = 5;
  total_size += 1 * this->strings_size();
  for (int i = 0; i < this->strings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strings(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Values::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Values)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Values* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Values>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Values)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Values)
    MergeFrom(*source);
  }
}

void Values::MergeFrom(const Values& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Values)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  doubles_.MergeFrom(from.doubles_);
  int32s_.MergeFrom(from.int32s_);
  bools_.MergeFrom(from.bools_);
  strings_.MergeFrom(from.strings_);
}

void Values::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Values)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Values::CopyFrom(const Values& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Values)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Values::IsInitialized() const {

  return true;
}

void Values::Swap(Values* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Values::InternalSwap(Values* other) {
  doubles_.UnsafeArenaSwap(&other->doubles_);
  int32s_.UnsafeArenaSwap(&other->int32s_);
  bools_.UnsafeArenaSwap(&other->bools_);
  strings_.UnsafeArenaSwap(&other->strings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Values::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Values_descriptor_;
  metadata.reflection = Values_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Values

// repeated double doubles = 2;
int Values::doubles_size() const {
  return doubles_.size();
}
void Values::clear_doubles() {
  doubles_.Clear();
}
 double Values::doubles(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Values.doubles)
  return doubles_.Get(index);
}
 void Values::set_doubles(int index, double value) {
  doubles_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Values.doubles)
}
 void Values::add_doubles(double value) {
  doubles_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Values.doubles)
}
 const ::google::protobuf::RepeatedField< double >&
Values::doubles() const {
  // @@protoc_insertion_point(field_list:xviz.Values.doubles)
  return doubles_;
}
 ::google::protobuf::RepeatedField< double >*
Values::mutable_doubles() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Values.doubles)
  return &doubles_;
}

// repeated int32 int32s = 3;
int Values::int32s_size() const {
  return int32s_.size();
}
void Values::clear_int32s() {
  int32s_.Clear();
}
 ::google::protobuf::int32 Values::int32s(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Values.int32s)
  return int32s_.Get(index);
}
 void Values::set_int32s(int index, ::google::protobuf::int32 value) {
  int32s_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Values.int32s)
}
 void Values::add_int32s(::google::protobuf::int32 value) {
  int32s_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Values.int32s)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Values::int32s() const {
  // @@protoc_insertion_point(field_list:xviz.Values.int32s)
  return int32s_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Values::mutable_int32s() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Values.int32s)
  return &int32s_;
}

// repeated bool bools = 4;
int Values::bools_size() const {
  return bools_.size();
}
void Values::clear_bools() {
  bools_.Clear();
}
 bool Values::bools(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Values.bools)
  return bools_.Get(index);
}
 void Values::set_bools(int index, bool value) {
  bools_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Values.bools)
}
 void Values::add_bools(bool value) {
  bools_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Values.bools)
}
 const ::google::protobuf::RepeatedField< bool >&
Values::bools() const {
  // @@protoc_insertion_point(field_list:xviz.Values.bools)
  return bools_;
}
 ::google::protobuf::RepeatedField< bool >*
Values::mutable_bools() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Values.bools)
  return &bools_;
}

// repeated string strings = 5;
int Values::strings_size() const {
  return strings_.size();
}
void Values::clear_strings() {
  strings_.Clear();
}
 const ::std::string& Values::strings(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Values.strings)
  return strings_.Get(index);
}
 ::std::string* Values::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.Values.strings)
  return strings_.Mutable(index);
}
 void Values::set_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.Values.strings)
  strings_.Mutable(index)->assign(value);
}
 void Values::set_strings(int index, const char* value) {
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.Values.strings)
}
 void Values::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.Values.strings)
}
 ::std::string* Values::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:xviz.Values.strings)
  return strings_.Add();
}
 void Values::add_strings(const ::std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.Values.strings)
}
 void Values::add_strings(const char* value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.Values.strings)
}
 void Values::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.Values.strings)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Values::strings() const {
  // @@protoc_insertion_point(field_list:xviz.Values.strings)
  return strings_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Values::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Values.strings)
  return &strings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Link::kTargetPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Link::Link()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Link)
}

void Link::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Link::Link(const Link& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Link)
}

void Link::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  target_pose_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:xviz.Link)
  SharedDtor();
}

void Link::SharedDtor() {
  target_pose_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Link_descriptor_;
}

const Link& Link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

Link* Link::default_instance_ = NULL;

Link* Link::New(::google::protobuf::Arena* arena) const {
  Link* n = new Link;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Link)
  target_pose_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string target_pose = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_pose()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target_pose().data(), this->target_pose().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.Link.target_pose"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Link)
  return false;
#undef DO_
}

void Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Link)
  // optional string target_pose = 1;
  if (this->target_pose().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_pose().data(), this->target_pose().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Link.target_pose");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->target_pose(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Link)
}

::google::protobuf::uint8* Link::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Link)
  // optional string target_pose = 1;
  if (this->target_pose().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_pose().data(), this->target_pose().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Link.target_pose");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target_pose(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Link)
  return target;
}

int Link::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Link)
  int total_size = 0;

  // optional string target_pose = 1;
  if (this->target_pose().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target_pose());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Link::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Link)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Link* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Link>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Link)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Link)
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Link)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.target_pose().size() > 0) {

    target_pose_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_pose_);
  }
}

void Link::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {

  return true;
}

void Link::Swap(Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Link::InternalSwap(Link* other) {
  target_pose_.Swap(&other->target_pose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Link_descriptor_;
  metadata.reflection = Link_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Link

// optional string target_pose = 1;
void Link::clear_target_pose() {
  target_pose_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Link::target_pose() const {
  // @@protoc_insertion_point(field_get:xviz.Link.target_pose)
  return target_pose_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Link::set_target_pose(const ::std::string& value) {
  
  target_pose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Link.target_pose)
}
 void Link::set_target_pose(const char* value) {
  
  target_pose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Link.target_pose)
}
 void Link::set_target_pose(const char* value, size_t size) {
  
  target_pose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Link.target_pose)
}
 ::std::string* Link::mutable_target_pose() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Link.target_pose)
  return target_pose_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Link::release_target_pose() {
  // @@protoc_insertion_point(field_release:xviz.Link.target_pose)
  
  return target_pose_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Link::set_allocated_target_pose(::std::string* target_pose) {
  if (target_pose != NULL) {
    
  } else {
    
  }
  target_pose_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_pose);
  // @@protoc_insertion_point(field_set_allocated:xviz.Link.target_pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

// @@protoc_insertion_point(global_scope)
