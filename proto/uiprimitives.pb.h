// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uiprimitives.proto

#ifndef PROTOBUF_uiprimitives_2eproto__INCLUDED
#define PROTOBUF_uiprimitives_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)

namespace xviz {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_uiprimitives_2eproto();
void protobuf_AssignDesc_uiprimitives_2eproto();
void protobuf_ShutdownFile_uiprimitives_2eproto();

class TreeTable;
class TreeTableColumn;
class TreeTableNode;

enum TreeTableColumn_ColumnType {
  TreeTableColumn_ColumnType_TREE_TABLE_COLUMN_COLUMN_TYPE_INVALID = 0,
  TreeTableColumn_ColumnType_INT32 = 1,
  TreeTableColumn_ColumnType_DOUBLE = 2,
  TreeTableColumn_ColumnType_STRING = 3,
  TreeTableColumn_ColumnType_BOOLEAN = 4,
  TreeTableColumn_ColumnType_TreeTableColumn_ColumnType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TreeTableColumn_ColumnType_TreeTableColumn_ColumnType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TreeTableColumn_ColumnType_IsValid(int value);
const TreeTableColumn_ColumnType TreeTableColumn_ColumnType_ColumnType_MIN = TreeTableColumn_ColumnType_TREE_TABLE_COLUMN_COLUMN_TYPE_INVALID;
const TreeTableColumn_ColumnType TreeTableColumn_ColumnType_ColumnType_MAX = TreeTableColumn_ColumnType_BOOLEAN;
const int TreeTableColumn_ColumnType_ColumnType_ARRAYSIZE = TreeTableColumn_ColumnType_ColumnType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TreeTableColumn_ColumnType_descriptor();
inline const ::std::string& TreeTableColumn_ColumnType_Name(TreeTableColumn_ColumnType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TreeTableColumn_ColumnType_descriptor(), value);
}
inline bool TreeTableColumn_ColumnType_Parse(
    const ::std::string& name, TreeTableColumn_ColumnType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TreeTableColumn_ColumnType>(
    TreeTableColumn_ColumnType_descriptor(), name, value);
}
// ===================================================================

class TreeTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.TreeTable) */ {
 public:
  TreeTable();
  virtual ~TreeTable();

  TreeTable(const TreeTable& from);

  inline TreeTable& operator=(const TreeTable& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeTable& default_instance();

  void Swap(TreeTable* other);

  // implements Message ----------------------------------------------

  inline TreeTable* New() const { return New(NULL); }

  TreeTable* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TreeTable& from);
  void MergeFrom(const TreeTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TreeTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xviz.TreeTableColumn columns = 1;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 1;
  const ::xviz::TreeTableColumn& columns(int index) const;
  ::xviz::TreeTableColumn* mutable_columns(int index);
  ::xviz::TreeTableColumn* add_columns();
  ::google::protobuf::RepeatedPtrField< ::xviz::TreeTableColumn >*
      mutable_columns();
  const ::google::protobuf::RepeatedPtrField< ::xviz::TreeTableColumn >&
      columns() const;

  // repeated .xviz.TreeTableNode nodes = 2;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 2;
  const ::xviz::TreeTableNode& nodes(int index) const;
  ::xviz::TreeTableNode* mutable_nodes(int index);
  ::xviz::TreeTableNode* add_nodes();
  ::google::protobuf::RepeatedPtrField< ::xviz::TreeTableNode >*
      mutable_nodes();
  const ::google::protobuf::RepeatedPtrField< ::xviz::TreeTableNode >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:xviz.TreeTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::xviz::TreeTableColumn > columns_;
  ::google::protobuf::RepeatedPtrField< ::xviz::TreeTableNode > nodes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_uiprimitives_2eproto();
  friend void protobuf_AssignDesc_uiprimitives_2eproto();
  friend void protobuf_ShutdownFile_uiprimitives_2eproto();

  void InitAsDefaultInstance();
  static TreeTable* default_instance_;
};
// -------------------------------------------------------------------

class TreeTableColumn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.TreeTableColumn) */ {
 public:
  TreeTableColumn();
  virtual ~TreeTableColumn();

  TreeTableColumn(const TreeTableColumn& from);

  inline TreeTableColumn& operator=(const TreeTableColumn& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeTableColumn& default_instance();

  void Swap(TreeTableColumn* other);

  // implements Message ----------------------------------------------

  inline TreeTableColumn* New() const { return New(NULL); }

  TreeTableColumn* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TreeTableColumn& from);
  void MergeFrom(const TreeTableColumn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TreeTableColumn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TreeTableColumn_ColumnType ColumnType;
  static const ColumnType TREE_TABLE_COLUMN_COLUMN_TYPE_INVALID =
    TreeTableColumn_ColumnType_TREE_TABLE_COLUMN_COLUMN_TYPE_INVALID;
  static const ColumnType INT32 =
    TreeTableColumn_ColumnType_INT32;
  static const ColumnType DOUBLE =
    TreeTableColumn_ColumnType_DOUBLE;
  static const ColumnType STRING =
    TreeTableColumn_ColumnType_STRING;
  static const ColumnType BOOLEAN =
    TreeTableColumn_ColumnType_BOOLEAN;
  static inline bool ColumnType_IsValid(int value) {
    return TreeTableColumn_ColumnType_IsValid(value);
  }
  static const ColumnType ColumnType_MIN =
    TreeTableColumn_ColumnType_ColumnType_MIN;
  static const ColumnType ColumnType_MAX =
    TreeTableColumn_ColumnType_ColumnType_MAX;
  static const int ColumnType_ARRAYSIZE =
    TreeTableColumn_ColumnType_ColumnType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ColumnType_descriptor() {
    return TreeTableColumn_ColumnType_descriptor();
  }
  static inline const ::std::string& ColumnType_Name(ColumnType value) {
    return TreeTableColumn_ColumnType_Name(value);
  }
  static inline bool ColumnType_Parse(const ::std::string& name,
      ColumnType* value) {
    return TreeTableColumn_ColumnType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string display_text = 1;
  void clear_display_text();
  static const int kDisplayTextFieldNumber = 1;
  const ::std::string& display_text() const;
  void set_display_text(const ::std::string& value);
  void set_display_text(const char* value);
  void set_display_text(const char* value, size_t size);
  ::std::string* mutable_display_text();
  ::std::string* release_display_text();
  void set_allocated_display_text(::std::string* display_text);

  // optional .xviz.TreeTableColumn.ColumnType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::xviz::TreeTableColumn_ColumnType type() const;
  void set_type(::xviz::TreeTableColumn_ColumnType value);

  // optional string unit = 3;
  void clear_unit();
  static const int kUnitFieldNumber = 3;
  const ::std::string& unit() const;
  void set_unit(const ::std::string& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  ::std::string* mutable_unit();
  ::std::string* release_unit();
  void set_allocated_unit(::std::string* unit);

  // @@protoc_insertion_point(class_scope:xviz.TreeTableColumn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr display_text_;
  ::google::protobuf::internal::ArenaStringPtr unit_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_uiprimitives_2eproto();
  friend void protobuf_AssignDesc_uiprimitives_2eproto();
  friend void protobuf_ShutdownFile_uiprimitives_2eproto();

  void InitAsDefaultInstance();
  static TreeTableColumn* default_instance_;
};
// -------------------------------------------------------------------

class TreeTableNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.TreeTableNode) */ {
 public:
  TreeTableNode();
  virtual ~TreeTableNode();

  TreeTableNode(const TreeTableNode& from);

  inline TreeTableNode& operator=(const TreeTableNode& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeTableNode& default_instance();

  void Swap(TreeTableNode* other);

  // implements Message ----------------------------------------------

  inline TreeTableNode* New() const { return New(NULL); }

  TreeTableNode* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TreeTableNode& from);
  void MergeFrom(const TreeTableNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TreeTableNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 parent = 2;
  void clear_parent();
  static const int kParentFieldNumber = 2;
  ::google::protobuf::int32 parent() const;
  void set_parent(::google::protobuf::int32 value);

  // repeated string column_values = 3;
  int column_values_size() const;
  void clear_column_values();
  static const int kColumnValuesFieldNumber = 3;
  const ::std::string& column_values(int index) const;
  ::std::string* mutable_column_values(int index);
  void set_column_values(int index, const ::std::string& value);
  void set_column_values(int index, const char* value);
  void set_column_values(int index, const char* value, size_t size);
  ::std::string* add_column_values();
  void add_column_values(const ::std::string& value);
  void add_column_values(const char* value);
  void add_column_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& column_values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_column_values();

  // @@protoc_insertion_point(class_scope:xviz.TreeTableNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_;
  ::google::protobuf::RepeatedPtrField< ::std::string> column_values_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_uiprimitives_2eproto();
  friend void protobuf_AssignDesc_uiprimitives_2eproto();
  friend void protobuf_ShutdownFile_uiprimitives_2eproto();

  void InitAsDefaultInstance();
  static TreeTableNode* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TreeTable

// repeated .xviz.TreeTableColumn columns = 1;
inline int TreeTable::columns_size() const {
  return columns_.size();
}
inline void TreeTable::clear_columns() {
  columns_.Clear();
}
inline const ::xviz::TreeTableColumn& TreeTable::columns(int index) const {
  // @@protoc_insertion_point(field_get:xviz.TreeTable.columns)
  return columns_.Get(index);
}
inline ::xviz::TreeTableColumn* TreeTable::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.TreeTable.columns)
  return columns_.Mutable(index);
}
inline ::xviz::TreeTableColumn* TreeTable::add_columns() {
  // @@protoc_insertion_point(field_add:xviz.TreeTable.columns)
  return columns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xviz::TreeTableColumn >*
TreeTable::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:xviz.TreeTable.columns)
  return &columns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xviz::TreeTableColumn >&
TreeTable::columns() const {
  // @@protoc_insertion_point(field_list:xviz.TreeTable.columns)
  return columns_;
}

// repeated .xviz.TreeTableNode nodes = 2;
inline int TreeTable::nodes_size() const {
  return nodes_.size();
}
inline void TreeTable::clear_nodes() {
  nodes_.Clear();
}
inline const ::xviz::TreeTableNode& TreeTable::nodes(int index) const {
  // @@protoc_insertion_point(field_get:xviz.TreeTable.nodes)
  return nodes_.Get(index);
}
inline ::xviz::TreeTableNode* TreeTable::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.TreeTable.nodes)
  return nodes_.Mutable(index);
}
inline ::xviz::TreeTableNode* TreeTable::add_nodes() {
  // @@protoc_insertion_point(field_add:xviz.TreeTable.nodes)
  return nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xviz::TreeTableNode >*
TreeTable::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:xviz.TreeTable.nodes)
  return &nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xviz::TreeTableNode >&
TreeTable::nodes() const {
  // @@protoc_insertion_point(field_list:xviz.TreeTable.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// TreeTableColumn

// optional string display_text = 1;
inline void TreeTableColumn::clear_display_text() {
  display_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TreeTableColumn::display_text() const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableColumn.display_text)
  return display_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TreeTableColumn::set_display_text(const ::std::string& value) {
  
  display_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.TreeTableColumn.display_text)
}
inline void TreeTableColumn::set_display_text(const char* value) {
  
  display_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.TreeTableColumn.display_text)
}
inline void TreeTableColumn::set_display_text(const char* value, size_t size) {
  
  display_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.TreeTableColumn.display_text)
}
inline ::std::string* TreeTableColumn::mutable_display_text() {
  
  // @@protoc_insertion_point(field_mutable:xviz.TreeTableColumn.display_text)
  return display_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TreeTableColumn::release_display_text() {
  // @@protoc_insertion_point(field_release:xviz.TreeTableColumn.display_text)
  
  return display_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TreeTableColumn::set_allocated_display_text(::std::string* display_text) {
  if (display_text != NULL) {
    
  } else {
    
  }
  display_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_text);
  // @@protoc_insertion_point(field_set_allocated:xviz.TreeTableColumn.display_text)
}

// optional .xviz.TreeTableColumn.ColumnType type = 2;
inline void TreeTableColumn::clear_type() {
  type_ = 0;
}
inline ::xviz::TreeTableColumn_ColumnType TreeTableColumn::type() const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableColumn.type)
  return static_cast< ::xviz::TreeTableColumn_ColumnType >(type_);
}
inline void TreeTableColumn::set_type(::xviz::TreeTableColumn_ColumnType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:xviz.TreeTableColumn.type)
}

// optional string unit = 3;
inline void TreeTableColumn::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TreeTableColumn::unit() const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableColumn.unit)
  return unit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TreeTableColumn::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.TreeTableColumn.unit)
}
inline void TreeTableColumn::set_unit(const char* value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.TreeTableColumn.unit)
}
inline void TreeTableColumn::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.TreeTableColumn.unit)
}
inline ::std::string* TreeTableColumn::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:xviz.TreeTableColumn.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TreeTableColumn::release_unit() {
  // @@protoc_insertion_point(field_release:xviz.TreeTableColumn.unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TreeTableColumn::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:xviz.TreeTableColumn.unit)
}

// -------------------------------------------------------------------

// TreeTableNode

// optional int32 id = 1;
inline void TreeTableNode::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 TreeTableNode::id() const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableNode.id)
  return id_;
}
inline void TreeTableNode::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:xviz.TreeTableNode.id)
}

// optional int32 parent = 2;
inline void TreeTableNode::clear_parent() {
  parent_ = 0;
}
inline ::google::protobuf::int32 TreeTableNode::parent() const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableNode.parent)
  return parent_;
}
inline void TreeTableNode::set_parent(::google::protobuf::int32 value) {
  
  parent_ = value;
  // @@protoc_insertion_point(field_set:xviz.TreeTableNode.parent)
}

// repeated string column_values = 3;
inline int TreeTableNode::column_values_size() const {
  return column_values_.size();
}
inline void TreeTableNode::clear_column_values() {
  column_values_.Clear();
}
inline const ::std::string& TreeTableNode::column_values(int index) const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableNode.column_values)
  return column_values_.Get(index);
}
inline ::std::string* TreeTableNode::mutable_column_values(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.TreeTableNode.column_values)
  return column_values_.Mutable(index);
}
inline void TreeTableNode::set_column_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.TreeTableNode.column_values)
  column_values_.Mutable(index)->assign(value);
}
inline void TreeTableNode::set_column_values(int index, const char* value) {
  column_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.TreeTableNode.column_values)
}
inline void TreeTableNode::set_column_values(int index, const char* value, size_t size) {
  column_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.TreeTableNode.column_values)
}
inline ::std::string* TreeTableNode::add_column_values() {
  // @@protoc_insertion_point(field_add_mutable:xviz.TreeTableNode.column_values)
  return column_values_.Add();
}
inline void TreeTableNode::add_column_values(const ::std::string& value) {
  column_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.TreeTableNode.column_values)
}
inline void TreeTableNode::add_column_values(const char* value) {
  column_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.TreeTableNode.column_values)
}
inline void TreeTableNode::add_column_values(const char* value, size_t size) {
  column_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.TreeTableNode.column_values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TreeTableNode::column_values() const {
  // @@protoc_insertion_point(field_list:xviz.TreeTableNode.column_values)
  return column_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TreeTableNode::mutable_column_values() {
  // @@protoc_insertion_point(field_mutable_list:xviz.TreeTableNode.column_values)
  return &column_values_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xviz::TreeTableColumn_ColumnType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::TreeTableColumn_ColumnType>() {
  return ::xviz::TreeTableColumn_ColumnType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_uiprimitives_2eproto__INCLUDED
