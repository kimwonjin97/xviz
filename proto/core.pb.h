// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#ifndef PROTOBUF_core_2eproto__INCLUDED
#define PROTOBUF_core_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "annotation.pb.h"
#include "options.pb.h"
#include "primitives.pb.h"
#include "uiprimitives.pb.h"
// @@protoc_insertion_point(includes)

namespace xviz {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_core_2eproto();
void protobuf_AssignDesc_core_2eproto();
void protobuf_ShutdownFile_core_2eproto();

class AnnotationState;
class FutureInstances;
class Link;
class MapOrigin;
class Pose;
class PrimitiveState;
class StreamSet;
class TimeSeriesState;
class UIPrimitiveState;
class Values;
class Variable;
class VariableBase;
class VariableState;

// ===================================================================

class StreamSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.StreamSet) */ {
 public:
  StreamSet();
  virtual ~StreamSet();

  StreamSet(const StreamSet& from);

  inline StreamSet& operator=(const StreamSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSet& default_instance();

  void Swap(StreamSet* other);

  // implements Message ----------------------------------------------

  inline StreamSet* New() const { return New(NULL); }

  StreamSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamSet& from);
  void MergeFrom(const StreamSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreamSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // map<string, .xviz.Pose> poses = 2;
  int poses_size() const;
  void clear_poses();
  static const int kPosesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::xviz::Pose >&
      poses() const;
  ::google::protobuf::Map< ::std::string, ::xviz::Pose >*
      mutable_poses();

  // map<string, .xviz.PrimitiveState> primitives = 3;
  int primitives_size() const;
  void clear_primitives();
  static const int kPrimitivesFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >&
      primitives() const;
  ::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >*
      mutable_primitives();

  // repeated .xviz.TimeSeriesState time_series = 4;
  int time_series_size() const;
  void clear_time_series();
  static const int kTimeSeriesFieldNumber = 4;
  const ::xviz::TimeSeriesState& time_series(int index) const;
  ::xviz::TimeSeriesState* mutable_time_series(int index);
  ::xviz::TimeSeriesState* add_time_series();
  ::google::protobuf::RepeatedPtrField< ::xviz::TimeSeriesState >*
      mutable_time_series();
  const ::google::protobuf::RepeatedPtrField< ::xviz::TimeSeriesState >&
      time_series() const;

  // map<string, .xviz.FutureInstances> future_instances = 6;
  int future_instances_size() const;
  void clear_future_instances();
  static const int kFutureInstancesFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >&
      future_instances() const;
  ::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >*
      mutable_future_instances();

  // map<string, .xviz.VariableState> variables = 7;
  int variables_size() const;
  void clear_variables();
  static const int kVariablesFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::xviz::VariableState >&
      variables() const;
  ::google::protobuf::Map< ::std::string, ::xviz::VariableState >*
      mutable_variables();

  // map<string, .xviz.AnnotationState> annotations = 8;
  int annotations_size() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >&
      annotations() const;
  ::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >*
      mutable_annotations();

  // map<string, .xviz.UIPrimitiveState> ui_primitives = 9;
  int ui_primitives_size() const;
  void clear_ui_primitives();
  static const int kUiPrimitivesFieldNumber = 9;
  const ::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >&
      ui_primitives() const;
  ::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >*
      mutable_ui_primitives();

  // repeated string no_data_streams = 10;
  int no_data_streams_size() const;
  void clear_no_data_streams();
  static const int kNoDataStreamsFieldNumber = 10;
  const ::std::string& no_data_streams(int index) const;
  ::std::string* mutable_no_data_streams(int index);
  void set_no_data_streams(int index, const ::std::string& value);
  void set_no_data_streams(int index, const char* value);
  void set_no_data_streams(int index, const char* value, size_t size);
  ::std::string* add_no_data_streams();
  void add_no_data_streams(const ::std::string& value);
  void add_no_data_streams(const char* value);
  void add_no_data_streams(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& no_data_streams() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_no_data_streams();

  // map<string, .xviz.Link> links = 11;
  int links_size() const;
  void clear_links();
  static const int kLinksFieldNumber = 11;
  const ::google::protobuf::Map< ::std::string, ::xviz::Link >&
      links() const;
  ::google::protobuf::Map< ::std::string, ::xviz::Link >*
      mutable_links();

  // @@protoc_insertion_point(class_scope:xviz.StreamSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double timestamp_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::xviz::Pose,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      StreamSet_PosesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::xviz::Pose,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > poses_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::xviz::PrimitiveState,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      StreamSet_PrimitivesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::xviz::PrimitiveState,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > primitives_;
  ::google::protobuf::RepeatedPtrField< ::xviz::TimeSeriesState > time_series_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::xviz::FutureInstances,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      StreamSet_FutureInstancesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::xviz::FutureInstances,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > future_instances_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::xviz::VariableState,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      StreamSet_VariablesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::xviz::VariableState,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > variables_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::xviz::AnnotationState,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      StreamSet_AnnotationsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::xviz::AnnotationState,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > annotations_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::xviz::UIPrimitiveState,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      StreamSet_UiPrimitivesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::xviz::UIPrimitiveState,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > ui_primitives_;
  ::google::protobuf::RepeatedPtrField< ::std::string> no_data_streams_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::xviz::Link,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      StreamSet_LinksEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::xviz::Link,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > links_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_core_2eproto();
  friend void protobuf_AssignDesc_core_2eproto();
  friend void protobuf_ShutdownFile_core_2eproto();

  void InitAsDefaultInstance();
  static StreamSet* default_instance_;
};
// -------------------------------------------------------------------

class Pose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose& default_instance();

  void Swap(Pose* other);

  // implements Message ----------------------------------------------

  inline Pose* New() const { return New(NULL); }

  Pose* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // optional .xviz.MapOrigin map_origin = 2;
  bool has_map_origin() const;
  void clear_map_origin();
  static const int kMapOriginFieldNumber = 2;
  const ::xviz::MapOrigin& map_origin() const;
  ::xviz::MapOrigin* mutable_map_origin();
  ::xviz::MapOrigin* release_map_origin();
  void set_allocated_map_origin(::xviz::MapOrigin* map_origin);

  // repeated double position = 3;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::google::protobuf::RepeatedField< double >&
      position() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_position();

  // repeated double orientation = 4;
  int orientation_size() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 4;
  double orientation(int index) const;
  void set_orientation(int index, double value);
  void add_orientation(double value);
  const ::google::protobuf::RepeatedField< double >&
      orientation() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_orientation();

  // @@protoc_insertion_point(class_scope:xviz.Pose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double timestamp_;
  ::xviz::MapOrigin* map_origin_;
  ::google::protobuf::RepeatedField< double > position_;
  mutable int _position_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > orientation_;
  mutable int _orientation_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_core_2eproto();
  friend void protobuf_AssignDesc_core_2eproto();
  friend void protobuf_ShutdownFile_core_2eproto();

  void InitAsDefaultInstance();
  static Pose* default_instance_;
};
// -------------------------------------------------------------------

class MapOrigin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.MapOrigin) */ {
 public:
  MapOrigin();
  virtual ~MapOrigin();

  MapOrigin(const MapOrigin& from);

  inline MapOrigin& operator=(const MapOrigin& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapOrigin& default_instance();

  void Swap(MapOrigin* other);

  // implements Message ----------------------------------------------

  inline MapOrigin* New() const { return New(NULL); }

  MapOrigin* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapOrigin& from);
  void MergeFrom(const MapOrigin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MapOrigin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double longitude = 1;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 1;
  double longitude() const;
  void set_longitude(double value);

  // optional double latitude = 2;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  double latitude() const;
  void set_latitude(double value);

  // optional double altitude = 3;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  double altitude() const;
  void set_altitude(double value);

  // @@protoc_insertion_point(class_scope:xviz.MapOrigin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double longitude_;
  double latitude_;
  double altitude_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_core_2eproto();
  friend void protobuf_AssignDesc_core_2eproto();
  friend void protobuf_ShutdownFile_core_2eproto();

  void InitAsDefaultInstance();
  static MapOrigin* default_instance_;
};
// -------------------------------------------------------------------

class PrimitiveState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.PrimitiveState) */ {
 public:
  PrimitiveState();
  virtual ~PrimitiveState();

  PrimitiveState(const PrimitiveState& from);

  inline PrimitiveState& operator=(const PrimitiveState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrimitiveState& default_instance();

  void Swap(PrimitiveState* other);

  // implements Message ----------------------------------------------

  inline PrimitiveState* New() const { return New(NULL); }

  PrimitiveState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrimitiveState& from);
  void MergeFrom(const PrimitiveState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrimitiveState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xviz.Polygon polygons = 1;
  int polygons_size() const;
  void clear_polygons();
  static const int kPolygonsFieldNumber = 1;
  const ::xviz::Polygon& polygons(int index) const;
  ::xviz::Polygon* mutable_polygons(int index);
  ::xviz::Polygon* add_polygons();
  ::google::protobuf::RepeatedPtrField< ::xviz::Polygon >*
      mutable_polygons();
  const ::google::protobuf::RepeatedPtrField< ::xviz::Polygon >&
      polygons() const;

  // repeated .xviz.Polyline polylines = 2;
  int polylines_size() const;
  void clear_polylines();
  static const int kPolylinesFieldNumber = 2;
  const ::xviz::Polyline& polylines(int index) const;
  ::xviz::Polyline* mutable_polylines(int index);
  ::xviz::Polyline* add_polylines();
  ::google::protobuf::RepeatedPtrField< ::xviz::Polyline >*
      mutable_polylines();
  const ::google::protobuf::RepeatedPtrField< ::xviz::Polyline >&
      polylines() const;

  // repeated .xviz.Text texts = 3;
  int texts_size() const;
  void clear_texts();
  static const int kTextsFieldNumber = 3;
  const ::xviz::Text& texts(int index) const;
  ::xviz::Text* mutable_texts(int index);
  ::xviz::Text* add_texts();
  ::google::protobuf::RepeatedPtrField< ::xviz::Text >*
      mutable_texts();
  const ::google::protobuf::RepeatedPtrField< ::xviz::Text >&
      texts() const;

  // repeated .xviz.Circle circles = 4;
  int circles_size() const;
  void clear_circles();
  static const int kCirclesFieldNumber = 4;
  const ::xviz::Circle& circles(int index) const;
  ::xviz::Circle* mutable_circles(int index);
  ::xviz::Circle* add_circles();
  ::google::protobuf::RepeatedPtrField< ::xviz::Circle >*
      mutable_circles();
  const ::google::protobuf::RepeatedPtrField< ::xviz::Circle >&
      circles() const;

  // repeated .xviz.Point points = 5;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 5;
  const ::xviz::Point& points(int index) const;
  ::xviz::Point* mutable_points(int index);
  ::xviz::Point* add_points();
  ::google::protobuf::RepeatedPtrField< ::xviz::Point >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::xviz::Point >&
      points() const;

  // repeated .xviz.Stadium stadiums = 6;
  int stadiums_size() const;
  void clear_stadiums();
  static const int kStadiumsFieldNumber = 6;
  const ::xviz::Stadium& stadiums(int index) const;
  ::xviz::Stadium* mutable_stadiums(int index);
  ::xviz::Stadium* add_stadiums();
  ::google::protobuf::RepeatedPtrField< ::xviz::Stadium >*
      mutable_stadiums();
  const ::google::protobuf::RepeatedPtrField< ::xviz::Stadium >&
      stadiums() const;

  // repeated .xviz.Image images = 7;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 7;
  const ::xviz::Image& images(int index) const;
  ::xviz::Image* mutable_images(int index);
  ::xviz::Image* add_images();
  ::google::protobuf::RepeatedPtrField< ::xviz::Image >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::xviz::Image >&
      images() const;

  // @@protoc_insertion_point(class_scope:xviz.PrimitiveState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::xviz::Polygon > polygons_;
  ::google::protobuf::RepeatedPtrField< ::xviz::Polyline > polylines_;
  ::google::protobuf::RepeatedPtrField< ::xviz::Text > texts_;
  ::google::protobuf::RepeatedPtrField< ::xviz::Circle > circles_;
  ::google::protobuf::RepeatedPtrField< ::xviz::Point > points_;
  ::google::protobuf::RepeatedPtrField< ::xviz::Stadium > stadiums_;
  ::google::protobuf::RepeatedPtrField< ::xviz::Image > images_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_core_2eproto();
  friend void protobuf_AssignDesc_core_2eproto();
  friend void protobuf_ShutdownFile_core_2eproto();

  void InitAsDefaultInstance();
  static PrimitiveState* default_instance_;
};
// -------------------------------------------------------------------

class UIPrimitiveState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.UIPrimitiveState) */ {
 public:
  UIPrimitiveState();
  virtual ~UIPrimitiveState();

  UIPrimitiveState(const UIPrimitiveState& from);

  inline UIPrimitiveState& operator=(const UIPrimitiveState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UIPrimitiveState& default_instance();

  void Swap(UIPrimitiveState* other);

  // implements Message ----------------------------------------------

  inline UIPrimitiveState* New() const { return New(NULL); }

  UIPrimitiveState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UIPrimitiveState& from);
  void MergeFrom(const UIPrimitiveState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UIPrimitiveState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .xviz.TreeTable treetable = 1;
  bool has_treetable() const;
  void clear_treetable();
  static const int kTreetableFieldNumber = 1;
  const ::xviz::TreeTable& treetable() const;
  ::xviz::TreeTable* mutable_treetable();
  ::xviz::TreeTable* release_treetable();
  void set_allocated_treetable(::xviz::TreeTable* treetable);

  // @@protoc_insertion_point(class_scope:xviz.UIPrimitiveState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::xviz::TreeTable* treetable_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_core_2eproto();
  friend void protobuf_AssignDesc_core_2eproto();
  friend void protobuf_ShutdownFile_core_2eproto();

  void InitAsDefaultInstance();
  static UIPrimitiveState* default_instance_;
};
// -------------------------------------------------------------------

class TimeSeriesState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.TimeSeriesState) */ {
 public:
  TimeSeriesState();
  virtual ~TimeSeriesState();

  TimeSeriesState(const TimeSeriesState& from);

  inline TimeSeriesState& operator=(const TimeSeriesState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeSeriesState& default_instance();

  void Swap(TimeSeriesState* other);

  // implements Message ----------------------------------------------

  inline TimeSeriesState* New() const { return New(NULL); }

  TimeSeriesState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeSeriesState& from);
  void MergeFrom(const TimeSeriesState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TimeSeriesState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // optional string object_id = 2;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // repeated string streams = 3;
  int streams_size() const;
  void clear_streams();
  static const int kStreamsFieldNumber = 3;
  const ::std::string& streams(int index) const;
  ::std::string* mutable_streams(int index);
  void set_streams(int index, const ::std::string& value);
  void set_streams(int index, const char* value);
  void set_streams(int index, const char* value, size_t size);
  ::std::string* add_streams();
  void add_streams(const ::std::string& value);
  void add_streams(const char* value);
  void add_streams(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& streams() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_streams();

  // optional .xviz.Values values = 4;
  bool has_values() const;
  void clear_values();
  static const int kValuesFieldNumber = 4;
  const ::xviz::Values& values() const;
  ::xviz::Values* mutable_values();
  ::xviz::Values* release_values();
  void set_allocated_values(::xviz::Values* values);

  // @@protoc_insertion_point(class_scope:xviz.TimeSeriesState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double timestamp_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> streams_;
  ::xviz::Values* values_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_core_2eproto();
  friend void protobuf_AssignDesc_core_2eproto();
  friend void protobuf_ShutdownFile_core_2eproto();

  void InitAsDefaultInstance();
  static TimeSeriesState* default_instance_;
};
// -------------------------------------------------------------------

class FutureInstances : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.FutureInstances) */ {
 public:
  FutureInstances();
  virtual ~FutureInstances();

  FutureInstances(const FutureInstances& from);

  inline FutureInstances& operator=(const FutureInstances& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureInstances& default_instance();

  void Swap(FutureInstances* other);

  // implements Message ----------------------------------------------

  inline FutureInstances* New() const { return New(NULL); }

  FutureInstances* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FutureInstances& from);
  void MergeFrom(const FutureInstances& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FutureInstances* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double timestamps = 1;
  int timestamps_size() const;
  void clear_timestamps();
  static const int kTimestampsFieldNumber = 1;
  double timestamps(int index) const;
  void set_timestamps(int index, double value);
  void add_timestamps(double value);
  const ::google::protobuf::RepeatedField< double >&
      timestamps() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_timestamps();

  // repeated .xviz.PrimitiveState primitives = 2;
  int primitives_size() const;
  void clear_primitives();
  static const int kPrimitivesFieldNumber = 2;
  const ::xviz::PrimitiveState& primitives(int index) const;
  ::xviz::PrimitiveState* mutable_primitives(int index);
  ::xviz::PrimitiveState* add_primitives();
  ::google::protobuf::RepeatedPtrField< ::xviz::PrimitiveState >*
      mutable_primitives();
  const ::google::protobuf::RepeatedPtrField< ::xviz::PrimitiveState >&
      primitives() const;

  // @@protoc_insertion_point(class_scope:xviz.FutureInstances)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< double > timestamps_;
  mutable int _timestamps_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::xviz::PrimitiveState > primitives_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_core_2eproto();
  friend void protobuf_AssignDesc_core_2eproto();
  friend void protobuf_ShutdownFile_core_2eproto();

  void InitAsDefaultInstance();
  static FutureInstances* default_instance_;
};
// -------------------------------------------------------------------

class VariableState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.VariableState) */ {
 public:
  VariableState();
  virtual ~VariableState();

  VariableState(const VariableState& from);

  inline VariableState& operator=(const VariableState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VariableState& default_instance();

  void Swap(VariableState* other);

  // implements Message ----------------------------------------------

  inline VariableState* New() const { return New(NULL); }

  VariableState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VariableState& from);
  void MergeFrom(const VariableState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VariableState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xviz.Variable variables = 1;
  int variables_size() const;
  void clear_variables();
  static const int kVariablesFieldNumber = 1;
  const ::xviz::Variable& variables(int index) const;
  ::xviz::Variable* mutable_variables(int index);
  ::xviz::Variable* add_variables();
  ::google::protobuf::RepeatedPtrField< ::xviz::Variable >*
      mutable_variables();
  const ::google::protobuf::RepeatedPtrField< ::xviz::Variable >&
      variables() const;

  // @@protoc_insertion_point(class_scope:xviz.VariableState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::xviz::Variable > variables_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_core_2eproto();
  friend void protobuf_AssignDesc_core_2eproto();
  friend void protobuf_ShutdownFile_core_2eproto();

  void InitAsDefaultInstance();
  static VariableState* default_instance_;
};
// -------------------------------------------------------------------

class AnnotationState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.AnnotationState) */ {
 public:
  AnnotationState();
  virtual ~AnnotationState();

  AnnotationState(const AnnotationState& from);

  inline AnnotationState& operator=(const AnnotationState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotationState& default_instance();

  void Swap(AnnotationState* other);

  // implements Message ----------------------------------------------

  inline AnnotationState* New() const { return New(NULL); }

  AnnotationState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnotationState& from);
  void MergeFrom(const AnnotationState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnnotationState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xviz.Visual visuals = 1;
  int visuals_size() const;
  void clear_visuals();
  static const int kVisualsFieldNumber = 1;
  const ::xviz::Visual& visuals(int index) const;
  ::xviz::Visual* mutable_visuals(int index);
  ::xviz::Visual* add_visuals();
  ::google::protobuf::RepeatedPtrField< ::xviz::Visual >*
      mutable_visuals();
  const ::google::protobuf::RepeatedPtrField< ::xviz::Visual >&
      visuals() const;

  // @@protoc_insertion_point(class_scope:xviz.AnnotationState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::xviz::Visual > visuals_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_core_2eproto();
  friend void protobuf_AssignDesc_core_2eproto();
  friend void protobuf_ShutdownFile_core_2eproto();

  void InitAsDefaultInstance();
  static AnnotationState* default_instance_;
};
// -------------------------------------------------------------------

class Variable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Variable) */ {
 public:
  Variable();
  virtual ~Variable();

  Variable(const Variable& from);

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Variable& default_instance();

  void Swap(Variable* other);

  // implements Message ----------------------------------------------

  inline Variable* New() const { return New(NULL); }

  Variable* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Variable& from);
  void MergeFrom(const Variable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Variable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .xviz.VariableBase base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::xviz::VariableBase& base() const;
  ::xviz::VariableBase* mutable_base();
  ::xviz::VariableBase* release_base();
  void set_allocated_base(::xviz::VariableBase* base);

  // optional .xviz.Values values = 2;
  bool has_values() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::xviz::Values& values() const;
  ::xviz::Values* mutable_values();
  ::xviz::Values* release_values();
  void set_allocated_values(::xviz::Values* values);

  // @@protoc_insertion_point(class_scope:xviz.Variable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::xviz::VariableBase* base_;
  ::xviz::Values* values_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_core_2eproto();
  friend void protobuf_AssignDesc_core_2eproto();
  friend void protobuf_ShutdownFile_core_2eproto();

  void InitAsDefaultInstance();
  static Variable* default_instance_;
};
// -------------------------------------------------------------------

class VariableBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.VariableBase) */ {
 public:
  VariableBase();
  virtual ~VariableBase();

  VariableBase(const VariableBase& from);

  inline VariableBase& operator=(const VariableBase& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VariableBase& default_instance();

  void Swap(VariableBase* other);

  // implements Message ----------------------------------------------

  inline VariableBase* New() const { return New(NULL); }

  VariableBase* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VariableBase& from);
  void MergeFrom(const VariableBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VariableBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // @@protoc_insertion_point(class_scope:xviz.VariableBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_core_2eproto();
  friend void protobuf_AssignDesc_core_2eproto();
  friend void protobuf_ShutdownFile_core_2eproto();

  void InitAsDefaultInstance();
  static VariableBase* default_instance_;
};
// -------------------------------------------------------------------

class Values : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Values) */ {
 public:
  Values();
  virtual ~Values();

  Values(const Values& from);

  inline Values& operator=(const Values& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Values& default_instance();

  void Swap(Values* other);

  // implements Message ----------------------------------------------

  inline Values* New() const { return New(NULL); }

  Values* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Values& from);
  void MergeFrom(const Values& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Values* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double doubles = 2;
  int doubles_size() const;
  void clear_doubles();
  static const int kDoublesFieldNumber = 2;
  double doubles(int index) const;
  void set_doubles(int index, double value);
  void add_doubles(double value);
  const ::google::protobuf::RepeatedField< double >&
      doubles() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_doubles();

  // repeated int32 int32s = 3;
  int int32s_size() const;
  void clear_int32s();
  static const int kInt32SFieldNumber = 3;
  ::google::protobuf::int32 int32s(int index) const;
  void set_int32s(int index, ::google::protobuf::int32 value);
  void add_int32s(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int32s() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int32s();

  // repeated bool bools = 4;
  int bools_size() const;
  void clear_bools();
  static const int kBoolsFieldNumber = 4;
  bool bools(int index) const;
  void set_bools(int index, bool value);
  void add_bools(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      bools() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_bools();

  // repeated string strings = 5;
  int strings_size() const;
  void clear_strings();
  static const int kStringsFieldNumber = 5;
  const ::std::string& strings(int index) const;
  ::std::string* mutable_strings(int index);
  void set_strings(int index, const ::std::string& value);
  void set_strings(int index, const char* value);
  void set_strings(int index, const char* value, size_t size);
  ::std::string* add_strings();
  void add_strings(const ::std::string& value);
  void add_strings(const char* value);
  void add_strings(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& strings() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strings();

  // @@protoc_insertion_point(class_scope:xviz.Values)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< double > doubles_;
  mutable int _doubles_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int32s_;
  mutable int _int32s_cached_byte_size_;
  ::google::protobuf::RepeatedField< bool > bools_;
  mutable int _bools_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strings_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_core_2eproto();
  friend void protobuf_AssignDesc_core_2eproto();
  friend void protobuf_ShutdownFile_core_2eproto();

  void InitAsDefaultInstance();
  static Values* default_instance_;
};
// -------------------------------------------------------------------

class Link : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Link) */ {
 public:
  Link();
  virtual ~Link();

  Link(const Link& from);

  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Link& default_instance();

  void Swap(Link* other);

  // implements Message ----------------------------------------------

  inline Link* New() const { return New(NULL); }

  Link* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Link* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string target_pose = 1;
  void clear_target_pose();
  static const int kTargetPoseFieldNumber = 1;
  const ::std::string& target_pose() const;
  void set_target_pose(const ::std::string& value);
  void set_target_pose(const char* value);
  void set_target_pose(const char* value, size_t size);
  ::std::string* mutable_target_pose();
  ::std::string* release_target_pose();
  void set_allocated_target_pose(::std::string* target_pose);

  // @@protoc_insertion_point(class_scope:xviz.Link)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr target_pose_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_core_2eproto();
  friend void protobuf_AssignDesc_core_2eproto();
  friend void protobuf_ShutdownFile_core_2eproto();

  void InitAsDefaultInstance();
  static Link* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamSet

// optional double timestamp = 1;
inline void StreamSet::clear_timestamp() {
  timestamp_ = 0;
}
inline double StreamSet::timestamp() const {
  // @@protoc_insertion_point(field_get:xviz.StreamSet.timestamp)
  return timestamp_;
}
inline void StreamSet::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xviz.StreamSet.timestamp)
}

// map<string, .xviz.Pose> poses = 2;
inline int StreamSet::poses_size() const {
  return poses_.size();
}
inline void StreamSet::clear_poses() {
  poses_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::xviz::Pose >&
StreamSet::poses() const {
  // @@protoc_insertion_point(field_map:xviz.StreamSet.poses)
  return poses_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::xviz::Pose >*
StreamSet::mutable_poses() {
  // @@protoc_insertion_point(field_mutable_map:xviz.StreamSet.poses)
  return poses_.MutableMap();
}

// map<string, .xviz.PrimitiveState> primitives = 3;
inline int StreamSet::primitives_size() const {
  return primitives_.size();
}
inline void StreamSet::clear_primitives() {
  primitives_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >&
StreamSet::primitives() const {
  // @@protoc_insertion_point(field_map:xviz.StreamSet.primitives)
  return primitives_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >*
StreamSet::mutable_primitives() {
  // @@protoc_insertion_point(field_mutable_map:xviz.StreamSet.primitives)
  return primitives_.MutableMap();
}

// repeated .xviz.TimeSeriesState time_series = 4;
inline int StreamSet::time_series_size() const {
  return time_series_.size();
}
inline void StreamSet::clear_time_series() {
  time_series_.Clear();
}
inline const ::xviz::TimeSeriesState& StreamSet::time_series(int index) const {
  // @@protoc_insertion_point(field_get:xviz.StreamSet.time_series)
  return time_series_.Get(index);
}
inline ::xviz::TimeSeriesState* StreamSet::mutable_time_series(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.StreamSet.time_series)
  return time_series_.Mutable(index);
}
inline ::xviz::TimeSeriesState* StreamSet::add_time_series() {
  // @@protoc_insertion_point(field_add:xviz.StreamSet.time_series)
  return time_series_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xviz::TimeSeriesState >*
StreamSet::mutable_time_series() {
  // @@protoc_insertion_point(field_mutable_list:xviz.StreamSet.time_series)
  return &time_series_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xviz::TimeSeriesState >&
StreamSet::time_series() const {
  // @@protoc_insertion_point(field_list:xviz.StreamSet.time_series)
  return time_series_;
}

// map<string, .xviz.FutureInstances> future_instances = 6;
inline int StreamSet::future_instances_size() const {
  return future_instances_.size();
}
inline void StreamSet::clear_future_instances() {
  future_instances_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >&
StreamSet::future_instances() const {
  // @@protoc_insertion_point(field_map:xviz.StreamSet.future_instances)
  return future_instances_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >*
StreamSet::mutable_future_instances() {
  // @@protoc_insertion_point(field_mutable_map:xviz.StreamSet.future_instances)
  return future_instances_.MutableMap();
}

// map<string, .xviz.VariableState> variables = 7;
inline int StreamSet::variables_size() const {
  return variables_.size();
}
inline void StreamSet::clear_variables() {
  variables_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::xviz::VariableState >&
StreamSet::variables() const {
  // @@protoc_insertion_point(field_map:xviz.StreamSet.variables)
  return variables_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::xviz::VariableState >*
StreamSet::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_map:xviz.StreamSet.variables)
  return variables_.MutableMap();
}

// map<string, .xviz.AnnotationState> annotations = 8;
inline int StreamSet::annotations_size() const {
  return annotations_.size();
}
inline void StreamSet::clear_annotations() {
  annotations_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >&
StreamSet::annotations() const {
  // @@protoc_insertion_point(field_map:xviz.StreamSet.annotations)
  return annotations_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >*
StreamSet::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:xviz.StreamSet.annotations)
  return annotations_.MutableMap();
}

// map<string, .xviz.UIPrimitiveState> ui_primitives = 9;
inline int StreamSet::ui_primitives_size() const {
  return ui_primitives_.size();
}
inline void StreamSet::clear_ui_primitives() {
  ui_primitives_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >&
StreamSet::ui_primitives() const {
  // @@protoc_insertion_point(field_map:xviz.StreamSet.ui_primitives)
  return ui_primitives_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >*
StreamSet::mutable_ui_primitives() {
  // @@protoc_insertion_point(field_mutable_map:xviz.StreamSet.ui_primitives)
  return ui_primitives_.MutableMap();
}

// repeated string no_data_streams = 10;
inline int StreamSet::no_data_streams_size() const {
  return no_data_streams_.size();
}
inline void StreamSet::clear_no_data_streams() {
  no_data_streams_.Clear();
}
inline const ::std::string& StreamSet::no_data_streams(int index) const {
  // @@protoc_insertion_point(field_get:xviz.StreamSet.no_data_streams)
  return no_data_streams_.Get(index);
}
inline ::std::string* StreamSet::mutable_no_data_streams(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.StreamSet.no_data_streams)
  return no_data_streams_.Mutable(index);
}
inline void StreamSet::set_no_data_streams(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.StreamSet.no_data_streams)
  no_data_streams_.Mutable(index)->assign(value);
}
inline void StreamSet::set_no_data_streams(int index, const char* value) {
  no_data_streams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.StreamSet.no_data_streams)
}
inline void StreamSet::set_no_data_streams(int index, const char* value, size_t size) {
  no_data_streams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.StreamSet.no_data_streams)
}
inline ::std::string* StreamSet::add_no_data_streams() {
  // @@protoc_insertion_point(field_add_mutable:xviz.StreamSet.no_data_streams)
  return no_data_streams_.Add();
}
inline void StreamSet::add_no_data_streams(const ::std::string& value) {
  no_data_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.StreamSet.no_data_streams)
}
inline void StreamSet::add_no_data_streams(const char* value) {
  no_data_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.StreamSet.no_data_streams)
}
inline void StreamSet::add_no_data_streams(const char* value, size_t size) {
  no_data_streams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.StreamSet.no_data_streams)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StreamSet::no_data_streams() const {
  // @@protoc_insertion_point(field_list:xviz.StreamSet.no_data_streams)
  return no_data_streams_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StreamSet::mutable_no_data_streams() {
  // @@protoc_insertion_point(field_mutable_list:xviz.StreamSet.no_data_streams)
  return &no_data_streams_;
}

// map<string, .xviz.Link> links = 11;
inline int StreamSet::links_size() const {
  return links_.size();
}
inline void StreamSet::clear_links() {
  links_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::xviz::Link >&
StreamSet::links() const {
  // @@protoc_insertion_point(field_map:xviz.StreamSet.links)
  return links_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::xviz::Link >*
StreamSet::mutable_links() {
  // @@protoc_insertion_point(field_mutable_map:xviz.StreamSet.links)
  return links_.MutableMap();
}

// -------------------------------------------------------------------

// Pose

// optional double timestamp = 1;
inline void Pose::clear_timestamp() {
  timestamp_ = 0;
}
inline double Pose::timestamp() const {
  // @@protoc_insertion_point(field_get:xviz.Pose.timestamp)
  return timestamp_;
}
inline void Pose::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xviz.Pose.timestamp)
}

// optional .xviz.MapOrigin map_origin = 2;
inline bool Pose::has_map_origin() const {
  return !_is_default_instance_ && map_origin_ != NULL;
}
inline void Pose::clear_map_origin() {
  if (GetArenaNoVirtual() == NULL && map_origin_ != NULL) delete map_origin_;
  map_origin_ = NULL;
}
inline const ::xviz::MapOrigin& Pose::map_origin() const {
  // @@protoc_insertion_point(field_get:xviz.Pose.map_origin)
  return map_origin_ != NULL ? *map_origin_ : *default_instance_->map_origin_;
}
inline ::xviz::MapOrigin* Pose::mutable_map_origin() {
  
  if (map_origin_ == NULL) {
    map_origin_ = new ::xviz::MapOrigin;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Pose.map_origin)
  return map_origin_;
}
inline ::xviz::MapOrigin* Pose::release_map_origin() {
  // @@protoc_insertion_point(field_release:xviz.Pose.map_origin)
  
  ::xviz::MapOrigin* temp = map_origin_;
  map_origin_ = NULL;
  return temp;
}
inline void Pose::set_allocated_map_origin(::xviz::MapOrigin* map_origin) {
  delete map_origin_;
  map_origin_ = map_origin;
  if (map_origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Pose.map_origin)
}

// repeated double position = 3;
inline int Pose::position_size() const {
  return position_.size();
}
inline void Pose::clear_position() {
  position_.Clear();
}
inline double Pose::position(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Pose.position)
  return position_.Get(index);
}
inline void Pose::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Pose.position)
}
inline void Pose::add_position(double value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Pose.position)
}
inline const ::google::protobuf::RepeatedField< double >&
Pose::position() const {
  // @@protoc_insertion_point(field_list:xviz.Pose.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< double >*
Pose::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Pose.position)
  return &position_;
}

// repeated double orientation = 4;
inline int Pose::orientation_size() const {
  return orientation_.size();
}
inline void Pose::clear_orientation() {
  orientation_.Clear();
}
inline double Pose::orientation(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Pose.orientation)
  return orientation_.Get(index);
}
inline void Pose::set_orientation(int index, double value) {
  orientation_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Pose.orientation)
}
inline void Pose::add_orientation(double value) {
  orientation_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Pose.orientation)
}
inline const ::google::protobuf::RepeatedField< double >&
Pose::orientation() const {
  // @@protoc_insertion_point(field_list:xviz.Pose.orientation)
  return orientation_;
}
inline ::google::protobuf::RepeatedField< double >*
Pose::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Pose.orientation)
  return &orientation_;
}

// -------------------------------------------------------------------

// MapOrigin

// optional double longitude = 1;
inline void MapOrigin::clear_longitude() {
  longitude_ = 0;
}
inline double MapOrigin::longitude() const {
  // @@protoc_insertion_point(field_get:xviz.MapOrigin.longitude)
  return longitude_;
}
inline void MapOrigin::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:xviz.MapOrigin.longitude)
}

// optional double latitude = 2;
inline void MapOrigin::clear_latitude() {
  latitude_ = 0;
}
inline double MapOrigin::latitude() const {
  // @@protoc_insertion_point(field_get:xviz.MapOrigin.latitude)
  return latitude_;
}
inline void MapOrigin::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:xviz.MapOrigin.latitude)
}

// optional double altitude = 3;
inline void MapOrigin::clear_altitude() {
  altitude_ = 0;
}
inline double MapOrigin::altitude() const {
  // @@protoc_insertion_point(field_get:xviz.MapOrigin.altitude)
  return altitude_;
}
inline void MapOrigin::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:xviz.MapOrigin.altitude)
}

// -------------------------------------------------------------------

// PrimitiveState

// repeated .xviz.Polygon polygons = 1;
inline int PrimitiveState::polygons_size() const {
  return polygons_.size();
}
inline void PrimitiveState::clear_polygons() {
  polygons_.Clear();
}
inline const ::xviz::Polygon& PrimitiveState::polygons(int index) const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveState.polygons)
  return polygons_.Get(index);
}
inline ::xviz::Polygon* PrimitiveState::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveState.polygons)
  return polygons_.Mutable(index);
}
inline ::xviz::Polygon* PrimitiveState::add_polygons() {
  // @@protoc_insertion_point(field_add:xviz.PrimitiveState.polygons)
  return polygons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xviz::Polygon >*
PrimitiveState::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:xviz.PrimitiveState.polygons)
  return &polygons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xviz::Polygon >&
PrimitiveState::polygons() const {
  // @@protoc_insertion_point(field_list:xviz.PrimitiveState.polygons)
  return polygons_;
}

// repeated .xviz.Polyline polylines = 2;
inline int PrimitiveState::polylines_size() const {
  return polylines_.size();
}
inline void PrimitiveState::clear_polylines() {
  polylines_.Clear();
}
inline const ::xviz::Polyline& PrimitiveState::polylines(int index) const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveState.polylines)
  return polylines_.Get(index);
}
inline ::xviz::Polyline* PrimitiveState::mutable_polylines(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveState.polylines)
  return polylines_.Mutable(index);
}
inline ::xviz::Polyline* PrimitiveState::add_polylines() {
  // @@protoc_insertion_point(field_add:xviz.PrimitiveState.polylines)
  return polylines_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xviz::Polyline >*
PrimitiveState::mutable_polylines() {
  // @@protoc_insertion_point(field_mutable_list:xviz.PrimitiveState.polylines)
  return &polylines_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xviz::Polyline >&
PrimitiveState::polylines() const {
  // @@protoc_insertion_point(field_list:xviz.PrimitiveState.polylines)
  return polylines_;
}

// repeated .xviz.Text texts = 3;
inline int PrimitiveState::texts_size() const {
  return texts_.size();
}
inline void PrimitiveState::clear_texts() {
  texts_.Clear();
}
inline const ::xviz::Text& PrimitiveState::texts(int index) const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveState.texts)
  return texts_.Get(index);
}
inline ::xviz::Text* PrimitiveState::mutable_texts(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveState.texts)
  return texts_.Mutable(index);
}
inline ::xviz::Text* PrimitiveState::add_texts() {
  // @@protoc_insertion_point(field_add:xviz.PrimitiveState.texts)
  return texts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xviz::Text >*
PrimitiveState::mutable_texts() {
  // @@protoc_insertion_point(field_mutable_list:xviz.PrimitiveState.texts)
  return &texts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xviz::Text >&
PrimitiveState::texts() const {
  // @@protoc_insertion_point(field_list:xviz.PrimitiveState.texts)
  return texts_;
}

// repeated .xviz.Circle circles = 4;
inline int PrimitiveState::circles_size() const {
  return circles_.size();
}
inline void PrimitiveState::clear_circles() {
  circles_.Clear();
}
inline const ::xviz::Circle& PrimitiveState::circles(int index) const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveState.circles)
  return circles_.Get(index);
}
inline ::xviz::Circle* PrimitiveState::mutable_circles(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveState.circles)
  return circles_.Mutable(index);
}
inline ::xviz::Circle* PrimitiveState::add_circles() {
  // @@protoc_insertion_point(field_add:xviz.PrimitiveState.circles)
  return circles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xviz::Circle >*
PrimitiveState::mutable_circles() {
  // @@protoc_insertion_point(field_mutable_list:xviz.PrimitiveState.circles)
  return &circles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xviz::Circle >&
PrimitiveState::circles() const {
  // @@protoc_insertion_point(field_list:xviz.PrimitiveState.circles)
  return circles_;
}

// repeated .xviz.Point points = 5;
inline int PrimitiveState::points_size() const {
  return points_.size();
}
inline void PrimitiveState::clear_points() {
  points_.Clear();
}
inline const ::xviz::Point& PrimitiveState::points(int index) const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveState.points)
  return points_.Get(index);
}
inline ::xviz::Point* PrimitiveState::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveState.points)
  return points_.Mutable(index);
}
inline ::xviz::Point* PrimitiveState::add_points() {
  // @@protoc_insertion_point(field_add:xviz.PrimitiveState.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xviz::Point >*
PrimitiveState::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:xviz.PrimitiveState.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xviz::Point >&
PrimitiveState::points() const {
  // @@protoc_insertion_point(field_list:xviz.PrimitiveState.points)
  return points_;
}

// repeated .xviz.Stadium stadiums = 6;
inline int PrimitiveState::stadiums_size() const {
  return stadiums_.size();
}
inline void PrimitiveState::clear_stadiums() {
  stadiums_.Clear();
}
inline const ::xviz::Stadium& PrimitiveState::stadiums(int index) const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveState.stadiums)
  return stadiums_.Get(index);
}
inline ::xviz::Stadium* PrimitiveState::mutable_stadiums(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveState.stadiums)
  return stadiums_.Mutable(index);
}
inline ::xviz::Stadium* PrimitiveState::add_stadiums() {
  // @@protoc_insertion_point(field_add:xviz.PrimitiveState.stadiums)
  return stadiums_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xviz::Stadium >*
PrimitiveState::mutable_stadiums() {
  // @@protoc_insertion_point(field_mutable_list:xviz.PrimitiveState.stadiums)
  return &stadiums_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xviz::Stadium >&
PrimitiveState::stadiums() const {
  // @@protoc_insertion_point(field_list:xviz.PrimitiveState.stadiums)
  return stadiums_;
}

// repeated .xviz.Image images = 7;
inline int PrimitiveState::images_size() const {
  return images_.size();
}
inline void PrimitiveState::clear_images() {
  images_.Clear();
}
inline const ::xviz::Image& PrimitiveState::images(int index) const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveState.images)
  return images_.Get(index);
}
inline ::xviz::Image* PrimitiveState::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveState.images)
  return images_.Mutable(index);
}
inline ::xviz::Image* PrimitiveState::add_images() {
  // @@protoc_insertion_point(field_add:xviz.PrimitiveState.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xviz::Image >*
PrimitiveState::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:xviz.PrimitiveState.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xviz::Image >&
PrimitiveState::images() const {
  // @@protoc_insertion_point(field_list:xviz.PrimitiveState.images)
  return images_;
}

// -------------------------------------------------------------------

// UIPrimitiveState

// optional .xviz.TreeTable treetable = 1;
inline bool UIPrimitiveState::has_treetable() const {
  return !_is_default_instance_ && treetable_ != NULL;
}
inline void UIPrimitiveState::clear_treetable() {
  if (GetArenaNoVirtual() == NULL && treetable_ != NULL) delete treetable_;
  treetable_ = NULL;
}
inline const ::xviz::TreeTable& UIPrimitiveState::treetable() const {
  // @@protoc_insertion_point(field_get:xviz.UIPrimitiveState.treetable)
  return treetable_ != NULL ? *treetable_ : *default_instance_->treetable_;
}
inline ::xviz::TreeTable* UIPrimitiveState::mutable_treetable() {
  
  if (treetable_ == NULL) {
    treetable_ = new ::xviz::TreeTable;
  }
  // @@protoc_insertion_point(field_mutable:xviz.UIPrimitiveState.treetable)
  return treetable_;
}
inline ::xviz::TreeTable* UIPrimitiveState::release_treetable() {
  // @@protoc_insertion_point(field_release:xviz.UIPrimitiveState.treetable)
  
  ::xviz::TreeTable* temp = treetable_;
  treetable_ = NULL;
  return temp;
}
inline void UIPrimitiveState::set_allocated_treetable(::xviz::TreeTable* treetable) {
  delete treetable_;
  treetable_ = treetable;
  if (treetable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.UIPrimitiveState.treetable)
}

// -------------------------------------------------------------------

// TimeSeriesState

// optional double timestamp = 1;
inline void TimeSeriesState::clear_timestamp() {
  timestamp_ = 0;
}
inline double TimeSeriesState::timestamp() const {
  // @@protoc_insertion_point(field_get:xviz.TimeSeriesState.timestamp)
  return timestamp_;
}
inline void TimeSeriesState::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xviz.TimeSeriesState.timestamp)
}

// optional string object_id = 2;
inline void TimeSeriesState::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TimeSeriesState::object_id() const {
  // @@protoc_insertion_point(field_get:xviz.TimeSeriesState.object_id)
  return object_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimeSeriesState::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.TimeSeriesState.object_id)
}
inline void TimeSeriesState::set_object_id(const char* value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.TimeSeriesState.object_id)
}
inline void TimeSeriesState::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.TimeSeriesState.object_id)
}
inline ::std::string* TimeSeriesState::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:xviz.TimeSeriesState.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TimeSeriesState::release_object_id() {
  // @@protoc_insertion_point(field_release:xviz.TimeSeriesState.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimeSeriesState::set_allocated_object_id(::std::string* object_id) {
  if (object_id != NULL) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:xviz.TimeSeriesState.object_id)
}

// repeated string streams = 3;
inline int TimeSeriesState::streams_size() const {
  return streams_.size();
}
inline void TimeSeriesState::clear_streams() {
  streams_.Clear();
}
inline const ::std::string& TimeSeriesState::streams(int index) const {
  // @@protoc_insertion_point(field_get:xviz.TimeSeriesState.streams)
  return streams_.Get(index);
}
inline ::std::string* TimeSeriesState::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.TimeSeriesState.streams)
  return streams_.Mutable(index);
}
inline void TimeSeriesState::set_streams(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.TimeSeriesState.streams)
  streams_.Mutable(index)->assign(value);
}
inline void TimeSeriesState::set_streams(int index, const char* value) {
  streams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.TimeSeriesState.streams)
}
inline void TimeSeriesState::set_streams(int index, const char* value, size_t size) {
  streams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.TimeSeriesState.streams)
}
inline ::std::string* TimeSeriesState::add_streams() {
  // @@protoc_insertion_point(field_add_mutable:xviz.TimeSeriesState.streams)
  return streams_.Add();
}
inline void TimeSeriesState::add_streams(const ::std::string& value) {
  streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.TimeSeriesState.streams)
}
inline void TimeSeriesState::add_streams(const char* value) {
  streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.TimeSeriesState.streams)
}
inline void TimeSeriesState::add_streams(const char* value, size_t size) {
  streams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.TimeSeriesState.streams)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TimeSeriesState::streams() const {
  // @@protoc_insertion_point(field_list:xviz.TimeSeriesState.streams)
  return streams_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TimeSeriesState::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:xviz.TimeSeriesState.streams)
  return &streams_;
}

// optional .xviz.Values values = 4;
inline bool TimeSeriesState::has_values() const {
  return !_is_default_instance_ && values_ != NULL;
}
inline void TimeSeriesState::clear_values() {
  if (GetArenaNoVirtual() == NULL && values_ != NULL) delete values_;
  values_ = NULL;
}
inline const ::xviz::Values& TimeSeriesState::values() const {
  // @@protoc_insertion_point(field_get:xviz.TimeSeriesState.values)
  return values_ != NULL ? *values_ : *default_instance_->values_;
}
inline ::xviz::Values* TimeSeriesState::mutable_values() {
  
  if (values_ == NULL) {
    values_ = new ::xviz::Values;
  }
  // @@protoc_insertion_point(field_mutable:xviz.TimeSeriesState.values)
  return values_;
}
inline ::xviz::Values* TimeSeriesState::release_values() {
  // @@protoc_insertion_point(field_release:xviz.TimeSeriesState.values)
  
  ::xviz::Values* temp = values_;
  values_ = NULL;
  return temp;
}
inline void TimeSeriesState::set_allocated_values(::xviz::Values* values) {
  delete values_;
  values_ = values;
  if (values) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.TimeSeriesState.values)
}

// -------------------------------------------------------------------

// FutureInstances

// repeated double timestamps = 1;
inline int FutureInstances::timestamps_size() const {
  return timestamps_.size();
}
inline void FutureInstances::clear_timestamps() {
  timestamps_.Clear();
}
inline double FutureInstances::timestamps(int index) const {
  // @@protoc_insertion_point(field_get:xviz.FutureInstances.timestamps)
  return timestamps_.Get(index);
}
inline void FutureInstances::set_timestamps(int index, double value) {
  timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.FutureInstances.timestamps)
}
inline void FutureInstances::add_timestamps(double value) {
  timestamps_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.FutureInstances.timestamps)
}
inline const ::google::protobuf::RepeatedField< double >&
FutureInstances::timestamps() const {
  // @@protoc_insertion_point(field_list:xviz.FutureInstances.timestamps)
  return timestamps_;
}
inline ::google::protobuf::RepeatedField< double >*
FutureInstances::mutable_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:xviz.FutureInstances.timestamps)
  return &timestamps_;
}

// repeated .xviz.PrimitiveState primitives = 2;
inline int FutureInstances::primitives_size() const {
  return primitives_.size();
}
inline void FutureInstances::clear_primitives() {
  primitives_.Clear();
}
inline const ::xviz::PrimitiveState& FutureInstances::primitives(int index) const {
  // @@protoc_insertion_point(field_get:xviz.FutureInstances.primitives)
  return primitives_.Get(index);
}
inline ::xviz::PrimitiveState* FutureInstances::mutable_primitives(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.FutureInstances.primitives)
  return primitives_.Mutable(index);
}
inline ::xviz::PrimitiveState* FutureInstances::add_primitives() {
  // @@protoc_insertion_point(field_add:xviz.FutureInstances.primitives)
  return primitives_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xviz::PrimitiveState >*
FutureInstances::mutable_primitives() {
  // @@protoc_insertion_point(field_mutable_list:xviz.FutureInstances.primitives)
  return &primitives_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xviz::PrimitiveState >&
FutureInstances::primitives() const {
  // @@protoc_insertion_point(field_list:xviz.FutureInstances.primitives)
  return primitives_;
}

// -------------------------------------------------------------------

// VariableState

// repeated .xviz.Variable variables = 1;
inline int VariableState::variables_size() const {
  return variables_.size();
}
inline void VariableState::clear_variables() {
  variables_.Clear();
}
inline const ::xviz::Variable& VariableState::variables(int index) const {
  // @@protoc_insertion_point(field_get:xviz.VariableState.variables)
  return variables_.Get(index);
}
inline ::xviz::Variable* VariableState::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.VariableState.variables)
  return variables_.Mutable(index);
}
inline ::xviz::Variable* VariableState::add_variables() {
  // @@protoc_insertion_point(field_add:xviz.VariableState.variables)
  return variables_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xviz::Variable >*
VariableState::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:xviz.VariableState.variables)
  return &variables_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xviz::Variable >&
VariableState::variables() const {
  // @@protoc_insertion_point(field_list:xviz.VariableState.variables)
  return variables_;
}

// -------------------------------------------------------------------

// AnnotationState

// repeated .xviz.Visual visuals = 1;
inline int AnnotationState::visuals_size() const {
  return visuals_.size();
}
inline void AnnotationState::clear_visuals() {
  visuals_.Clear();
}
inline const ::xviz::Visual& AnnotationState::visuals(int index) const {
  // @@protoc_insertion_point(field_get:xviz.AnnotationState.visuals)
  return visuals_.Get(index);
}
inline ::xviz::Visual* AnnotationState::mutable_visuals(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.AnnotationState.visuals)
  return visuals_.Mutable(index);
}
inline ::xviz::Visual* AnnotationState::add_visuals() {
  // @@protoc_insertion_point(field_add:xviz.AnnotationState.visuals)
  return visuals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xviz::Visual >*
AnnotationState::mutable_visuals() {
  // @@protoc_insertion_point(field_mutable_list:xviz.AnnotationState.visuals)
  return &visuals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xviz::Visual >&
AnnotationState::visuals() const {
  // @@protoc_insertion_point(field_list:xviz.AnnotationState.visuals)
  return visuals_;
}

// -------------------------------------------------------------------

// Variable

// optional .xviz.VariableBase base = 1;
inline bool Variable::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
inline void Variable::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
inline const ::xviz::VariableBase& Variable::base() const {
  // @@protoc_insertion_point(field_get:xviz.Variable.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::xviz::VariableBase* Variable::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::xviz::VariableBase;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Variable.base)
  return base_;
}
inline ::xviz::VariableBase* Variable::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Variable.base)
  
  ::xviz::VariableBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline void Variable::set_allocated_base(::xviz::VariableBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Variable.base)
}

// optional .xviz.Values values = 2;
inline bool Variable::has_values() const {
  return !_is_default_instance_ && values_ != NULL;
}
inline void Variable::clear_values() {
  if (GetArenaNoVirtual() == NULL && values_ != NULL) delete values_;
  values_ = NULL;
}
inline const ::xviz::Values& Variable::values() const {
  // @@protoc_insertion_point(field_get:xviz.Variable.values)
  return values_ != NULL ? *values_ : *default_instance_->values_;
}
inline ::xviz::Values* Variable::mutable_values() {
  
  if (values_ == NULL) {
    values_ = new ::xviz::Values;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Variable.values)
  return values_;
}
inline ::xviz::Values* Variable::release_values() {
  // @@protoc_insertion_point(field_release:xviz.Variable.values)
  
  ::xviz::Values* temp = values_;
  values_ = NULL;
  return temp;
}
inline void Variable::set_allocated_values(::xviz::Values* values) {
  delete values_;
  values_ = values;
  if (values) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Variable.values)
}

// -------------------------------------------------------------------

// VariableBase

// optional string object_id = 1;
inline void VariableBase::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VariableBase::object_id() const {
  // @@protoc_insertion_point(field_get:xviz.VariableBase.object_id)
  return object_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VariableBase::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.VariableBase.object_id)
}
inline void VariableBase::set_object_id(const char* value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.VariableBase.object_id)
}
inline void VariableBase::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.VariableBase.object_id)
}
inline ::std::string* VariableBase::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:xviz.VariableBase.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VariableBase::release_object_id() {
  // @@protoc_insertion_point(field_release:xviz.VariableBase.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VariableBase::set_allocated_object_id(::std::string* object_id) {
  if (object_id != NULL) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:xviz.VariableBase.object_id)
}

// -------------------------------------------------------------------

// Values

// repeated double doubles = 2;
inline int Values::doubles_size() const {
  return doubles_.size();
}
inline void Values::clear_doubles() {
  doubles_.Clear();
}
inline double Values::doubles(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Values.doubles)
  return doubles_.Get(index);
}
inline void Values::set_doubles(int index, double value) {
  doubles_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Values.doubles)
}
inline void Values::add_doubles(double value) {
  doubles_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Values.doubles)
}
inline const ::google::protobuf::RepeatedField< double >&
Values::doubles() const {
  // @@protoc_insertion_point(field_list:xviz.Values.doubles)
  return doubles_;
}
inline ::google::protobuf::RepeatedField< double >*
Values::mutable_doubles() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Values.doubles)
  return &doubles_;
}

// repeated int32 int32s = 3;
inline int Values::int32s_size() const {
  return int32s_.size();
}
inline void Values::clear_int32s() {
  int32s_.Clear();
}
inline ::google::protobuf::int32 Values::int32s(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Values.int32s)
  return int32s_.Get(index);
}
inline void Values::set_int32s(int index, ::google::protobuf::int32 value) {
  int32s_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Values.int32s)
}
inline void Values::add_int32s(::google::protobuf::int32 value) {
  int32s_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Values.int32s)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Values::int32s() const {
  // @@protoc_insertion_point(field_list:xviz.Values.int32s)
  return int32s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Values::mutable_int32s() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Values.int32s)
  return &int32s_;
}

// repeated bool bools = 4;
inline int Values::bools_size() const {
  return bools_.size();
}
inline void Values::clear_bools() {
  bools_.Clear();
}
inline bool Values::bools(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Values.bools)
  return bools_.Get(index);
}
inline void Values::set_bools(int index, bool value) {
  bools_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Values.bools)
}
inline void Values::add_bools(bool value) {
  bools_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Values.bools)
}
inline const ::google::protobuf::RepeatedField< bool >&
Values::bools() const {
  // @@protoc_insertion_point(field_list:xviz.Values.bools)
  return bools_;
}
inline ::google::protobuf::RepeatedField< bool >*
Values::mutable_bools() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Values.bools)
  return &bools_;
}

// repeated string strings = 5;
inline int Values::strings_size() const {
  return strings_.size();
}
inline void Values::clear_strings() {
  strings_.Clear();
}
inline const ::std::string& Values::strings(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Values.strings)
  return strings_.Get(index);
}
inline ::std::string* Values::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.Values.strings)
  return strings_.Mutable(index);
}
inline void Values::set_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.Values.strings)
  strings_.Mutable(index)->assign(value);
}
inline void Values::set_strings(int index, const char* value) {
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.Values.strings)
}
inline void Values::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.Values.strings)
}
inline ::std::string* Values::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:xviz.Values.strings)
  return strings_.Add();
}
inline void Values::add_strings(const ::std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.Values.strings)
}
inline void Values::add_strings(const char* value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.Values.strings)
}
inline void Values::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.Values.strings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Values::strings() const {
  // @@protoc_insertion_point(field_list:xviz.Values.strings)
  return strings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Values::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Values.strings)
  return &strings_;
}

// -------------------------------------------------------------------

// Link

// optional string target_pose = 1;
inline void Link::clear_target_pose() {
  target_pose_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Link::target_pose() const {
  // @@protoc_insertion_point(field_get:xviz.Link.target_pose)
  return target_pose_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_target_pose(const ::std::string& value) {
  
  target_pose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Link.target_pose)
}
inline void Link::set_target_pose(const char* value) {
  
  target_pose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Link.target_pose)
}
inline void Link::set_target_pose(const char* value, size_t size) {
  
  target_pose_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Link.target_pose)
}
inline ::std::string* Link::mutable_target_pose() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Link.target_pose)
  return target_pose_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Link::release_target_pose() {
  // @@protoc_insertion_point(field_release:xviz.Link.target_pose)
  
  return target_pose_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_allocated_target_pose(::std::string* target_pose) {
  if (target_pose != NULL) {
    
  } else {
    
  }
  target_pose_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_pose);
  // @@protoc_insertion_point(field_set_allocated:xviz.Link.target_pose)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_core_2eproto__INCLUDED
