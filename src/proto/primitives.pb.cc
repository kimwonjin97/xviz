// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primitives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/primitives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xviz {

namespace {

const ::google::protobuf::Descriptor* PrimitiveBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrimitiveBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* Circle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Circle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Polygon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Polygon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Polyline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Polyline_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stadium_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stadium_reflection_ = NULL;
const ::google::protobuf::Descriptor* Text_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Text_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_primitives_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_primitives_2eproto() {
  protobuf_AddDesc_primitives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "primitives.proto");
  GOOGLE_CHECK(file != NULL);
  PrimitiveBase_descriptor_ = file->message_type(0);
  static const int PrimitiveBase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveBase, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveBase, classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveBase, style_),
  };
  PrimitiveBase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrimitiveBase_descriptor_,
      PrimitiveBase::default_instance_,
      PrimitiveBase_offsets_,
      -1,
      -1,
      -1,
      sizeof(PrimitiveBase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveBase, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveBase, _is_default_instance_));
  Circle_descriptor_ = file->message_type(1);
  static const int Circle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Circle, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Circle, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Circle, radius_),
  };
  Circle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Circle_descriptor_,
      Circle::default_instance_,
      Circle_offsets_,
      -1,
      -1,
      -1,
      sizeof(Circle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Circle, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Circle, _is_default_instance_));
  Image_descriptor_ = file->message_type(2);
  static const int Image_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, width_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, height_px_),
  };
  Image_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Image_descriptor_,
      Image::default_instance_,
      Image_offsets_,
      -1,
      -1,
      -1,
      sizeof(Image),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _is_default_instance_));
  Point_descriptor_ = file->message_type(3);
  static const int Point_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, colors_),
  };
  Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      -1,
      -1,
      -1,
      sizeof(Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _is_default_instance_));
  Polygon_descriptor_ = file->message_type(4);
  static const int Polygon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, vertices_),
  };
  Polygon_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Polygon_descriptor_,
      Polygon::default_instance_,
      Polygon_offsets_,
      -1,
      -1,
      -1,
      sizeof(Polygon),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _is_default_instance_));
  Polyline_descriptor_ = file->message_type(5);
  static const int Polyline_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polyline, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polyline, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polyline, colors_),
  };
  Polyline_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Polyline_descriptor_,
      Polyline::default_instance_,
      Polyline_offsets_,
      -1,
      -1,
      -1,
      sizeof(Polyline),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polyline, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polyline, _is_default_instance_));
  Stadium_descriptor_ = file->message_type(6);
  static const int Stadium_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stadium, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stadium, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stadium, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stadium, radius_),
  };
  Stadium_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Stadium_descriptor_,
      Stadium::default_instance_,
      Stadium_offsets_,
      -1,
      -1,
      -1,
      sizeof(Stadium),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stadium, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stadium, _is_default_instance_));
  Text_descriptor_ = file->message_type(7);
  static const int Text_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, text_),
  };
  Text_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Text_descriptor_,
      Text::default_instance_,
      Text_offsets_,
      -1,
      -1,
      -1,
      sizeof(Text),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_primitives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrimitiveBase_descriptor_, &PrimitiveBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Circle_descriptor_, &Circle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Image_descriptor_, &Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Polygon_descriptor_, &Polygon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Polyline_descriptor_, &Polyline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Stadium_descriptor_, &Stadium::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Text_descriptor_, &Text::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_primitives_2eproto() {
  delete PrimitiveBase::default_instance_;
  delete PrimitiveBase_reflection_;
  delete Circle::default_instance_;
  delete Circle_reflection_;
  delete Image::default_instance_;
  delete Image_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Polygon::default_instance_;
  delete Polygon_reflection_;
  delete Polyline::default_instance_;
  delete Polyline_reflection_;
  delete Stadium::default_instance_;
  delete Stadium_reflection_;
  delete Text::default_instance_;
  delete Text_reflection_;
}

void protobuf_AddDesc_primitives_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_primitives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::xviz::protobuf_AddDesc_options_2eproto();
  ::xviz::protobuf_AddDesc_style_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020primitives.proto\022\004xviz\032\roptions.proto\032"
    "\013style.proto\"Z\n\rPrimitiveBase\022\021\n\tobject_"
    "id\030\001 \001(\t\022\017\n\007classes\030\002 \003(\t\022%\n\005style\030\003 \001(\013"
    "2\026.xviz.StyleObjectValue\"b\n\006Circle\022!\n\004ba"
    "se\030\001 \001(\0132\023.xviz.PrimitiveBase\022\016\n\006center\030"
    "\002 \003(\002\022\016\n\006radius\030\003 \001(\002:\025\302\273\032\021primitives/ci"
    "rcle\"\205\001\n\005Image\022!\n\004base\030\001 \001(\0132\023.xviz.Prim"
    "itiveBase\022\020\n\010position\030\002 \003(\002\022\014\n\004data\030\003 \001("
    "\014\022\020\n\010width_px\030\004 \001(\r\022\021\n\theight_px\030\005 \001(\r:\024"
    "\302\273\032\020primitives/image\"`\n\005Point\022!\n\004base\030\001 "
    "\001(\0132\023.xviz.PrimitiveBase\022\016\n\006points\030\002 \003(\002"
    "\022\016\n\006colors\030\003 \001(\014:\024\302\273\032\020primitives/point\"V"
    "\n\007Polygon\022!\n\004base\030\001 \001(\0132\023.xviz.Primitive"
    "Base\022\020\n\010vertices\030\002 \003(\002:\026\302\273\032\022primitives/p"
    "olygon\"h\n\010Polyline\022!\n\004base\030\001 \001(\0132\023.xviz."
    "PrimitiveBase\022\020\n\010vertices\030\002 \003(\002\022\016\n\006color"
    "s\030\003 \001(\014:\027\302\273\032\023primitives/polyline\"p\n\007Stad"
    "ium\022!\n\004base\030\001 \001(\0132\023.xviz.PrimitiveBase\022\r"
    "\n\005start\030\002 \003(\002\022\013\n\003end\030\003 \003(\002\022\016\n\006radius\030\004 \001"
    "(\002:\026\302\273\032\022primitives/stadium\"^\n\004Text\022!\n\004ba"
    "se\030\001 \001(\0132\023.xviz.PrimitiveBase\022\020\n\010positio"
    "n\030\002 \003(\002\022\014\n\004text\030\003 \001(\t:\023\302\273\032\017primitives/te"
    "xtB7\n\013com.xviz.v2B\017PrimitivesProtoP\001Z\004v2"
    "pb\242\002\004XVIZ\252\002\007xviz.V2b\006proto3", 947);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "primitives.proto", &protobuf_RegisterTypes);
  PrimitiveBase::default_instance_ = new PrimitiveBase();
  Circle::default_instance_ = new Circle();
  Image::default_instance_ = new Image();
  Point::default_instance_ = new Point();
  Polygon::default_instance_ = new Polygon();
  Polyline::default_instance_ = new Polyline();
  Stadium::default_instance_ = new Stadium();
  Text::default_instance_ = new Text();
  PrimitiveBase::default_instance_->InitAsDefaultInstance();
  Circle::default_instance_->InitAsDefaultInstance();
  Image::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  Polygon::default_instance_->InitAsDefaultInstance();
  Polyline::default_instance_->InitAsDefaultInstance();
  Stadium::default_instance_->InitAsDefaultInstance();
  Text::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_primitives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_primitives_2eproto {
  StaticDescriptorInitializer_primitives_2eproto() {
    protobuf_AddDesc_primitives_2eproto();
  }
} static_descriptor_initializer_primitives_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrimitiveBase::kObjectIdFieldNumber;
const int PrimitiveBase::kClassesFieldNumber;
const int PrimitiveBase::kStyleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrimitiveBase::PrimitiveBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.PrimitiveBase)
}

void PrimitiveBase::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  style_ = const_cast< ::xviz::StyleObjectValue*>(&::xviz::StyleObjectValue::default_instance());
}

PrimitiveBase::PrimitiveBase(const PrimitiveBase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.PrimitiveBase)
}

void PrimitiveBase::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  style_ = NULL;
}

PrimitiveBase::~PrimitiveBase() {
  // @@protoc_insertion_point(destructor:xviz.PrimitiveBase)
  SharedDtor();
}

void PrimitiveBase::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete style_;
  }
}

void PrimitiveBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrimitiveBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrimitiveBase_descriptor_;
}

const PrimitiveBase& PrimitiveBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_primitives_2eproto();
  return *default_instance_;
}

PrimitiveBase* PrimitiveBase::default_instance_ = NULL;

PrimitiveBase* PrimitiveBase::New(::google::protobuf::Arena* arena) const {
  PrimitiveBase* n = new PrimitiveBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrimitiveBase::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.PrimitiveBase)
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && style_ != NULL) delete style_;
  style_ = NULL;
  classes_.Clear();
}

bool PrimitiveBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.PrimitiveBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string object_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), this->object_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.PrimitiveBase.object_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_classes;
        break;
      }

      // repeated string classes = 2;
      case 2: {
        if (tag == 18) {
         parse_classes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_classes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->classes(this->classes_size() - 1).data(),
            this->classes(this->classes_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.PrimitiveBase.classes"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_classes;
        if (input->ExpectTag(26)) goto parse_style;
        break;
      }

      // optional .xviz.StyleObjectValue style = 3;
      case 3: {
        if (tag == 26) {
         parse_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.PrimitiveBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.PrimitiveBase)
  return false;
#undef DO_
}

void PrimitiveBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.PrimitiveBase)
  // optional string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), this->object_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.PrimitiveBase.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->object_id(), output);
  }

  // repeated string classes = 2;
  for (int i = 0; i < this->classes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->classes(i).data(), this->classes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.PrimitiveBase.classes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classes(i), output);
  }

  // optional .xviz.StyleObjectValue style = 3;
  if (this->has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->style_, output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.PrimitiveBase)
}

::google::protobuf::uint8* PrimitiveBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.PrimitiveBase)
  // optional string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), this->object_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.PrimitiveBase.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_id(), target);
  }

  // repeated string classes = 2;
  for (int i = 0; i < this->classes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->classes(i).data(), this->classes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.PrimitiveBase.classes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->classes(i), target);
  }

  // optional .xviz.StyleObjectValue style = 3;
  if (this->has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->style_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.PrimitiveBase)
  return target;
}

int PrimitiveBase::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.PrimitiveBase)
  int total_size = 0;

  // optional string object_id = 1;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // optional .xviz.StyleObjectValue style = 3;
  if (this->has_style()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->style_);
  }

  // repeated string classes = 2;
  total_size += 1 * this->classes_size();
  for (int i = 0; i < this->classes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->classes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrimitiveBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.PrimitiveBase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PrimitiveBase* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PrimitiveBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.PrimitiveBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.PrimitiveBase)
    MergeFrom(*source);
  }
}

void PrimitiveBase::MergeFrom(const PrimitiveBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.PrimitiveBase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  classes_.MergeFrom(from.classes_);
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.has_style()) {
    mutable_style()->::xviz::StyleObjectValue::MergeFrom(from.style());
  }
}

void PrimitiveBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.PrimitiveBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrimitiveBase::CopyFrom(const PrimitiveBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.PrimitiveBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveBase::IsInitialized() const {

  return true;
}

void PrimitiveBase::Swap(PrimitiveBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrimitiveBase::InternalSwap(PrimitiveBase* other) {
  object_id_.Swap(&other->object_id_);
  classes_.UnsafeArenaSwap(&other->classes_);
  std::swap(style_, other->style_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrimitiveBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrimitiveBase_descriptor_;
  metadata.reflection = PrimitiveBase_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrimitiveBase

// optional string object_id = 1;
void PrimitiveBase::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PrimitiveBase::object_id() const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveBase.object_id)
  return object_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PrimitiveBase::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.PrimitiveBase.object_id)
}
 void PrimitiveBase::set_object_id(const char* value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.PrimitiveBase.object_id)
}
 void PrimitiveBase::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.PrimitiveBase.object_id)
}
 ::std::string* PrimitiveBase::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveBase.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PrimitiveBase::release_object_id() {
  // @@protoc_insertion_point(field_release:xviz.PrimitiveBase.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PrimitiveBase::set_allocated_object_id(::std::string* object_id) {
  if (object_id != NULL) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:xviz.PrimitiveBase.object_id)
}

// repeated string classes = 2;
int PrimitiveBase::classes_size() const {
  return classes_.size();
}
void PrimitiveBase::clear_classes() {
  classes_.Clear();
}
 const ::std::string& PrimitiveBase::classes(int index) const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveBase.classes)
  return classes_.Get(index);
}
 ::std::string* PrimitiveBase::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveBase.classes)
  return classes_.Mutable(index);
}
 void PrimitiveBase::set_classes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.PrimitiveBase.classes)
  classes_.Mutable(index)->assign(value);
}
 void PrimitiveBase::set_classes(int index, const char* value) {
  classes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.PrimitiveBase.classes)
}
 void PrimitiveBase::set_classes(int index, const char* value, size_t size) {
  classes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.PrimitiveBase.classes)
}
 ::std::string* PrimitiveBase::add_classes() {
  // @@protoc_insertion_point(field_add_mutable:xviz.PrimitiveBase.classes)
  return classes_.Add();
}
 void PrimitiveBase::add_classes(const ::std::string& value) {
  classes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.PrimitiveBase.classes)
}
 void PrimitiveBase::add_classes(const char* value) {
  classes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.PrimitiveBase.classes)
}
 void PrimitiveBase::add_classes(const char* value, size_t size) {
  classes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.PrimitiveBase.classes)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PrimitiveBase::classes() const {
  // @@protoc_insertion_point(field_list:xviz.PrimitiveBase.classes)
  return classes_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PrimitiveBase::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:xviz.PrimitiveBase.classes)
  return &classes_;
}

// optional .xviz.StyleObjectValue style = 3;
bool PrimitiveBase::has_style() const {
  return !_is_default_instance_ && style_ != NULL;
}
void PrimitiveBase::clear_style() {
  if (GetArenaNoVirtual() == NULL && style_ != NULL) delete style_;
  style_ = NULL;
}
const ::xviz::StyleObjectValue& PrimitiveBase::style() const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveBase.style)
  return style_ != NULL ? *style_ : *default_instance_->style_;
}
::xviz::StyleObjectValue* PrimitiveBase::mutable_style() {
  
  if (style_ == NULL) {
    style_ = new ::xviz::StyleObjectValue;
  }
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveBase.style)
  return style_;
}
::xviz::StyleObjectValue* PrimitiveBase::release_style() {
  // @@protoc_insertion_point(field_release:xviz.PrimitiveBase.style)
  
  ::xviz::StyleObjectValue* temp = style_;
  style_ = NULL;
  return temp;
}
void PrimitiveBase::set_allocated_style(::xviz::StyleObjectValue* style) {
  delete style_;
  style_ = style;
  if (style) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.PrimitiveBase.style)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Circle::kBaseFieldNumber;
const int Circle::kCenterFieldNumber;
const int Circle::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Circle::Circle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Circle)
}

void Circle::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::xviz::PrimitiveBase*>(&::xviz::PrimitiveBase::default_instance());
}

Circle::Circle(const Circle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Circle)
}

void Circle::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_ = NULL;
  radius_ = 0;
}

Circle::~Circle() {
  // @@protoc_insertion_point(destructor:xviz.Circle)
  SharedDtor();
}

void Circle::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void Circle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Circle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Circle_descriptor_;
}

const Circle& Circle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_primitives_2eproto();
  return *default_instance_;
}

Circle* Circle::default_instance_ = NULL;

Circle* Circle::New(::google::protobuf::Arena* arena) const {
  Circle* n = new Circle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Circle::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Circle)
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  radius_ = 0;
  center_.Clear();
}

bool Circle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Circle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .xviz.PrimitiveBase base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_center;
        break;
      }

      // repeated float center = 2;
      case 2: {
        if (tag == 18) {
         parse_center:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_center())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_center())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_radius;
        break;
      }

      // optional float radius = 3;
      case 3: {
        if (tag == 29) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Circle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Circle)
  return false;
#undef DO_
}

void Circle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Circle)
  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // repeated float center = 2;
  if (this->center_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_center_cached_byte_size_);
  }
  for (int i = 0; i < this->center_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->center(i), output);
  }

  // optional float radius = 3;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->radius(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Circle)
}

::google::protobuf::uint8* Circle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Circle)
  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, false, target);
  }

  // repeated float center = 2;
  if (this->center_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _center_cached_byte_size_, target);
  }
  for (int i = 0; i < this->center_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->center(i), target);
  }

  // optional float radius = 3;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->radius(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Circle)
  return target;
}

int Circle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Circle)
  int total_size = 0;

  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional float radius = 3;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  // repeated float center = 2;
  {
    int data_size = 0;
    data_size = 4 * this->center_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _center_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Circle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Circle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Circle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Circle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Circle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Circle)
    MergeFrom(*source);
  }
}

void Circle::MergeFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Circle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  center_.MergeFrom(from.center_);
  if (from.has_base()) {
    mutable_base()->::xviz::PrimitiveBase::MergeFrom(from.base());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void Circle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Circle::CopyFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Circle::IsInitialized() const {

  return true;
}

void Circle::Swap(Circle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Circle::InternalSwap(Circle* other) {
  std::swap(base_, other->base_);
  center_.UnsafeArenaSwap(&other->center_);
  std::swap(radius_, other->radius_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Circle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Circle_descriptor_;
  metadata.reflection = Circle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Circle

// optional .xviz.PrimitiveBase base = 1;
bool Circle::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void Circle::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::xviz::PrimitiveBase& Circle::base() const {
  // @@protoc_insertion_point(field_get:xviz.Circle.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::xviz::PrimitiveBase* Circle::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::xviz::PrimitiveBase;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Circle.base)
  return base_;
}
::xviz::PrimitiveBase* Circle::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Circle.base)
  
  ::xviz::PrimitiveBase* temp = base_;
  base_ = NULL;
  return temp;
}
void Circle::set_allocated_base(::xviz::PrimitiveBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Circle.base)
}

// repeated float center = 2;
int Circle::center_size() const {
  return center_.size();
}
void Circle::clear_center() {
  center_.Clear();
}
 float Circle::center(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Circle.center)
  return center_.Get(index);
}
 void Circle::set_center(int index, float value) {
  center_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Circle.center)
}
 void Circle::add_center(float value) {
  center_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Circle.center)
}
 const ::google::protobuf::RepeatedField< float >&
Circle::center() const {
  // @@protoc_insertion_point(field_list:xviz.Circle.center)
  return center_;
}
 ::google::protobuf::RepeatedField< float >*
Circle::mutable_center() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Circle.center)
  return &center_;
}

// optional float radius = 3;
void Circle::clear_radius() {
  radius_ = 0;
}
 float Circle::radius() const {
  // @@protoc_insertion_point(field_get:xviz.Circle.radius)
  return radius_;
}
 void Circle::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:xviz.Circle.radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kBaseFieldNumber;
const int Image::kPositionFieldNumber;
const int Image::kDataFieldNumber;
const int Image::kWidthPxFieldNumber;
const int Image::kHeightPxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Image)
}

void Image::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::xviz::PrimitiveBase*>(&::xviz::PrimitiveBase::default_instance());
}

Image::Image(const Image& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Image)
}

void Image::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  base_ = NULL;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_px_ = 0u;
  height_px_ = 0u;
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:xviz.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete base_;
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_descriptor_;
}

const Image& Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_primitives_2eproto();
  return *default_instance_;
}

Image* Image::default_instance_ = NULL;

Image* Image::New(::google::protobuf::Arena* arena) const {
  Image* n = new Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Image)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Image, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Image*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_px_, height_px_);
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  position_.Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .xviz.PrimitiveBase base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // repeated float position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_position())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width_px;
        break;
      }

      // optional uint32 width_px = 4;
      case 4: {
        if (tag == 32) {
         parse_width_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_px_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_height_px;
        break;
      }

      // optional uint32 height_px = 5;
      case 5: {
        if (tag == 40) {
         parse_height_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_px_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Image)
  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // repeated float position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_cached_byte_size_);
  }
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->position(i), output);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional uint32 width_px = 4;
  if (this->width_px() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width_px(), output);
  }

  // optional uint32 height_px = 5;
  if (this->height_px() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->height_px(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Image)
}

::google::protobuf::uint8* Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Image)
  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, false, target);
  }

  // repeated float position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _position_cached_byte_size_, target);
  }
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->position(i), target);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional uint32 width_px = 4;
  if (this->width_px() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width_px(), target);
  }

  // optional uint32 height_px = 5;
  if (this->height_px() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->height_px(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Image)
  return target;
}

int Image::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Image)
  int total_size = 0;

  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional uint32 width_px = 4;
  if (this->width_px() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width_px());
  }

  // optional uint32 height_px = 5;
  if (this->height_px() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height_px());
  }

  // repeated float position = 2;
  {
    int data_size = 0;
    data_size = 4 * this->position_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Image)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Image* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Image)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  position_.MergeFrom(from.position_);
  if (from.has_base()) {
    mutable_base()->::xviz::PrimitiveBase::MergeFrom(from.base());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.width_px() != 0) {
    set_width_px(from.width_px());
  }
  if (from.height_px() != 0) {
    set_height_px(from.height_px());
  }
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {

  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  std::swap(base_, other->base_);
  position_.UnsafeArenaSwap(&other->position_);
  data_.Swap(&other->data_);
  std::swap(width_px_, other->width_px_);
  std::swap(height_px_, other->height_px_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_descriptor_;
  metadata.reflection = Image_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Image

// optional .xviz.PrimitiveBase base = 1;
bool Image::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void Image::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::xviz::PrimitiveBase& Image::base() const {
  // @@protoc_insertion_point(field_get:xviz.Image.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::xviz::PrimitiveBase* Image::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::xviz::PrimitiveBase;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Image.base)
  return base_;
}
::xviz::PrimitiveBase* Image::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Image.base)
  
  ::xviz::PrimitiveBase* temp = base_;
  base_ = NULL;
  return temp;
}
void Image::set_allocated_base(::xviz::PrimitiveBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Image.base)
}

// repeated float position = 2;
int Image::position_size() const {
  return position_.size();
}
void Image::clear_position() {
  position_.Clear();
}
 float Image::position(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Image.position)
  return position_.Get(index);
}
 void Image::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Image.position)
}
 void Image::add_position(float value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Image.position)
}
 const ::google::protobuf::RepeatedField< float >&
Image::position() const {
  // @@protoc_insertion_point(field_list:xviz.Image.position)
  return position_;
}
 ::google::protobuf::RepeatedField< float >*
Image::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Image.position)
  return &position_;
}

// optional bytes data = 3;
void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:xviz.Image.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Image.data)
}
 void Image::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Image.data)
}
 void Image::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Image.data)
}
 ::std::string* Image::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:xviz.Image.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:xviz.Image.data)
}

// optional uint32 width_px = 4;
void Image::clear_width_px() {
  width_px_ = 0u;
}
 ::google::protobuf::uint32 Image::width_px() const {
  // @@protoc_insertion_point(field_get:xviz.Image.width_px)
  return width_px_;
}
 void Image::set_width_px(::google::protobuf::uint32 value) {
  
  width_px_ = value;
  // @@protoc_insertion_point(field_set:xviz.Image.width_px)
}

// optional uint32 height_px = 5;
void Image::clear_height_px() {
  height_px_ = 0u;
}
 ::google::protobuf::uint32 Image::height_px() const {
  // @@protoc_insertion_point(field_get:xviz.Image.height_px)
  return height_px_;
}
 void Image::set_height_px(::google::protobuf::uint32 value) {
  
  height_px_ = value;
  // @@protoc_insertion_point(field_set:xviz.Image.height_px)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kBaseFieldNumber;
const int Point::kPointsFieldNumber;
const int Point::kColorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Point)
}

void Point::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::xviz::PrimitiveBase*>(&::xviz::PrimitiveBase::default_instance());
}

Point::Point(const Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Point)
}

void Point::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  base_ = NULL;
  colors_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:xviz.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  colors_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete base_;
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_primitives_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Point)
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  colors_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  points_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .xviz.PrimitiveBase base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_points;
        break;
      }

      // repeated float points = 2;
      case 2: {
        if (tag == 18) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_points())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_points())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_colors;
        break;
      }

      // optional bytes colors = 3;
      case 3: {
        if (tag == 26) {
         parse_colors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_colors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Point)
  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // repeated float points = 2;
  if (this->points_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_points_cached_byte_size_);
  }
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->points(i), output);
  }

  // optional bytes colors = 3;
  if (this->colors().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->colors(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Point)
  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, false, target);
  }

  // repeated float points = 2;
  if (this->points_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _points_cached_byte_size_, target);
  }
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->points(i), target);
  }

  // optional bytes colors = 3;
  if (this->colors().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->colors(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Point)
  return target;
}

int Point::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Point)
  int total_size = 0;

  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional bytes colors = 3;
  if (this->colors().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->colors());
  }

  // repeated float points = 2;
  {
    int data_size = 0;
    data_size = 4 * this->points_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _points_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Point* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  points_.MergeFrom(from.points_);
  if (from.has_base()) {
    mutable_base()->::xviz::PrimitiveBase::MergeFrom(from.base());
  }
  if (from.colors().size() > 0) {

    colors_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.colors_);
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(base_, other->base_);
  points_.UnsafeArenaSwap(&other->points_);
  colors_.Swap(&other->colors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional .xviz.PrimitiveBase base = 1;
bool Point::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void Point::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::xviz::PrimitiveBase& Point::base() const {
  // @@protoc_insertion_point(field_get:xviz.Point.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::xviz::PrimitiveBase* Point::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::xviz::PrimitiveBase;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Point.base)
  return base_;
}
::xviz::PrimitiveBase* Point::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Point.base)
  
  ::xviz::PrimitiveBase* temp = base_;
  base_ = NULL;
  return temp;
}
void Point::set_allocated_base(::xviz::PrimitiveBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Point.base)
}

// repeated float points = 2;
int Point::points_size() const {
  return points_.size();
}
void Point::clear_points() {
  points_.Clear();
}
 float Point::points(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Point.points)
  return points_.Get(index);
}
 void Point::set_points(int index, float value) {
  points_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Point.points)
}
 void Point::add_points(float value) {
  points_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Point.points)
}
 const ::google::protobuf::RepeatedField< float >&
Point::points() const {
  // @@protoc_insertion_point(field_list:xviz.Point.points)
  return points_;
}
 ::google::protobuf::RepeatedField< float >*
Point::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Point.points)
  return &points_;
}

// optional bytes colors = 3;
void Point::clear_colors() {
  colors_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Point::colors() const {
  // @@protoc_insertion_point(field_get:xviz.Point.colors)
  return colors_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Point::set_colors(const ::std::string& value) {
  
  colors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Point.colors)
}
 void Point::set_colors(const char* value) {
  
  colors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Point.colors)
}
 void Point::set_colors(const void* value, size_t size) {
  
  colors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Point.colors)
}
 ::std::string* Point::mutable_colors() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Point.colors)
  return colors_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Point::release_colors() {
  // @@protoc_insertion_point(field_release:xviz.Point.colors)
  
  return colors_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Point::set_allocated_colors(::std::string* colors) {
  if (colors != NULL) {
    
  } else {
    
  }
  colors_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), colors);
  // @@protoc_insertion_point(field_set_allocated:xviz.Point.colors)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon::kBaseFieldNumber;
const int Polygon::kVerticesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon::Polygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Polygon)
}

void Polygon::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::xviz::PrimitiveBase*>(&::xviz::PrimitiveBase::default_instance());
}

Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Polygon)
}

void Polygon::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_ = NULL;
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:xviz.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Polygon_descriptor_;
}

const Polygon& Polygon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_primitives_2eproto();
  return *default_instance_;
}

Polygon* Polygon::default_instance_ = NULL;

Polygon* Polygon::New(::google::protobuf::Arena* arena) const {
  Polygon* n = new Polygon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Polygon)
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  vertices_.Clear();
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Polygon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .xviz.PrimitiveBase base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vertices;
        break;
      }

      // repeated float vertices = 2;
      case 2: {
        if (tag == 18) {
         parse_vertices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vertices())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_vertices())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Polygon)
  return false;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Polygon)
  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // repeated float vertices = 2;
  if (this->vertices_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vertices_cached_byte_size_);
  }
  for (int i = 0; i < this->vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->vertices(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Polygon)
}

::google::protobuf::uint8* Polygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Polygon)
  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, false, target);
  }

  // repeated float vertices = 2;
  if (this->vertices_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vertices_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->vertices(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Polygon)
  return target;
}

int Polygon::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Polygon)
  int total_size = 0;

  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // repeated float vertices = 2;
  {
    int data_size = 0;
    data_size = 4 * this->vertices_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vertices_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Polygon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Polygon* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Polygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Polygon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  vertices_.MergeFrom(from.vertices_);
  if (from.has_base()) {
    mutable_base()->::xviz::PrimitiveBase::MergeFrom(from.base());
  }
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {

  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon::InternalSwap(Polygon* other) {
  std::swap(base_, other->base_);
  vertices_.UnsafeArenaSwap(&other->vertices_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Polygon_descriptor_;
  metadata.reflection = Polygon_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Polygon

// optional .xviz.PrimitiveBase base = 1;
bool Polygon::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void Polygon::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::xviz::PrimitiveBase& Polygon::base() const {
  // @@protoc_insertion_point(field_get:xviz.Polygon.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::xviz::PrimitiveBase* Polygon::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::xviz::PrimitiveBase;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Polygon.base)
  return base_;
}
::xviz::PrimitiveBase* Polygon::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Polygon.base)
  
  ::xviz::PrimitiveBase* temp = base_;
  base_ = NULL;
  return temp;
}
void Polygon::set_allocated_base(::xviz::PrimitiveBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Polygon.base)
}

// repeated float vertices = 2;
int Polygon::vertices_size() const {
  return vertices_.size();
}
void Polygon::clear_vertices() {
  vertices_.Clear();
}
 float Polygon::vertices(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Polygon.vertices)
  return vertices_.Get(index);
}
 void Polygon::set_vertices(int index, float value) {
  vertices_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Polygon.vertices)
}
 void Polygon::add_vertices(float value) {
  vertices_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Polygon.vertices)
}
 const ::google::protobuf::RepeatedField< float >&
Polygon::vertices() const {
  // @@protoc_insertion_point(field_list:xviz.Polygon.vertices)
  return vertices_;
}
 ::google::protobuf::RepeatedField< float >*
Polygon::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Polygon.vertices)
  return &vertices_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polyline::kBaseFieldNumber;
const int Polyline::kVerticesFieldNumber;
const int Polyline::kColorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polyline::Polyline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Polyline)
}

void Polyline::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::xviz::PrimitiveBase*>(&::xviz::PrimitiveBase::default_instance());
}

Polyline::Polyline(const Polyline& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Polyline)
}

void Polyline::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  base_ = NULL;
  colors_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Polyline::~Polyline() {
  // @@protoc_insertion_point(destructor:xviz.Polyline)
  SharedDtor();
}

void Polyline::SharedDtor() {
  colors_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete base_;
  }
}

void Polyline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polyline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Polyline_descriptor_;
}

const Polyline& Polyline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_primitives_2eproto();
  return *default_instance_;
}

Polyline* Polyline::default_instance_ = NULL;

Polyline* Polyline::New(::google::protobuf::Arena* arena) const {
  Polyline* n = new Polyline;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Polyline::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Polyline)
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  colors_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vertices_.Clear();
}

bool Polyline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Polyline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .xviz.PrimitiveBase base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vertices;
        break;
      }

      // repeated float vertices = 2;
      case 2: {
        if (tag == 18) {
         parse_vertices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vertices())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_vertices())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_colors;
        break;
      }

      // optional bytes colors = 3;
      case 3: {
        if (tag == 26) {
         parse_colors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_colors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Polyline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Polyline)
  return false;
#undef DO_
}

void Polyline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Polyline)
  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // repeated float vertices = 2;
  if (this->vertices_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vertices_cached_byte_size_);
  }
  for (int i = 0; i < this->vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->vertices(i), output);
  }

  // optional bytes colors = 3;
  if (this->colors().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->colors(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Polyline)
}

::google::protobuf::uint8* Polyline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Polyline)
  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, false, target);
  }

  // repeated float vertices = 2;
  if (this->vertices_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vertices_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->vertices(i), target);
  }

  // optional bytes colors = 3;
  if (this->colors().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->colors(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Polyline)
  return target;
}

int Polyline::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Polyline)
  int total_size = 0;

  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional bytes colors = 3;
  if (this->colors().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->colors());
  }

  // repeated float vertices = 2;
  {
    int data_size = 0;
    data_size = 4 * this->vertices_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vertices_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polyline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Polyline)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Polyline* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Polyline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Polyline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Polyline)
    MergeFrom(*source);
  }
}

void Polyline::MergeFrom(const Polyline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Polyline)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  vertices_.MergeFrom(from.vertices_);
  if (from.has_base()) {
    mutable_base()->::xviz::PrimitiveBase::MergeFrom(from.base());
  }
  if (from.colors().size() > 0) {

    colors_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.colors_);
  }
}

void Polyline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Polyline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polyline::CopyFrom(const Polyline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Polyline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polyline::IsInitialized() const {

  return true;
}

void Polyline::Swap(Polyline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polyline::InternalSwap(Polyline* other) {
  std::swap(base_, other->base_);
  vertices_.UnsafeArenaSwap(&other->vertices_);
  colors_.Swap(&other->colors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Polyline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Polyline_descriptor_;
  metadata.reflection = Polyline_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Polyline

// optional .xviz.PrimitiveBase base = 1;
bool Polyline::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void Polyline::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::xviz::PrimitiveBase& Polyline::base() const {
  // @@protoc_insertion_point(field_get:xviz.Polyline.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::xviz::PrimitiveBase* Polyline::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::xviz::PrimitiveBase;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Polyline.base)
  return base_;
}
::xviz::PrimitiveBase* Polyline::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Polyline.base)
  
  ::xviz::PrimitiveBase* temp = base_;
  base_ = NULL;
  return temp;
}
void Polyline::set_allocated_base(::xviz::PrimitiveBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Polyline.base)
}

// repeated float vertices = 2;
int Polyline::vertices_size() const {
  return vertices_.size();
}
void Polyline::clear_vertices() {
  vertices_.Clear();
}
 float Polyline::vertices(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Polyline.vertices)
  return vertices_.Get(index);
}
 void Polyline::set_vertices(int index, float value) {
  vertices_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Polyline.vertices)
}
 void Polyline::add_vertices(float value) {
  vertices_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Polyline.vertices)
}
 const ::google::protobuf::RepeatedField< float >&
Polyline::vertices() const {
  // @@protoc_insertion_point(field_list:xviz.Polyline.vertices)
  return vertices_;
}
 ::google::protobuf::RepeatedField< float >*
Polyline::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Polyline.vertices)
  return &vertices_;
}

// optional bytes colors = 3;
void Polyline::clear_colors() {
  colors_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Polyline::colors() const {
  // @@protoc_insertion_point(field_get:xviz.Polyline.colors)
  return colors_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Polyline::set_colors(const ::std::string& value) {
  
  colors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Polyline.colors)
}
 void Polyline::set_colors(const char* value) {
  
  colors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Polyline.colors)
}
 void Polyline::set_colors(const void* value, size_t size) {
  
  colors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Polyline.colors)
}
 ::std::string* Polyline::mutable_colors() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Polyline.colors)
  return colors_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Polyline::release_colors() {
  // @@protoc_insertion_point(field_release:xviz.Polyline.colors)
  
  return colors_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Polyline::set_allocated_colors(::std::string* colors) {
  if (colors != NULL) {
    
  } else {
    
  }
  colors_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), colors);
  // @@protoc_insertion_point(field_set_allocated:xviz.Polyline.colors)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stadium::kBaseFieldNumber;
const int Stadium::kStartFieldNumber;
const int Stadium::kEndFieldNumber;
const int Stadium::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stadium::Stadium()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Stadium)
}

void Stadium::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::xviz::PrimitiveBase*>(&::xviz::PrimitiveBase::default_instance());
}

Stadium::Stadium(const Stadium& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Stadium)
}

void Stadium::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_ = NULL;
  radius_ = 0;
}

Stadium::~Stadium() {
  // @@protoc_insertion_point(destructor:xviz.Stadium)
  SharedDtor();
}

void Stadium::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void Stadium::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stadium::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stadium_descriptor_;
}

const Stadium& Stadium::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_primitives_2eproto();
  return *default_instance_;
}

Stadium* Stadium::default_instance_ = NULL;

Stadium* Stadium::New(::google::protobuf::Arena* arena) const {
  Stadium* n = new Stadium;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stadium::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Stadium)
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  radius_ = 0;
  start_.Clear();
  end_.Clear();
}

bool Stadium::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Stadium)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .xviz.PrimitiveBase base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start;
        break;
      }

      // repeated float start = 2;
      case 2: {
        if (tag == 18) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_start())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_start())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end;
        break;
      }

      // repeated float end = 3;
      case 3: {
        if (tag == 26) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_end())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_end())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_radius;
        break;
      }

      // optional float radius = 4;
      case 4: {
        if (tag == 37) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Stadium)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Stadium)
  return false;
#undef DO_
}

void Stadium::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Stadium)
  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // repeated float start = 2;
  if (this->start_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_start_cached_byte_size_);
  }
  for (int i = 0; i < this->start_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->start(i), output);
  }

  // repeated float end = 3;
  if (this->end_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_end_cached_byte_size_);
  }
  for (int i = 0; i < this->end_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->end(i), output);
  }

  // optional float radius = 4;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->radius(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Stadium)
}

::google::protobuf::uint8* Stadium::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Stadium)
  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, false, target);
  }

  // repeated float start = 2;
  if (this->start_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _start_cached_byte_size_, target);
  }
  for (int i = 0; i < this->start_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->start(i), target);
  }

  // repeated float end = 3;
  if (this->end_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _end_cached_byte_size_, target);
  }
  for (int i = 0; i < this->end_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->end(i), target);
  }

  // optional float radius = 4;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->radius(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Stadium)
  return target;
}

int Stadium::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Stadium)
  int total_size = 0;

  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional float radius = 4;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  // repeated float start = 2;
  {
    int data_size = 0;
    data_size = 4 * this->start_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _start_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float end = 3;
  {
    int data_size = 0;
    data_size = 4 * this->end_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _end_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stadium::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Stadium)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Stadium* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Stadium>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Stadium)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Stadium)
    MergeFrom(*source);
  }
}

void Stadium::MergeFrom(const Stadium& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Stadium)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  start_.MergeFrom(from.start_);
  end_.MergeFrom(from.end_);
  if (from.has_base()) {
    mutable_base()->::xviz::PrimitiveBase::MergeFrom(from.base());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void Stadium::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Stadium)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stadium::CopyFrom(const Stadium& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Stadium)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stadium::IsInitialized() const {

  return true;
}

void Stadium::Swap(Stadium* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stadium::InternalSwap(Stadium* other) {
  std::swap(base_, other->base_);
  start_.UnsafeArenaSwap(&other->start_);
  end_.UnsafeArenaSwap(&other->end_);
  std::swap(radius_, other->radius_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stadium::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stadium_descriptor_;
  metadata.reflection = Stadium_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stadium

// optional .xviz.PrimitiveBase base = 1;
bool Stadium::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void Stadium::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::xviz::PrimitiveBase& Stadium::base() const {
  // @@protoc_insertion_point(field_get:xviz.Stadium.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::xviz::PrimitiveBase* Stadium::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::xviz::PrimitiveBase;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Stadium.base)
  return base_;
}
::xviz::PrimitiveBase* Stadium::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Stadium.base)
  
  ::xviz::PrimitiveBase* temp = base_;
  base_ = NULL;
  return temp;
}
void Stadium::set_allocated_base(::xviz::PrimitiveBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Stadium.base)
}

// repeated float start = 2;
int Stadium::start_size() const {
  return start_.size();
}
void Stadium::clear_start() {
  start_.Clear();
}
 float Stadium::start(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Stadium.start)
  return start_.Get(index);
}
 void Stadium::set_start(int index, float value) {
  start_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Stadium.start)
}
 void Stadium::add_start(float value) {
  start_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Stadium.start)
}
 const ::google::protobuf::RepeatedField< float >&
Stadium::start() const {
  // @@protoc_insertion_point(field_list:xviz.Stadium.start)
  return start_;
}
 ::google::protobuf::RepeatedField< float >*
Stadium::mutable_start() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Stadium.start)
  return &start_;
}

// repeated float end = 3;
int Stadium::end_size() const {
  return end_.size();
}
void Stadium::clear_end() {
  end_.Clear();
}
 float Stadium::end(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Stadium.end)
  return end_.Get(index);
}
 void Stadium::set_end(int index, float value) {
  end_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Stadium.end)
}
 void Stadium::add_end(float value) {
  end_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Stadium.end)
}
 const ::google::protobuf::RepeatedField< float >&
Stadium::end() const {
  // @@protoc_insertion_point(field_list:xviz.Stadium.end)
  return end_;
}
 ::google::protobuf::RepeatedField< float >*
Stadium::mutable_end() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Stadium.end)
  return &end_;
}

// optional float radius = 4;
void Stadium::clear_radius() {
  radius_ = 0;
}
 float Stadium::radius() const {
  // @@protoc_insertion_point(field_get:xviz.Stadium.radius)
  return radius_;
}
 void Stadium::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:xviz.Stadium.radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Text::kBaseFieldNumber;
const int Text::kPositionFieldNumber;
const int Text::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Text::Text()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Text)
}

void Text::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::xviz::PrimitiveBase*>(&::xviz::PrimitiveBase::default_instance());
}

Text::Text(const Text& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Text)
}

void Text::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  base_ = NULL;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:xviz.Text)
  SharedDtor();
}

void Text::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete base_;
  }
}

void Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Text::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Text_descriptor_;
}

const Text& Text::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_primitives_2eproto();
  return *default_instance_;
}

Text* Text::default_instance_ = NULL;

Text* Text::New(::google::protobuf::Arena* arena) const {
  Text* n = new Text;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Text)
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_.Clear();
}

bool Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Text)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .xviz.PrimitiveBase base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // repeated float position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_position())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (tag == 26) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.Text.text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Text)
  return false;
#undef DO_
}

void Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Text)
  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // repeated float position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_cached_byte_size_);
  }
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->position(i), output);
  }

  // optional string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Text.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Text)
}

::google::protobuf::uint8* Text::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Text)
  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, false, target);
  }

  // repeated float position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _position_cached_byte_size_, target);
  }
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->position(i), target);
  }

  // optional string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Text.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Text)
  return target;
}

int Text::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Text)
  int total_size = 0;

  // optional .xviz.PrimitiveBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // repeated float position = 2;
  {
    int data_size = 0;
    data_size = 4 * this->position_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Text::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Text)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Text* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Text>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Text)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Text)
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Text)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  position_.MergeFrom(from.position_);
  if (from.has_base()) {
    mutable_base()->::xviz::PrimitiveBase::MergeFrom(from.base());
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void Text::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {

  return true;
}

void Text::Swap(Text* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Text::InternalSwap(Text* other) {
  std::swap(base_, other->base_);
  position_.UnsafeArenaSwap(&other->position_);
  text_.Swap(&other->text_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Text::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Text_descriptor_;
  metadata.reflection = Text_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Text

// optional .xviz.PrimitiveBase base = 1;
bool Text::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void Text::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::xviz::PrimitiveBase& Text::base() const {
  // @@protoc_insertion_point(field_get:xviz.Text.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::xviz::PrimitiveBase* Text::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::xviz::PrimitiveBase;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Text.base)
  return base_;
}
::xviz::PrimitiveBase* Text::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Text.base)
  
  ::xviz::PrimitiveBase* temp = base_;
  base_ = NULL;
  return temp;
}
void Text::set_allocated_base(::xviz::PrimitiveBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Text.base)
}

// repeated float position = 2;
int Text::position_size() const {
  return position_.size();
}
void Text::clear_position() {
  position_.Clear();
}
 float Text::position(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Text.position)
  return position_.Get(index);
}
 void Text::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Text.position)
}
 void Text::add_position(float value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Text.position)
}
 const ::google::protobuf::RepeatedField< float >&
Text::position() const {
  // @@protoc_insertion_point(field_list:xviz.Text.position)
  return position_;
}
 ::google::protobuf::RepeatedField< float >*
Text::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Text.position)
  return &position_;
}

// optional string text = 3;
void Text::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Text::text() const {
  // @@protoc_insertion_point(field_get:xviz.Text.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Text::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Text.text)
}
 void Text::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Text.text)
}
 void Text::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Text.text)
}
 ::std::string* Text::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Text.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Text::release_text() {
  // @@protoc_insertion_point(field_release:xviz.Text.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Text::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:xviz.Text.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

// @@protoc_insertion_point(global_scope)
