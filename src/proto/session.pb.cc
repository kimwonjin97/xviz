// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xviz {

namespace {

const ::google::protobuf::Descriptor* Start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Start_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Start_MessageFormat_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TransformLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateUpdate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StateUpdate_UpdateType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TransformLogDone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformLogDone_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformPointInTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformPointInTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reconfigure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reconfigure_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Reconfigure_UpdateType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Metadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metadata_StreamsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Metadata_CamerasEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Metadata_StreamAliasesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Metadata_UiConfigEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamMetadata_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StreamMetadata_Category_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StreamMetadata_ScalarType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StreamMetadata_PrimitiveType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StreamMetadata_UIPrimitiveType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StreamMetadata_AnnotationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StreamMetadata_CoordinateType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CameraInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIPanelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIPanelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_session_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_session_2eproto() {
  protobuf_AddDesc_session_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "session.proto");
  GOOGLE_CHECK(file != NULL);
  Start_descriptor_ = file->message_type(0);
  static const int Start_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Start, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Start, profile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Start, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Start, message_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Start, log_),
  };
  Start_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Start_descriptor_,
      Start::default_instance_,
      Start_offsets_,
      -1,
      -1,
      -1,
      sizeof(Start),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Start, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Start, _is_default_instance_));
  Start_MessageFormat_descriptor_ = Start_descriptor_->enum_type(0);
  TransformLog_descriptor_ = file->message_type(1);
  static const int TransformLog_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformLog, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformLog, start_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformLog, end_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformLog, desired_streams_),
  };
  TransformLog_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransformLog_descriptor_,
      TransformLog::default_instance_,
      TransformLog_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransformLog),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformLog, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformLog, _is_default_instance_));
  StateUpdate_descriptor_ = file->message_type(2);
  static const int StateUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateUpdate, update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateUpdate, updates_),
  };
  StateUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StateUpdate_descriptor_,
      StateUpdate::default_instance_,
      StateUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(StateUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateUpdate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateUpdate, _is_default_instance_));
  StateUpdate_UpdateType_descriptor_ = StateUpdate_descriptor_->enum_type(0);
  TransformLogDone_descriptor_ = file->message_type(3);
  static const int TransformLogDone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformLogDone, id_),
  };
  TransformLogDone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransformLogDone_descriptor_,
      TransformLogDone::default_instance_,
      TransformLogDone_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransformLogDone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformLogDone, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformLogDone, _is_default_instance_));
  TransformPointInTime_descriptor_ = file->message_type(4);
  static const int TransformPointInTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformPointInTime, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformPointInTime, query_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformPointInTime, desired_streams_),
  };
  TransformPointInTime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransformPointInTime_descriptor_,
      TransformPointInTime::default_instance_,
      TransformPointInTime_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransformPointInTime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformPointInTime, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformPointInTime, _is_default_instance_));
  Reconfigure_descriptor_ = file->message_type(5);
  static const int Reconfigure_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reconfigure, update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reconfigure, config_update_),
  };
  Reconfigure_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Reconfigure_descriptor_,
      Reconfigure::default_instance_,
      Reconfigure_offsets_,
      -1,
      -1,
      -1,
      sizeof(Reconfigure),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reconfigure, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reconfigure, _is_default_instance_));
  Reconfigure_UpdateType_descriptor_ = Reconfigure_descriptor_->enum_type(0);
  Metadata_descriptor_ = file->message_type(6);
  static const int Metadata_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, streams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, cameras_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, stream_aliases_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, ui_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, log_info_),
  };
  Metadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Metadata_descriptor_,
      Metadata::default_instance_,
      Metadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(Metadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _is_default_instance_));
  Metadata_StreamsEntry_descriptor_ = Metadata_descriptor_->nested_type(0);
  Metadata_CamerasEntry_descriptor_ = Metadata_descriptor_->nested_type(1);
  Metadata_StreamAliasesEntry_descriptor_ = Metadata_descriptor_->nested_type(2);
  Metadata_UiConfigEntry_descriptor_ = Metadata_descriptor_->nested_type(3);
  Error_descriptor_ = file->message_type(7);
  static const int Error_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, message_),
  };
  Error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      -1,
      -1,
      -1,
      sizeof(Error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _is_default_instance_));
  StreamMetadata_descriptor_ = file->message_type(8);
  static const int StreamMetadata_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMetadata, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMetadata, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMetadata, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMetadata, scalar_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMetadata, primitive_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMetadata, ui_primitive_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMetadata, annotation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMetadata, stream_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMetadata, style_classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMetadata, coordinate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMetadata, transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMetadata, transform_callback_),
  };
  StreamMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamMetadata_descriptor_,
      StreamMetadata::default_instance_,
      StreamMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(StreamMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMetadata, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMetadata, _is_default_instance_));
  StreamMetadata_Category_descriptor_ = StreamMetadata_descriptor_->enum_type(0);
  StreamMetadata_ScalarType_descriptor_ = StreamMetadata_descriptor_->enum_type(1);
  StreamMetadata_PrimitiveType_descriptor_ = StreamMetadata_descriptor_->enum_type(2);
  StreamMetadata_UIPrimitiveType_descriptor_ = StreamMetadata_descriptor_->enum_type(3);
  StreamMetadata_AnnotationType_descriptor_ = StreamMetadata_descriptor_->enum_type(4);
  StreamMetadata_CoordinateType_descriptor_ = StreamMetadata_descriptor_->enum_type(5);
  CameraInfo_descriptor_ = file->message_type(9);
  static const int CameraInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, human_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, vehicle_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, vehicle_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, pixel_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, pixel_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, rectification_projection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, gl_projection_),
  };
  CameraInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CameraInfo_descriptor_,
      CameraInfo::default_instance_,
      CameraInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(CameraInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraInfo, _is_default_instance_));
  UIPanelInfo_descriptor_ = file->message_type(10);
  static const int UIPanelInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIPanelInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIPanelInfo, needed_streams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIPanelInfo, config_),
  };
  UIPanelInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UIPanelInfo_descriptor_,
      UIPanelInfo::default_instance_,
      UIPanelInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(UIPanelInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIPanelInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIPanelInfo, _is_default_instance_));
  LogInfo_descriptor_ = file->message_type(11);
  static const int LogInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInfo, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInfo, end_time_),
  };
  LogInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogInfo_descriptor_,
      LogInfo::default_instance_,
      LogInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInfo, _is_default_instance_));
  SessionType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_session_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Start_descriptor_, &Start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransformLog_descriptor_, &TransformLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StateUpdate_descriptor_, &StateUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransformLogDone_descriptor_, &TransformLogDone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransformPointInTime_descriptor_, &TransformPointInTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Reconfigure_descriptor_, &Reconfigure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Metadata_descriptor_, &Metadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Metadata_StreamsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::xviz::StreamMetadata,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Metadata_StreamsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Metadata_CamerasEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::xviz::CameraInfo,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Metadata_CamerasEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Metadata_StreamAliasesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Metadata_StreamAliasesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Metadata_UiConfigEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::xviz::UIPanelInfo,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Metadata_UiConfigEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamMetadata_descriptor_, &StreamMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CameraInfo_descriptor_, &CameraInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UIPanelInfo_descriptor_, &UIPanelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogInfo_descriptor_, &LogInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_session_2eproto() {
  delete Start::default_instance_;
  delete Start_reflection_;
  delete TransformLog::default_instance_;
  delete TransformLog_reflection_;
  delete StateUpdate::default_instance_;
  delete StateUpdate_reflection_;
  delete TransformLogDone::default_instance_;
  delete TransformLogDone_reflection_;
  delete TransformPointInTime::default_instance_;
  delete TransformPointInTime_reflection_;
  delete Reconfigure::default_instance_;
  delete Reconfigure_reflection_;
  delete Metadata::default_instance_;
  delete Metadata_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
  delete StreamMetadata::default_instance_;
  delete StreamMetadata_reflection_;
  delete CameraInfo::default_instance_;
  delete CameraInfo_reflection_;
  delete UIPanelInfo::default_instance_;
  delete UIPanelInfo_reflection_;
  delete LogInfo::default_instance_;
  delete LogInfo_reflection_;
}

void protobuf_AddDesc_session_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_session_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fstruct_2eproto();
  ::xviz::protobuf_AddDesc_core_2eproto();
  ::xviz::protobuf_AddDesc_options_2eproto();
  ::xviz::protobuf_AddDesc_style_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsession.proto\022\004xviz\032\034google/protobuf/s"
    "truct.proto\032\ncore.proto\032\roptions.proto\032\013"
    "style.proto\"\356\001\n\005Start\022\017\n\007version\030\001 \001(\t\022\017"
    "\n\007profile\030\002 \001(\t\022\'\n\014session_type\030\003 \001(\0162\021."
    "xviz.SessionType\0221\n\016message_format\030\004 \001(\016"
    "2\031.xviz.Start.MessageFormat\022\013\n\003log\030\005 \001(\t"
    "\"G\n\rMessageFormat\022 \n\034START_MESSAGE_FORMA"
    "T_INVALID\020\000\022\010\n\004JSON\020\001\022\n\n\006BINARY\020\002:\021\302\273\032\rs"
    "ession/start\"~\n\014TransformLog\022\n\n\002id\030\001 \001(\t"
    "\022\027\n\017start_timestamp\030\002 \001(\001\022\025\n\rend_timesta"
    "mp\030\003 \001(\001\022\027\n\017desired_streams\030\004 \003(\t:\031\302\273\032\025s"
    "ession/transform_log\"\363\001\n\013StateUpdate\0221\n\013"
    "update_type\030\001 \001(\0162\034.xviz.StateUpdate.Upd"
    "ateType\022 \n\007updates\030\002 \003(\0132\017.xviz.StreamSe"
    "t\"u\n\nUpdateType\022$\n STATE_UPDATE_UPDATE_T"
    "YPE_INVALID\020\000\022\014\n\010SNAPSHOT\020\001\022\017\n\013INCREMENT"
    "AL\020\002\022\022\n\016COMPLETE_STATE\020\003\022\016\n\nPERSISTENT\020\004"
    ":\030\302\273\032\024session/state_update\">\n\020TransformL"
    "ogDone\022\n\n\002id\030\001 \001(\t:\036\302\273\032\032session/transfor"
    "m_log_done\"y\n\024TransformPointInTime\022\n\n\002id"
    "\030\001 \001(\t\022\027\n\017query_timestamp\030\002 \001(\001\022\027\n\017desir"
    "ed_streams\030\003 \003(\t:#\302\273\032\037session/transform_"
    "point_in_time\"\321\001\n\013Reconfigure\0221\n\013update_"
    "type\030\001 \001(\0162\034.xviz.Reconfigure.UpdateType"
    "\022.\n\rconfig_update\030\002 \001(\0132\027.google.protobu"
    "f.Struct\"F\n\nUpdateType\022#\n\037RECONFIGURE_UP"
    "DATE_TYPE_INVALID\020\000\022\t\n\005DELTA\020\001\022\010\n\004FULL\020\002"
    ":\027\302\273\032\023session/reconfigure\"\234\004\n\010Metadata\022\017"
    "\n\007version\030\001 \001(\t\022,\n\007streams\030\002 \003(\0132\033.xviz."
    "Metadata.StreamsEntry\022,\n\007cameras\030\003 \003(\0132\033"
    ".xviz.Metadata.CamerasEntry\0229\n\016stream_al"
    "iases\030\004 \003(\0132!.xviz.Metadata.StreamAliase"
    "sEntry\022/\n\tui_config\030\005 \003(\0132\034.xviz.Metadat"
    "a.UiConfigEntry\022\037\n\010log_info\030\006 \001(\0132\r.xviz"
    ".LogInfo\032D\n\014StreamsEntry\022\013\n\003key\030\001 \001(\t\022#\n"
    "\005value\030\002 \001(\0132\024.xviz.StreamMetadata:\0028\001\032@"
    "\n\014CamerasEntry\022\013\n\003key\030\001 \001(\t\022\037\n\005value\030\002 \001"
    "(\0132\020.xviz.CameraInfo:\0028\001\0324\n\022StreamAliase"
    "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032B"
    "\n\rUiConfigEntry\022\013\n\003key\030\001 \001(\t\022 \n\005value\030\002 "
    "\001(\0132\021.xviz.UIPanelInfo:\0028\001:\024\302\273\032\020session/"
    "metadata\"+\n\005Error\022\017\n\007message\030\001 \001(\t:\021\302\273\032\r"
    "session/error\"\340\t\n\016StreamMetadata\022\016\n\006sour"
    "ce\030\001 \001(\t\022\r\n\005units\030\002 \001(\t\022/\n\010category\030\003 \001("
    "\0162\035.xviz.StreamMetadata.Category\0224\n\013scal"
    "ar_type\030\004 \001(\0162\037.xviz.StreamMetadata.Scal"
    "arType\022:\n\016primitive_type\030\005 \001(\0162\".xviz.St"
    "reamMetadata.PrimitiveType\022\?\n\021ui_primiti"
    "ve_type\030\006 \001(\0162$.xviz.StreamMetadata.UIPr"
    "imitiveType\022<\n\017annotation_type\030\007 \001(\0162#.x"
    "viz.StreamMetadata.AnnotationType\022,\n\014str"
    "eam_style\030\010 \001(\0132\026.xviz.StyleStreamValue\022"
    "\'\n\rstyle_classes\030\t \003(\0132\020.xviz.StyleClass"
    "\0227\n\ncoordinate\030\n \001(\0162#.xviz.StreamMetada"
    "ta.CoordinateType\022\021\n\ttransform\030\013 \003(\001\022\032\n\022"
    "transform_callback\030\014 \001(\t\"\237\001\n\010Category\022$\n"
    " STREAM_METADATA_CATEGORY_INVALID\020\000\022\r\n\tP"
    "RIMITIVE\020\001\022\017\n\013TIME_SERIES\020\002\022\014\n\010VARIABLE\020"
    "\003\022\016\n\nANNOTATION\020\004\022\023\n\017FUTURE_INSTANCE\020\005\022\010"
    "\n\004POSE\020\006\022\020\n\014UI_PRIMITIVE\020\007\"a\n\nScalarType"
    "\022\'\n#STREAM_METADATA_SCALAR_TYPE_INVALID\020"
    "\000\022\t\n\005FLOAT\020\001\022\t\n\005INT32\020\002\022\n\n\006STRING\020\003\022\010\n\004B"
    "OOL\020\004\"\217\001\n\rPrimitiveType\022*\n&STREAM_METADA"
    "TA_PRIMITIVE_TYPE_INVALID\020\000\022\n\n\006CIRCLE\020\001\022"
    "\t\n\005IMAGE\020\002\022\t\n\005POINT\020\003\022\013\n\007POLYGON\020\004\022\014\n\010PO"
    "LYLINE\020\005\022\013\n\007STADIUM\020\006\022\010\n\004TEXT\020\007\"O\n\017UIPri"
    "mitiveType\022-\n)STREAM_METADATA_UI_PRIMITI"
    "VE_TYPE_INVALID\020\000\022\r\n\tTREETABLE\020\001\"I\n\016Anno"
    "tationType\022+\n\'STREAM_METADATA_ANNOTATION"
    "_TYPE_INVALID\020\000\022\n\n\006VISUAL\020\001\"~\n\016Coordinat"
    "eType\022+\n\'STREAM_METADATA_COORDINATE_TYPE"
    "_INVALID\020\000\022\016\n\nGEOGRAPHIC\020\001\022\014\n\010IDENTITY\020\002"
    "\022\013\n\007DYNAMIC\020\003\022\024\n\020VEHICLE_RELATIVE\020\004:\033\302\273\032"
    "\027session/stream_metadata\"\344\001\n\nCameraInfo\022"
    "\022\n\nhuman_name\030\001 \001(\t\022\016\n\006source\030\002 \001(\t\022\030\n\020v"
    "ehicle_position\030\003 \003(\001\022\033\n\023vehicle_orienta"
    "tion\030\004 \003(\001\022\023\n\013pixel_width\030\005 \001(\001\022\024\n\014pixel"
    "_height\030\006 \001(\001\022 \n\030rectification_projectio"
    "n\030\007 \003(\001\022\025\n\rgl_projection\030\010 \003(\001:\027\302\273\032\023sess"
    "ion/camera_info\"w\n\013UIPanelInfo\022\014\n\004name\030\001"
    " \001(\t\022\026\n\016needed_streams\030\002 \003(\t\022\'\n\006config\030\003"
    " \001(\0132\027.google.protobuf.Struct:\031\302\273\032\025sessi"
    "on/ui_panel_info\"E\n\007LogInfo\022\022\n\nstart_tim"
    "e\030\001 \001(\001\022\020\n\010end_time\030\002 \001(\001:\024\302\273\032\020session/l"
    "og_info*N\n\013SessionType\022\030\n\024SESSION_TYPE_I"
    "NVALID\020\000\022\010\n\004LIVE\020\001\022\007\n\003LOG\020\002\022\022\n\016UNBUFFERE"
    "D_LOG\020\003B4\n\013com.xviz.v2B\014SessionProtoP\001Z\004"
    "v2pb\242\002\004XVIZ\252\002\007xviz.V2b\006proto3", 3509);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "session.proto", &protobuf_RegisterTypes);
  Start::default_instance_ = new Start();
  TransformLog::default_instance_ = new TransformLog();
  StateUpdate::default_instance_ = new StateUpdate();
  TransformLogDone::default_instance_ = new TransformLogDone();
  TransformPointInTime::default_instance_ = new TransformPointInTime();
  Reconfigure::default_instance_ = new Reconfigure();
  Metadata::default_instance_ = new Metadata();
  Error::default_instance_ = new Error();
  StreamMetadata::default_instance_ = new StreamMetadata();
  CameraInfo::default_instance_ = new CameraInfo();
  UIPanelInfo::default_instance_ = new UIPanelInfo();
  LogInfo::default_instance_ = new LogInfo();
  Start::default_instance_->InitAsDefaultInstance();
  TransformLog::default_instance_->InitAsDefaultInstance();
  StateUpdate::default_instance_->InitAsDefaultInstance();
  TransformLogDone::default_instance_->InitAsDefaultInstance();
  TransformPointInTime::default_instance_->InitAsDefaultInstance();
  Reconfigure::default_instance_->InitAsDefaultInstance();
  Metadata::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  StreamMetadata::default_instance_->InitAsDefaultInstance();
  CameraInfo::default_instance_->InitAsDefaultInstance();
  UIPanelInfo::default_instance_->InitAsDefaultInstance();
  LogInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_session_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_session_2eproto {
  StaticDescriptorInitializer_session_2eproto() {
    protobuf_AddDesc_session_2eproto();
  }
} static_descriptor_initializer_session_2eproto_;
const ::google::protobuf::EnumDescriptor* SessionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionType_descriptor_;
}
bool SessionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Start_MessageFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Start_MessageFormat_descriptor_;
}
bool Start_MessageFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Start_MessageFormat Start::START_MESSAGE_FORMAT_INVALID;
const Start_MessageFormat Start::JSON;
const Start_MessageFormat Start::BINARY;
const Start_MessageFormat Start::MessageFormat_MIN;
const Start_MessageFormat Start::MessageFormat_MAX;
const int Start::MessageFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Start::kVersionFieldNumber;
const int Start::kProfileFieldNumber;
const int Start::kSessionTypeFieldNumber;
const int Start::kMessageFormatFieldNumber;
const int Start::kLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Start::Start()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Start)
}

void Start::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Start::Start(const Start& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Start)
}

void Start::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_type_ = 0;
  message_format_ = 0;
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Start::~Start() {
  // @@protoc_insertion_point(destructor:xviz.Start)
  SharedDtor();
}

void Start::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Start_descriptor_;
}

const Start& Start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2eproto();
  return *default_instance_;
}

Start* Start::default_instance_ = NULL;

Start* Start::New(::google::protobuf::Arena* arena) const {
  Start* n = new Start;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Start::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Start)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Start, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Start*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(session_type_, message_format_);
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Start)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.Start.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_profile;
        break;
      }

      // optional string profile = 2;
      case 2: {
        if (tag == 18) {
         parse_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->profile().data(), this->profile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.Start.profile"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_type;
        break;
      }

      // optional .xviz.SessionType session_type = 3;
      case 3: {
        if (tag == 24) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::xviz::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_message_format;
        break;
      }

      // optional .xviz.Start.MessageFormat message_format = 4;
      case 4: {
        if (tag == 32) {
         parse_message_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_message_format(static_cast< ::xviz::Start_MessageFormat >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_log;
        break;
      }

      // optional string log = 5;
      case 5: {
        if (tag == 42) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.Start.log"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Start)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Start)
  return false;
#undef DO_
}

void Start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Start)
  // optional string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Start.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional string profile = 2;
  if (this->profile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->profile().data(), this->profile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Start.profile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->profile(), output);
  }

  // optional .xviz.SessionType session_type = 3;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->session_type(), output);
  }

  // optional .xviz.Start.MessageFormat message_format = 4;
  if (this->message_format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->message_format(), output);
  }

  // optional string log = 5;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Start.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->log(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Start)
}

::google::protobuf::uint8* Start::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Start)
  // optional string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Start.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional string profile = 2;
  if (this->profile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->profile().data(), this->profile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Start.profile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->profile(), target);
  }

  // optional .xviz.SessionType session_type = 3;
  if (this->session_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->session_type(), target);
  }

  // optional .xviz.Start.MessageFormat message_format = 4;
  if (this->message_format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->message_format(), target);
  }

  // optional string log = 5;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Start.log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->log(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Start)
  return target;
}

int Start::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Start)
  int total_size = 0;

  // optional string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional string profile = 2;
  if (this->profile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->profile());
  }

  // optional .xviz.SessionType session_type = 3;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  // optional .xviz.Start.MessageFormat message_format = 4;
  if (this->message_format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_format());
  }

  // optional string log = 5;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Start::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Start)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Start* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Start>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Start)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Start)
    MergeFrom(*source);
  }
}

void Start::MergeFrom(const Start& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Start)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.profile().size() > 0) {

    profile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.profile_);
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
  if (from.message_format() != 0) {
    set_message_format(from.message_format());
  }
  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
}

void Start::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Start::CopyFrom(const Start& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Start::IsInitialized() const {

  return true;
}

void Start::Swap(Start* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Start::InternalSwap(Start* other) {
  version_.Swap(&other->version_);
  profile_.Swap(&other->profile_);
  std::swap(session_type_, other->session_type_);
  std::swap(message_format_, other->message_format_);
  log_.Swap(&other->log_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Start_descriptor_;
  metadata.reflection = Start_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Start

// optional string version = 1;
void Start::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Start::version() const {
  // @@protoc_insertion_point(field_get:xviz.Start.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Start::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Start.version)
}
 void Start::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Start.version)
}
 void Start::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Start.version)
}
 ::std::string* Start::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Start.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Start::release_version() {
  // @@protoc_insertion_point(field_release:xviz.Start.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Start::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:xviz.Start.version)
}

// optional string profile = 2;
void Start::clear_profile() {
  profile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Start::profile() const {
  // @@protoc_insertion_point(field_get:xviz.Start.profile)
  return profile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Start::set_profile(const ::std::string& value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Start.profile)
}
 void Start::set_profile(const char* value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Start.profile)
}
 void Start::set_profile(const char* value, size_t size) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Start.profile)
}
 ::std::string* Start::mutable_profile() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Start.profile)
  return profile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Start::release_profile() {
  // @@protoc_insertion_point(field_release:xviz.Start.profile)
  
  return profile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Start::set_allocated_profile(::std::string* profile) {
  if (profile != NULL) {
    
  } else {
    
  }
  profile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profile);
  // @@protoc_insertion_point(field_set_allocated:xviz.Start.profile)
}

// optional .xviz.SessionType session_type = 3;
void Start::clear_session_type() {
  session_type_ = 0;
}
 ::xviz::SessionType Start::session_type() const {
  // @@protoc_insertion_point(field_get:xviz.Start.session_type)
  return static_cast< ::xviz::SessionType >(session_type_);
}
 void Start::set_session_type(::xviz::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:xviz.Start.session_type)
}

// optional .xviz.Start.MessageFormat message_format = 4;
void Start::clear_message_format() {
  message_format_ = 0;
}
 ::xviz::Start_MessageFormat Start::message_format() const {
  // @@protoc_insertion_point(field_get:xviz.Start.message_format)
  return static_cast< ::xviz::Start_MessageFormat >(message_format_);
}
 void Start::set_message_format(::xviz::Start_MessageFormat value) {
  
  message_format_ = value;
  // @@protoc_insertion_point(field_set:xviz.Start.message_format)
}

// optional string log = 5;
void Start::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Start::log() const {
  // @@protoc_insertion_point(field_get:xviz.Start.log)
  return log_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Start::set_log(const ::std::string& value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Start.log)
}
 void Start::set_log(const char* value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Start.log)
}
 void Start::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Start.log)
}
 ::std::string* Start::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Start.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Start::release_log() {
  // @@protoc_insertion_point(field_release:xviz.Start.log)
  
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Start::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:xviz.Start.log)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformLog::kIdFieldNumber;
const int TransformLog::kStartTimestampFieldNumber;
const int TransformLog::kEndTimestampFieldNumber;
const int TransformLog::kDesiredStreamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformLog::TransformLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.TransformLog)
}

void TransformLog::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TransformLog::TransformLog(const TransformLog& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.TransformLog)
}

void TransformLog::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_timestamp_ = 0;
  end_timestamp_ = 0;
}

TransformLog::~TransformLog() {
  // @@protoc_insertion_point(destructor:xviz.TransformLog)
  SharedDtor();
}

void TransformLog::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransformLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformLog_descriptor_;
}

const TransformLog& TransformLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2eproto();
  return *default_instance_;
}

TransformLog* TransformLog::default_instance_ = NULL;

TransformLog* TransformLog::New(::google::protobuf::Arena* arena) const {
  TransformLog* n = new TransformLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformLog::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.TransformLog)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TransformLog, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransformLog*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_timestamp_, end_timestamp_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  desired_streams_.Clear();
}

bool TransformLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.TransformLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.TransformLog.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_start_timestamp;
        break;
      }

      // optional double start_timestamp = 2;
      case 2: {
        if (tag == 17) {
         parse_start_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_end_timestamp;
        break;
      }

      // optional double end_timestamp = 3;
      case 3: {
        if (tag == 25) {
         parse_end_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_desired_streams;
        break;
      }

      // repeated string desired_streams = 4;
      case 4: {
        if (tag == 34) {
         parse_desired_streams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_desired_streams()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desired_streams(this->desired_streams_size() - 1).data(),
            this->desired_streams(this->desired_streams_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.TransformLog.desired_streams"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_desired_streams;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.TransformLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.TransformLog)
  return false;
#undef DO_
}

void TransformLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.TransformLog)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TransformLog.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double start_timestamp = 2;
  if (this->start_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_timestamp(), output);
  }

  // optional double end_timestamp = 3;
  if (this->end_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->end_timestamp(), output);
  }

  // repeated string desired_streams = 4;
  for (int i = 0; i < this->desired_streams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desired_streams(i).data(), this->desired_streams(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TransformLog.desired_streams");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desired_streams(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.TransformLog)
}

::google::protobuf::uint8* TransformLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.TransformLog)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TransformLog.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double start_timestamp = 2;
  if (this->start_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_timestamp(), target);
  }

  // optional double end_timestamp = 3;
  if (this->end_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->end_timestamp(), target);
  }

  // repeated string desired_streams = 4;
  for (int i = 0; i < this->desired_streams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desired_streams(i).data(), this->desired_streams(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TransformLog.desired_streams");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->desired_streams(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.TransformLog)
  return target;
}

int TransformLog::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.TransformLog)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional double start_timestamp = 2;
  if (this->start_timestamp() != 0) {
    total_size += 1 + 8;
  }

  // optional double end_timestamp = 3;
  if (this->end_timestamp() != 0) {
    total_size += 1 + 8;
  }

  // repeated string desired_streams = 4;
  total_size += 1 * this->desired_streams_size();
  for (int i = 0; i < this->desired_streams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->desired_streams(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.TransformLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TransformLog* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.TransformLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.TransformLog)
    MergeFrom(*source);
  }
}

void TransformLog::MergeFrom(const TransformLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.TransformLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  desired_streams_.MergeFrom(from.desired_streams_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.start_timestamp() != 0) {
    set_start_timestamp(from.start_timestamp());
  }
  if (from.end_timestamp() != 0) {
    set_end_timestamp(from.end_timestamp());
  }
}

void TransformLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.TransformLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformLog::CopyFrom(const TransformLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.TransformLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformLog::IsInitialized() const {

  return true;
}

void TransformLog::Swap(TransformLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformLog::InternalSwap(TransformLog* other) {
  id_.Swap(&other->id_);
  std::swap(start_timestamp_, other->start_timestamp_);
  std::swap(end_timestamp_, other->end_timestamp_);
  desired_streams_.UnsafeArenaSwap(&other->desired_streams_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformLog_descriptor_;
  metadata.reflection = TransformLog_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformLog

// optional string id = 1;
void TransformLog::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TransformLog::id() const {
  // @@protoc_insertion_point(field_get:xviz.TransformLog.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransformLog::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.TransformLog.id)
}
 void TransformLog::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.TransformLog.id)
}
 void TransformLog::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.TransformLog.id)
}
 ::std::string* TransformLog::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:xviz.TransformLog.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransformLog::release_id() {
  // @@protoc_insertion_point(field_release:xviz.TransformLog.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransformLog::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:xviz.TransformLog.id)
}

// optional double start_timestamp = 2;
void TransformLog::clear_start_timestamp() {
  start_timestamp_ = 0;
}
 double TransformLog::start_timestamp() const {
  // @@protoc_insertion_point(field_get:xviz.TransformLog.start_timestamp)
  return start_timestamp_;
}
 void TransformLog::set_start_timestamp(double value) {
  
  start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:xviz.TransformLog.start_timestamp)
}

// optional double end_timestamp = 3;
void TransformLog::clear_end_timestamp() {
  end_timestamp_ = 0;
}
 double TransformLog::end_timestamp() const {
  // @@protoc_insertion_point(field_get:xviz.TransformLog.end_timestamp)
  return end_timestamp_;
}
 void TransformLog::set_end_timestamp(double value) {
  
  end_timestamp_ = value;
  // @@protoc_insertion_point(field_set:xviz.TransformLog.end_timestamp)
}

// repeated string desired_streams = 4;
int TransformLog::desired_streams_size() const {
  return desired_streams_.size();
}
void TransformLog::clear_desired_streams() {
  desired_streams_.Clear();
}
 const ::std::string& TransformLog::desired_streams(int index) const {
  // @@protoc_insertion_point(field_get:xviz.TransformLog.desired_streams)
  return desired_streams_.Get(index);
}
 ::std::string* TransformLog::mutable_desired_streams(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.TransformLog.desired_streams)
  return desired_streams_.Mutable(index);
}
 void TransformLog::set_desired_streams(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.TransformLog.desired_streams)
  desired_streams_.Mutable(index)->assign(value);
}
 void TransformLog::set_desired_streams(int index, const char* value) {
  desired_streams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.TransformLog.desired_streams)
}
 void TransformLog::set_desired_streams(int index, const char* value, size_t size) {
  desired_streams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.TransformLog.desired_streams)
}
 ::std::string* TransformLog::add_desired_streams() {
  // @@protoc_insertion_point(field_add_mutable:xviz.TransformLog.desired_streams)
  return desired_streams_.Add();
}
 void TransformLog::add_desired_streams(const ::std::string& value) {
  desired_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.TransformLog.desired_streams)
}
 void TransformLog::add_desired_streams(const char* value) {
  desired_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.TransformLog.desired_streams)
}
 void TransformLog::add_desired_streams(const char* value, size_t size) {
  desired_streams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.TransformLog.desired_streams)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransformLog::desired_streams() const {
  // @@protoc_insertion_point(field_list:xviz.TransformLog.desired_streams)
  return desired_streams_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TransformLog::mutable_desired_streams() {
  // @@protoc_insertion_point(field_mutable_list:xviz.TransformLog.desired_streams)
  return &desired_streams_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* StateUpdate_UpdateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateUpdate_UpdateType_descriptor_;
}
bool StateUpdate_UpdateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StateUpdate_UpdateType StateUpdate::STATE_UPDATE_UPDATE_TYPE_INVALID;
const StateUpdate_UpdateType StateUpdate::SNAPSHOT;
const StateUpdate_UpdateType StateUpdate::INCREMENTAL;
const StateUpdate_UpdateType StateUpdate::COMPLETE_STATE;
const StateUpdate_UpdateType StateUpdate::PERSISTENT;
const StateUpdate_UpdateType StateUpdate::UpdateType_MIN;
const StateUpdate_UpdateType StateUpdate::UpdateType_MAX;
const int StateUpdate::UpdateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateUpdate::kUpdateTypeFieldNumber;
const int StateUpdate::kUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateUpdate::StateUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.StateUpdate)
}

void StateUpdate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StateUpdate::StateUpdate(const StateUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.StateUpdate)
}

void StateUpdate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  update_type_ = 0;
}

StateUpdate::~StateUpdate() {
  // @@protoc_insertion_point(destructor:xviz.StateUpdate)
  SharedDtor();
}

void StateUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateUpdate_descriptor_;
}

const StateUpdate& StateUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2eproto();
  return *default_instance_;
}

StateUpdate* StateUpdate::default_instance_ = NULL;

StateUpdate* StateUpdate::New(::google::protobuf::Arena* arena) const {
  StateUpdate* n = new StateUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StateUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.StateUpdate)
  update_type_ = 0;
  updates_.Clear();
}

bool StateUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.StateUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .xviz.StateUpdate.UpdateType update_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_update_type(static_cast< ::xviz::StateUpdate_UpdateType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_updates;
        break;
      }

      // repeated .xviz.StreamSet updates = 2;
      case 2: {
        if (tag == 18) {
         parse_updates:
          DO_(input->IncrementRecursionDepth());
         parse_loop_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_updates;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.StateUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.StateUpdate)
  return false;
#undef DO_
}

void StateUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.StateUpdate)
  // optional .xviz.StateUpdate.UpdateType update_type = 1;
  if (this->update_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->update_type(), output);
  }

  // repeated .xviz.StreamSet updates = 2;
  for (unsigned int i = 0, n = this->updates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->updates(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.StateUpdate)
}

::google::protobuf::uint8* StateUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.StateUpdate)
  // optional .xviz.StateUpdate.UpdateType update_type = 1;
  if (this->update_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->update_type(), target);
  }

  // repeated .xviz.StreamSet updates = 2;
  for (unsigned int i = 0, n = this->updates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->updates(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.StateUpdate)
  return target;
}

int StateUpdate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.StateUpdate)
  int total_size = 0;

  // optional .xviz.StateUpdate.UpdateType update_type = 1;
  if (this->update_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_type());
  }

  // repeated .xviz.StreamSet updates = 2;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.StateUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StateUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StateUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.StateUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.StateUpdate)
    MergeFrom(*source);
  }
}

void StateUpdate::MergeFrom(const StateUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.StateUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  updates_.MergeFrom(from.updates_);
  if (from.update_type() != 0) {
    set_update_type(from.update_type());
  }
}

void StateUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.StateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateUpdate::CopyFrom(const StateUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.StateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateUpdate::IsInitialized() const {

  return true;
}

void StateUpdate::Swap(StateUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateUpdate::InternalSwap(StateUpdate* other) {
  std::swap(update_type_, other->update_type_);
  updates_.UnsafeArenaSwap(&other->updates_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StateUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateUpdate_descriptor_;
  metadata.reflection = StateUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StateUpdate

// optional .xviz.StateUpdate.UpdateType update_type = 1;
void StateUpdate::clear_update_type() {
  update_type_ = 0;
}
 ::xviz::StateUpdate_UpdateType StateUpdate::update_type() const {
  // @@protoc_insertion_point(field_get:xviz.StateUpdate.update_type)
  return static_cast< ::xviz::StateUpdate_UpdateType >(update_type_);
}
 void StateUpdate::set_update_type(::xviz::StateUpdate_UpdateType value) {
  
  update_type_ = value;
  // @@protoc_insertion_point(field_set:xviz.StateUpdate.update_type)
}

// repeated .xviz.StreamSet updates = 2;
int StateUpdate::updates_size() const {
  return updates_.size();
}
void StateUpdate::clear_updates() {
  updates_.Clear();
}
const ::xviz::StreamSet& StateUpdate::updates(int index) const {
  // @@protoc_insertion_point(field_get:xviz.StateUpdate.updates)
  return updates_.Get(index);
}
::xviz::StreamSet* StateUpdate::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.StateUpdate.updates)
  return updates_.Mutable(index);
}
::xviz::StreamSet* StateUpdate::add_updates() {
  // @@protoc_insertion_point(field_add:xviz.StateUpdate.updates)
  return updates_.Add();
}
::google::protobuf::RepeatedPtrField< ::xviz::StreamSet >*
StateUpdate::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:xviz.StateUpdate.updates)
  return &updates_;
}
const ::google::protobuf::RepeatedPtrField< ::xviz::StreamSet >&
StateUpdate::updates() const {
  // @@protoc_insertion_point(field_list:xviz.StateUpdate.updates)
  return updates_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformLogDone::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformLogDone::TransformLogDone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.TransformLogDone)
}

void TransformLogDone::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TransformLogDone::TransformLogDone(const TransformLogDone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.TransformLogDone)
}

void TransformLogDone::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TransformLogDone::~TransformLogDone() {
  // @@protoc_insertion_point(destructor:xviz.TransformLogDone)
  SharedDtor();
}

void TransformLogDone::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransformLogDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformLogDone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformLogDone_descriptor_;
}

const TransformLogDone& TransformLogDone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2eproto();
  return *default_instance_;
}

TransformLogDone* TransformLogDone::default_instance_ = NULL;

TransformLogDone* TransformLogDone::New(::google::protobuf::Arena* arena) const {
  TransformLogDone* n = new TransformLogDone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformLogDone::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.TransformLogDone)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TransformLogDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.TransformLogDone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.TransformLogDone.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.TransformLogDone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.TransformLogDone)
  return false;
#undef DO_
}

void TransformLogDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.TransformLogDone)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TransformLogDone.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.TransformLogDone)
}

::google::protobuf::uint8* TransformLogDone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.TransformLogDone)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TransformLogDone.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.TransformLogDone)
  return target;
}

int TransformLogDone::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.TransformLogDone)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformLogDone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.TransformLogDone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TransformLogDone* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformLogDone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.TransformLogDone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.TransformLogDone)
    MergeFrom(*source);
  }
}

void TransformLogDone::MergeFrom(const TransformLogDone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.TransformLogDone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void TransformLogDone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.TransformLogDone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformLogDone::CopyFrom(const TransformLogDone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.TransformLogDone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformLogDone::IsInitialized() const {

  return true;
}

void TransformLogDone::Swap(TransformLogDone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformLogDone::InternalSwap(TransformLogDone* other) {
  id_.Swap(&other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformLogDone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformLogDone_descriptor_;
  metadata.reflection = TransformLogDone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformLogDone

// optional string id = 1;
void TransformLogDone::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TransformLogDone::id() const {
  // @@protoc_insertion_point(field_get:xviz.TransformLogDone.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransformLogDone::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.TransformLogDone.id)
}
 void TransformLogDone::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.TransformLogDone.id)
}
 void TransformLogDone::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.TransformLogDone.id)
}
 ::std::string* TransformLogDone::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:xviz.TransformLogDone.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransformLogDone::release_id() {
  // @@protoc_insertion_point(field_release:xviz.TransformLogDone.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransformLogDone::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:xviz.TransformLogDone.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformPointInTime::kIdFieldNumber;
const int TransformPointInTime::kQueryTimestampFieldNumber;
const int TransformPointInTime::kDesiredStreamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformPointInTime::TransformPointInTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.TransformPointInTime)
}

void TransformPointInTime::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TransformPointInTime::TransformPointInTime(const TransformPointInTime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.TransformPointInTime)
}

void TransformPointInTime::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_timestamp_ = 0;
}

TransformPointInTime::~TransformPointInTime() {
  // @@protoc_insertion_point(destructor:xviz.TransformPointInTime)
  SharedDtor();
}

void TransformPointInTime::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransformPointInTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformPointInTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformPointInTime_descriptor_;
}

const TransformPointInTime& TransformPointInTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2eproto();
  return *default_instance_;
}

TransformPointInTime* TransformPointInTime::default_instance_ = NULL;

TransformPointInTime* TransformPointInTime::New(::google::protobuf::Arena* arena) const {
  TransformPointInTime* n = new TransformPointInTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformPointInTime::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.TransformPointInTime)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_timestamp_ = 0;
  desired_streams_.Clear();
}

bool TransformPointInTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.TransformPointInTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.TransformPointInTime.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_query_timestamp;
        break;
      }

      // optional double query_timestamp = 2;
      case 2: {
        if (tag == 17) {
         parse_query_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &query_timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_desired_streams;
        break;
      }

      // repeated string desired_streams = 3;
      case 3: {
        if (tag == 26) {
         parse_desired_streams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_desired_streams()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desired_streams(this->desired_streams_size() - 1).data(),
            this->desired_streams(this->desired_streams_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.TransformPointInTime.desired_streams"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_desired_streams;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.TransformPointInTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.TransformPointInTime)
  return false;
#undef DO_
}

void TransformPointInTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.TransformPointInTime)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TransformPointInTime.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double query_timestamp = 2;
  if (this->query_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->query_timestamp(), output);
  }

  // repeated string desired_streams = 3;
  for (int i = 0; i < this->desired_streams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desired_streams(i).data(), this->desired_streams(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TransformPointInTime.desired_streams");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desired_streams(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.TransformPointInTime)
}

::google::protobuf::uint8* TransformPointInTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.TransformPointInTime)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TransformPointInTime.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double query_timestamp = 2;
  if (this->query_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->query_timestamp(), target);
  }

  // repeated string desired_streams = 3;
  for (int i = 0; i < this->desired_streams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desired_streams(i).data(), this->desired_streams(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TransformPointInTime.desired_streams");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->desired_streams(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.TransformPointInTime)
  return target;
}

int TransformPointInTime::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.TransformPointInTime)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional double query_timestamp = 2;
  if (this->query_timestamp() != 0) {
    total_size += 1 + 8;
  }

  // repeated string desired_streams = 3;
  total_size += 1 * this->desired_streams_size();
  for (int i = 0; i < this->desired_streams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->desired_streams(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformPointInTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.TransformPointInTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TransformPointInTime* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformPointInTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.TransformPointInTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.TransformPointInTime)
    MergeFrom(*source);
  }
}

void TransformPointInTime::MergeFrom(const TransformPointInTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.TransformPointInTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  desired_streams_.MergeFrom(from.desired_streams_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.query_timestamp() != 0) {
    set_query_timestamp(from.query_timestamp());
  }
}

void TransformPointInTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.TransformPointInTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformPointInTime::CopyFrom(const TransformPointInTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.TransformPointInTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformPointInTime::IsInitialized() const {

  return true;
}

void TransformPointInTime::Swap(TransformPointInTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformPointInTime::InternalSwap(TransformPointInTime* other) {
  id_.Swap(&other->id_);
  std::swap(query_timestamp_, other->query_timestamp_);
  desired_streams_.UnsafeArenaSwap(&other->desired_streams_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformPointInTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformPointInTime_descriptor_;
  metadata.reflection = TransformPointInTime_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformPointInTime

// optional string id = 1;
void TransformPointInTime::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TransformPointInTime::id() const {
  // @@protoc_insertion_point(field_get:xviz.TransformPointInTime.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransformPointInTime::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.TransformPointInTime.id)
}
 void TransformPointInTime::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.TransformPointInTime.id)
}
 void TransformPointInTime::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.TransformPointInTime.id)
}
 ::std::string* TransformPointInTime::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:xviz.TransformPointInTime.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransformPointInTime::release_id() {
  // @@protoc_insertion_point(field_release:xviz.TransformPointInTime.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransformPointInTime::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:xviz.TransformPointInTime.id)
}

// optional double query_timestamp = 2;
void TransformPointInTime::clear_query_timestamp() {
  query_timestamp_ = 0;
}
 double TransformPointInTime::query_timestamp() const {
  // @@protoc_insertion_point(field_get:xviz.TransformPointInTime.query_timestamp)
  return query_timestamp_;
}
 void TransformPointInTime::set_query_timestamp(double value) {
  
  query_timestamp_ = value;
  // @@protoc_insertion_point(field_set:xviz.TransformPointInTime.query_timestamp)
}

// repeated string desired_streams = 3;
int TransformPointInTime::desired_streams_size() const {
  return desired_streams_.size();
}
void TransformPointInTime::clear_desired_streams() {
  desired_streams_.Clear();
}
 const ::std::string& TransformPointInTime::desired_streams(int index) const {
  // @@protoc_insertion_point(field_get:xviz.TransformPointInTime.desired_streams)
  return desired_streams_.Get(index);
}
 ::std::string* TransformPointInTime::mutable_desired_streams(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.TransformPointInTime.desired_streams)
  return desired_streams_.Mutable(index);
}
 void TransformPointInTime::set_desired_streams(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.TransformPointInTime.desired_streams)
  desired_streams_.Mutable(index)->assign(value);
}
 void TransformPointInTime::set_desired_streams(int index, const char* value) {
  desired_streams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.TransformPointInTime.desired_streams)
}
 void TransformPointInTime::set_desired_streams(int index, const char* value, size_t size) {
  desired_streams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.TransformPointInTime.desired_streams)
}
 ::std::string* TransformPointInTime::add_desired_streams() {
  // @@protoc_insertion_point(field_add_mutable:xviz.TransformPointInTime.desired_streams)
  return desired_streams_.Add();
}
 void TransformPointInTime::add_desired_streams(const ::std::string& value) {
  desired_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.TransformPointInTime.desired_streams)
}
 void TransformPointInTime::add_desired_streams(const char* value) {
  desired_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.TransformPointInTime.desired_streams)
}
 void TransformPointInTime::add_desired_streams(const char* value, size_t size) {
  desired_streams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.TransformPointInTime.desired_streams)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransformPointInTime::desired_streams() const {
  // @@protoc_insertion_point(field_list:xviz.TransformPointInTime.desired_streams)
  return desired_streams_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TransformPointInTime::mutable_desired_streams() {
  // @@protoc_insertion_point(field_mutable_list:xviz.TransformPointInTime.desired_streams)
  return &desired_streams_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Reconfigure_UpdateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reconfigure_UpdateType_descriptor_;
}
bool Reconfigure_UpdateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Reconfigure_UpdateType Reconfigure::RECONFIGURE_UPDATE_TYPE_INVALID;
const Reconfigure_UpdateType Reconfigure::DELTA;
const Reconfigure_UpdateType Reconfigure::FULL;
const Reconfigure_UpdateType Reconfigure::UpdateType_MIN;
const Reconfigure_UpdateType Reconfigure::UpdateType_MAX;
const int Reconfigure::UpdateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reconfigure::kUpdateTypeFieldNumber;
const int Reconfigure::kConfigUpdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reconfigure::Reconfigure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Reconfigure)
}

void Reconfigure::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  config_update_ = const_cast< ::google::protobuf::Struct*>(&::google::protobuf::Struct::default_instance());
}

Reconfigure::Reconfigure(const Reconfigure& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Reconfigure)
}

void Reconfigure::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  update_type_ = 0;
  config_update_ = NULL;
}

Reconfigure::~Reconfigure() {
  // @@protoc_insertion_point(destructor:xviz.Reconfigure)
  SharedDtor();
}

void Reconfigure::SharedDtor() {
  if (this != default_instance_) {
    delete config_update_;
  }
}

void Reconfigure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reconfigure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reconfigure_descriptor_;
}

const Reconfigure& Reconfigure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2eproto();
  return *default_instance_;
}

Reconfigure* Reconfigure::default_instance_ = NULL;

Reconfigure* Reconfigure::New(::google::protobuf::Arena* arena) const {
  Reconfigure* n = new Reconfigure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Reconfigure::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Reconfigure)
  update_type_ = 0;
  if (GetArenaNoVirtual() == NULL && config_update_ != NULL) delete config_update_;
  config_update_ = NULL;
}

bool Reconfigure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Reconfigure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .xviz.Reconfigure.UpdateType update_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_update_type(static_cast< ::xviz::Reconfigure_UpdateType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_config_update;
        break;
      }

      // optional .google.protobuf.Struct config_update = 2;
      case 2: {
        if (tag == 18) {
         parse_config_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Reconfigure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Reconfigure)
  return false;
#undef DO_
}

void Reconfigure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Reconfigure)
  // optional .xviz.Reconfigure.UpdateType update_type = 1;
  if (this->update_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->update_type(), output);
  }

  // optional .google.protobuf.Struct config_update = 2;
  if (this->has_config_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_update_, output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Reconfigure)
}

::google::protobuf::uint8* Reconfigure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Reconfigure)
  // optional .xviz.Reconfigure.UpdateType update_type = 1;
  if (this->update_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->update_type(), target);
  }

  // optional .google.protobuf.Struct config_update = 2;
  if (this->has_config_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->config_update_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Reconfigure)
  return target;
}

int Reconfigure::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Reconfigure)
  int total_size = 0;

  // optional .xviz.Reconfigure.UpdateType update_type = 1;
  if (this->update_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_type());
  }

  // optional .google.protobuf.Struct config_update = 2;
  if (this->has_config_update()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_update_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reconfigure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Reconfigure)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Reconfigure* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Reconfigure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Reconfigure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Reconfigure)
    MergeFrom(*source);
  }
}

void Reconfigure::MergeFrom(const Reconfigure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Reconfigure)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.update_type() != 0) {
    set_update_type(from.update_type());
  }
  if (from.has_config_update()) {
    mutable_config_update()->::google::protobuf::Struct::MergeFrom(from.config_update());
  }
}

void Reconfigure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Reconfigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reconfigure::CopyFrom(const Reconfigure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Reconfigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reconfigure::IsInitialized() const {

  return true;
}

void Reconfigure::Swap(Reconfigure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reconfigure::InternalSwap(Reconfigure* other) {
  std::swap(update_type_, other->update_type_);
  std::swap(config_update_, other->config_update_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reconfigure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reconfigure_descriptor_;
  metadata.reflection = Reconfigure_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reconfigure

// optional .xviz.Reconfigure.UpdateType update_type = 1;
void Reconfigure::clear_update_type() {
  update_type_ = 0;
}
 ::xviz::Reconfigure_UpdateType Reconfigure::update_type() const {
  // @@protoc_insertion_point(field_get:xviz.Reconfigure.update_type)
  return static_cast< ::xviz::Reconfigure_UpdateType >(update_type_);
}
 void Reconfigure::set_update_type(::xviz::Reconfigure_UpdateType value) {
  
  update_type_ = value;
  // @@protoc_insertion_point(field_set:xviz.Reconfigure.update_type)
}

// optional .google.protobuf.Struct config_update = 2;
bool Reconfigure::has_config_update() const {
  return !_is_default_instance_ && config_update_ != NULL;
}
void Reconfigure::clear_config_update() {
  if (GetArenaNoVirtual() == NULL && config_update_ != NULL) delete config_update_;
  config_update_ = NULL;
}
const ::google::protobuf::Struct& Reconfigure::config_update() const {
  // @@protoc_insertion_point(field_get:xviz.Reconfigure.config_update)
  return config_update_ != NULL ? *config_update_ : *default_instance_->config_update_;
}
::google::protobuf::Struct* Reconfigure::mutable_config_update() {
  
  if (config_update_ == NULL) {
    config_update_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Reconfigure.config_update)
  return config_update_;
}
::google::protobuf::Struct* Reconfigure::release_config_update() {
  // @@protoc_insertion_point(field_release:xviz.Reconfigure.config_update)
  
  ::google::protobuf::Struct* temp = config_update_;
  config_update_ = NULL;
  return temp;
}
void Reconfigure::set_allocated_config_update(::google::protobuf::Struct* config_update) {
  delete config_update_;
  config_update_ = config_update;
  if (config_update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Reconfigure.config_update)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metadata::kVersionFieldNumber;
const int Metadata::kStreamsFieldNumber;
const int Metadata::kCamerasFieldNumber;
const int Metadata::kStreamAliasesFieldNumber;
const int Metadata::kUiConfigFieldNumber;
const int Metadata::kLogInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metadata::Metadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Metadata)
}

void Metadata::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  log_info_ = const_cast< ::xviz::LogInfo*>(&::xviz::LogInfo::default_instance());
}

Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Metadata)
}

void Metadata::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streams_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  streams_.SetEntryDescriptor(
      &::xviz::Metadata_StreamsEntry_descriptor_);
  cameras_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  cameras_.SetEntryDescriptor(
      &::xviz::Metadata_CamerasEntry_descriptor_);
  stream_aliases_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  stream_aliases_.SetEntryDescriptor(
      &::xviz::Metadata_StreamAliasesEntry_descriptor_);
  ui_config_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  ui_config_.SetEntryDescriptor(
      &::xviz::Metadata_UiConfigEntry_descriptor_);
  log_info_ = NULL;
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:xviz.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete log_info_;
  }
}

void Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_descriptor_;
}

const Metadata& Metadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2eproto();
  return *default_instance_;
}

Metadata* Metadata::default_instance_ = NULL;

Metadata* Metadata::New(::google::protobuf::Arena* arena) const {
  Metadata* n = new Metadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Metadata)
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && log_info_ != NULL) delete log_info_;
  log_info_ = NULL;
  streams_.Clear();
  cameras_.Clear();
  stream_aliases_.Clear();
  ui_config_.Clear();
}

bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Metadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.Metadata.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_streams;
        break;
      }

      // map<string, .xviz.StreamMetadata> streams = 2;
      case 2: {
        if (tag == 18) {
         parse_streams:
          DO_(input->IncrementRecursionDepth());
         parse_loop_streams:
          Metadata_StreamsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::xviz::StreamMetadata,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::StreamMetadata > > parser(&streams_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.Metadata.StreamsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_streams;
        if (input->ExpectTag(26)) goto parse_loop_cameras;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .xviz.CameraInfo> cameras = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_cameras:
          Metadata_CamerasEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::xviz::CameraInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::CameraInfo > > parser(&cameras_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.Metadata.CamerasEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_cameras;
        if (input->ExpectTag(34)) goto parse_loop_stream_aliases;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> stream_aliases = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stream_aliases:
          Metadata_StreamAliasesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&stream_aliases_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.Metadata.StreamAliasesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.Metadata.StreamAliasesEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_stream_aliases;
        if (input->ExpectTag(42)) goto parse_loop_ui_config;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .xviz.UIPanelInfo> ui_config = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_ui_config:
          Metadata_UiConfigEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::xviz::UIPanelInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::UIPanelInfo > > parser(&ui_config_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.Metadata.UiConfigEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_ui_config;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_log_info;
        break;
      }

      // optional .xviz.LogInfo log_info = 6;
      case 6: {
        if (tag == 50) {
         parse_log_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Metadata)
  return false;
#undef DO_
}

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Metadata)
  // optional string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Metadata.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // map<string, .xviz.StreamMetadata> streams = 2;
  if (!this->streams().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::StreamMetadata >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.Metadata.StreamsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->streams().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->streams().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::StreamMetadata >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::StreamMetadata >::const_iterator
          it = this->streams().begin();
          it != this->streams().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Metadata_StreamsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(streams_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Metadata_StreamsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::StreamMetadata >::const_iterator
          it = this->streams().begin();
          it != this->streams().end(); ++it) {
        entry.reset(streams_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.CameraInfo> cameras = 3;
  if (!this->cameras().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::CameraInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.Metadata.CamerasEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->cameras().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cameras().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::CameraInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::CameraInfo >::const_iterator
          it = this->cameras().begin();
          it != this->cameras().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Metadata_CamerasEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cameras_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Metadata_CamerasEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::CameraInfo >::const_iterator
          it = this->cameras().begin();
          it != this->cameras().end(); ++it) {
        entry.reset(cameras_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> stream_aliases = 4;
  if (!this->stream_aliases().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.Metadata.StreamAliasesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.Metadata.StreamAliasesEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->stream_aliases().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->stream_aliases().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->stream_aliases().begin();
          it != this->stream_aliases().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Metadata_StreamAliasesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(stream_aliases_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Metadata_StreamAliasesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->stream_aliases().begin();
          it != this->stream_aliases().end(); ++it) {
        entry.reset(stream_aliases_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.UIPanelInfo> ui_config = 5;
  if (!this->ui_config().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::UIPanelInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.Metadata.UiConfigEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->ui_config().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ui_config().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::UIPanelInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::UIPanelInfo >::const_iterator
          it = this->ui_config().begin();
          it != this->ui_config().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Metadata_UiConfigEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ui_config_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Metadata_UiConfigEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::UIPanelInfo >::const_iterator
          it = this->ui_config().begin();
          it != this->ui_config().end(); ++it) {
        entry.reset(ui_config_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .xviz.LogInfo log_info = 6;
  if (this->has_log_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->log_info_, output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Metadata)
}

::google::protobuf::uint8* Metadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Metadata)
  // optional string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Metadata.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // map<string, .xviz.StreamMetadata> streams = 2;
  if (!this->streams().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::StreamMetadata >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.Metadata.StreamsEntry.key");
      }
    };

    if (deterministic &&
        this->streams().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->streams().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::StreamMetadata >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::StreamMetadata >::const_iterator
          it = this->streams().begin();
          it != this->streams().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Metadata_StreamsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(streams_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Metadata_StreamsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::StreamMetadata >::const_iterator
          it = this->streams().begin();
          it != this->streams().end(); ++it) {
        entry.reset(streams_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.CameraInfo> cameras = 3;
  if (!this->cameras().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::CameraInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.Metadata.CamerasEntry.key");
      }
    };

    if (deterministic &&
        this->cameras().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cameras().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::CameraInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::CameraInfo >::const_iterator
          it = this->cameras().begin();
          it != this->cameras().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Metadata_CamerasEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cameras_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Metadata_CamerasEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::CameraInfo >::const_iterator
          it = this->cameras().begin();
          it != this->cameras().end(); ++it) {
        entry.reset(cameras_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> stream_aliases = 4;
  if (!this->stream_aliases().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.Metadata.StreamAliasesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.Metadata.StreamAliasesEntry.value");
      }
    };

    if (deterministic &&
        this->stream_aliases().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->stream_aliases().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->stream_aliases().begin();
          it != this->stream_aliases().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Metadata_StreamAliasesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(stream_aliases_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Metadata_StreamAliasesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->stream_aliases().begin();
          it != this->stream_aliases().end(); ++it) {
        entry.reset(stream_aliases_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.UIPanelInfo> ui_config = 5;
  if (!this->ui_config().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::UIPanelInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.Metadata.UiConfigEntry.key");
      }
    };

    if (deterministic &&
        this->ui_config().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ui_config().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::UIPanelInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::UIPanelInfo >::const_iterator
          it = this->ui_config().begin();
          it != this->ui_config().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Metadata_UiConfigEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ui_config_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Metadata_UiConfigEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::UIPanelInfo >::const_iterator
          it = this->ui_config().begin();
          it != this->ui_config().end(); ++it) {
        entry.reset(ui_config_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .xviz.LogInfo log_info = 6;
  if (this->has_log_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->log_info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Metadata)
  return target;
}

int Metadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Metadata)
  int total_size = 0;

  // optional string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional .xviz.LogInfo log_info = 6;
  if (this->has_log_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->log_info_);
  }

  // map<string, .xviz.StreamMetadata> streams = 2;
  total_size += 1 * this->streams_size();
  {
    ::google::protobuf::scoped_ptr<Metadata_StreamsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::StreamMetadata >::const_iterator
        it = this->streams().begin();
        it != this->streams().end(); ++it) {
      entry.reset(streams_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .xviz.CameraInfo> cameras = 3;
  total_size += 1 * this->cameras_size();
  {
    ::google::protobuf::scoped_ptr<Metadata_CamerasEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::CameraInfo >::const_iterator
        it = this->cameras().begin();
        it != this->cameras().end(); ++it) {
      entry.reset(cameras_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> stream_aliases = 4;
  total_size += 1 * this->stream_aliases_size();
  {
    ::google::protobuf::scoped_ptr<Metadata_StreamAliasesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->stream_aliases().begin();
        it != this->stream_aliases().end(); ++it) {
      entry.reset(stream_aliases_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .xviz.UIPanelInfo> ui_config = 5;
  total_size += 1 * this->ui_config_size();
  {
    ::google::protobuf::scoped_ptr<Metadata_UiConfigEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::UIPanelInfo >::const_iterator
        it = this->ui_config().begin();
        it != this->ui_config().end(); ++it) {
      entry.reset(ui_config_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Metadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Metadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Metadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Metadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Metadata)
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Metadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  streams_.MergeFrom(from.streams_);
  cameras_.MergeFrom(from.cameras_);
  stream_aliases_.MergeFrom(from.stream_aliases_);
  ui_config_.MergeFrom(from.ui_config_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_log_info()) {
    mutable_log_info()->::xviz::LogInfo::MergeFrom(from.log_info());
  }
}

void Metadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {

  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metadata::InternalSwap(Metadata* other) {
  version_.Swap(&other->version_);
  streams_.Swap(&other->streams_);
  cameras_.Swap(&other->cameras_);
  stream_aliases_.Swap(&other->stream_aliases_);
  ui_config_.Swap(&other->ui_config_);
  std::swap(log_info_, other->log_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_descriptor_;
  metadata.reflection = Metadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Metadata

// optional string version = 1;
void Metadata::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Metadata::version() const {
  // @@protoc_insertion_point(field_get:xviz.Metadata.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadata::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Metadata.version)
}
 void Metadata::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Metadata.version)
}
 void Metadata::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Metadata.version)
}
 ::std::string* Metadata::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Metadata.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Metadata::release_version() {
  // @@protoc_insertion_point(field_release:xviz.Metadata.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadata::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:xviz.Metadata.version)
}

// map<string, .xviz.StreamMetadata> streams = 2;
int Metadata::streams_size() const {
  return streams_.size();
}
void Metadata::clear_streams() {
  streams_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::xviz::StreamMetadata >&
Metadata::streams() const {
  // @@protoc_insertion_point(field_map:xviz.Metadata.streams)
  return streams_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::xviz::StreamMetadata >*
Metadata::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_map:xviz.Metadata.streams)
  return streams_.MutableMap();
}

// map<string, .xviz.CameraInfo> cameras = 3;
int Metadata::cameras_size() const {
  return cameras_.size();
}
void Metadata::clear_cameras() {
  cameras_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::xviz::CameraInfo >&
Metadata::cameras() const {
  // @@protoc_insertion_point(field_map:xviz.Metadata.cameras)
  return cameras_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::xviz::CameraInfo >*
Metadata::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_map:xviz.Metadata.cameras)
  return cameras_.MutableMap();
}

// map<string, string> stream_aliases = 4;
int Metadata::stream_aliases_size() const {
  return stream_aliases_.size();
}
void Metadata::clear_stream_aliases() {
  stream_aliases_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Metadata::stream_aliases() const {
  // @@protoc_insertion_point(field_map:xviz.Metadata.stream_aliases)
  return stream_aliases_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Metadata::mutable_stream_aliases() {
  // @@protoc_insertion_point(field_mutable_map:xviz.Metadata.stream_aliases)
  return stream_aliases_.MutableMap();
}

// map<string, .xviz.UIPanelInfo> ui_config = 5;
int Metadata::ui_config_size() const {
  return ui_config_.size();
}
void Metadata::clear_ui_config() {
  ui_config_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::xviz::UIPanelInfo >&
Metadata::ui_config() const {
  // @@protoc_insertion_point(field_map:xviz.Metadata.ui_config)
  return ui_config_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::xviz::UIPanelInfo >*
Metadata::mutable_ui_config() {
  // @@protoc_insertion_point(field_mutable_map:xviz.Metadata.ui_config)
  return ui_config_.MutableMap();
}

// optional .xviz.LogInfo log_info = 6;
bool Metadata::has_log_info() const {
  return !_is_default_instance_ && log_info_ != NULL;
}
void Metadata::clear_log_info() {
  if (GetArenaNoVirtual() == NULL && log_info_ != NULL) delete log_info_;
  log_info_ = NULL;
}
const ::xviz::LogInfo& Metadata::log_info() const {
  // @@protoc_insertion_point(field_get:xviz.Metadata.log_info)
  return log_info_ != NULL ? *log_info_ : *default_instance_->log_info_;
}
::xviz::LogInfo* Metadata::mutable_log_info() {
  
  if (log_info_ == NULL) {
    log_info_ = new ::xviz::LogInfo;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Metadata.log_info)
  return log_info_;
}
::xviz::LogInfo* Metadata::release_log_info() {
  // @@protoc_insertion_point(field_release:xviz.Metadata.log_info)
  
  ::xviz::LogInfo* temp = log_info_;
  log_info_ = NULL;
  return temp;
}
void Metadata::set_allocated_log_info(::xviz::LogInfo* log_info) {
  delete log_info_;
  log_info_ = log_info;
  if (log_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Metadata.log_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Error)
}

void Error::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Error::Error(const Error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Error)
}

void Error::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:xviz.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Error)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.Error.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Error)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Error.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Error)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Error.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Error)
  return target;
}

int Error::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Error)
  int total_size = 0;

  // optional string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Error* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// optional string message = 1;
void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:xviz.Error.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Error.message)
}
 void Error::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Error.message)
}
 void Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Error.message)
}
 ::std::string* Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:xviz.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:xviz.Error.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* StreamMetadata_Category_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMetadata_Category_descriptor_;
}
bool StreamMetadata_Category_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StreamMetadata_Category StreamMetadata::STREAM_METADATA_CATEGORY_INVALID;
const StreamMetadata_Category StreamMetadata::PRIMITIVE;
const StreamMetadata_Category StreamMetadata::TIME_SERIES;
const StreamMetadata_Category StreamMetadata::VARIABLE;
const StreamMetadata_Category StreamMetadata::ANNOTATION;
const StreamMetadata_Category StreamMetadata::FUTURE_INSTANCE;
const StreamMetadata_Category StreamMetadata::POSE;
const StreamMetadata_Category StreamMetadata::UI_PRIMITIVE;
const StreamMetadata_Category StreamMetadata::Category_MIN;
const StreamMetadata_Category StreamMetadata::Category_MAX;
const int StreamMetadata::Category_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StreamMetadata_ScalarType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMetadata_ScalarType_descriptor_;
}
bool StreamMetadata_ScalarType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StreamMetadata_ScalarType StreamMetadata::STREAM_METADATA_SCALAR_TYPE_INVALID;
const StreamMetadata_ScalarType StreamMetadata::FLOAT;
const StreamMetadata_ScalarType StreamMetadata::INT32;
const StreamMetadata_ScalarType StreamMetadata::STRING;
const StreamMetadata_ScalarType StreamMetadata::BOOL;
const StreamMetadata_ScalarType StreamMetadata::ScalarType_MIN;
const StreamMetadata_ScalarType StreamMetadata::ScalarType_MAX;
const int StreamMetadata::ScalarType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StreamMetadata_PrimitiveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMetadata_PrimitiveType_descriptor_;
}
bool StreamMetadata_PrimitiveType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StreamMetadata_PrimitiveType StreamMetadata::STREAM_METADATA_PRIMITIVE_TYPE_INVALID;
const StreamMetadata_PrimitiveType StreamMetadata::CIRCLE;
const StreamMetadata_PrimitiveType StreamMetadata::IMAGE;
const StreamMetadata_PrimitiveType StreamMetadata::POINT;
const StreamMetadata_PrimitiveType StreamMetadata::POLYGON;
const StreamMetadata_PrimitiveType StreamMetadata::POLYLINE;
const StreamMetadata_PrimitiveType StreamMetadata::STADIUM;
const StreamMetadata_PrimitiveType StreamMetadata::TEXT;
const StreamMetadata_PrimitiveType StreamMetadata::PrimitiveType_MIN;
const StreamMetadata_PrimitiveType StreamMetadata::PrimitiveType_MAX;
const int StreamMetadata::PrimitiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StreamMetadata_UIPrimitiveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMetadata_UIPrimitiveType_descriptor_;
}
bool StreamMetadata_UIPrimitiveType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StreamMetadata_UIPrimitiveType StreamMetadata::STREAM_METADATA_UI_PRIMITIVE_TYPE_INVALID;
const StreamMetadata_UIPrimitiveType StreamMetadata::TREETABLE;
const StreamMetadata_UIPrimitiveType StreamMetadata::UIPrimitiveType_MIN;
const StreamMetadata_UIPrimitiveType StreamMetadata::UIPrimitiveType_MAX;
const int StreamMetadata::UIPrimitiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StreamMetadata_AnnotationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMetadata_AnnotationType_descriptor_;
}
bool StreamMetadata_AnnotationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StreamMetadata_AnnotationType StreamMetadata::STREAM_METADATA_ANNOTATION_TYPE_INVALID;
const StreamMetadata_AnnotationType StreamMetadata::VISUAL;
const StreamMetadata_AnnotationType StreamMetadata::AnnotationType_MIN;
const StreamMetadata_AnnotationType StreamMetadata::AnnotationType_MAX;
const int StreamMetadata::AnnotationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StreamMetadata_CoordinateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMetadata_CoordinateType_descriptor_;
}
bool StreamMetadata_CoordinateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StreamMetadata_CoordinateType StreamMetadata::STREAM_METADATA_COORDINATE_TYPE_INVALID;
const StreamMetadata_CoordinateType StreamMetadata::GEOGRAPHIC;
const StreamMetadata_CoordinateType StreamMetadata::IDENTITY;
const StreamMetadata_CoordinateType StreamMetadata::DYNAMIC;
const StreamMetadata_CoordinateType StreamMetadata::VEHICLE_RELATIVE;
const StreamMetadata_CoordinateType StreamMetadata::CoordinateType_MIN;
const StreamMetadata_CoordinateType StreamMetadata::CoordinateType_MAX;
const int StreamMetadata::CoordinateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamMetadata::kSourceFieldNumber;
const int StreamMetadata::kUnitsFieldNumber;
const int StreamMetadata::kCategoryFieldNumber;
const int StreamMetadata::kScalarTypeFieldNumber;
const int StreamMetadata::kPrimitiveTypeFieldNumber;
const int StreamMetadata::kUiPrimitiveTypeFieldNumber;
const int StreamMetadata::kAnnotationTypeFieldNumber;
const int StreamMetadata::kStreamStyleFieldNumber;
const int StreamMetadata::kStyleClassesFieldNumber;
const int StreamMetadata::kCoordinateFieldNumber;
const int StreamMetadata::kTransformFieldNumber;
const int StreamMetadata::kTransformCallbackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamMetadata::StreamMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.StreamMetadata)
}

void StreamMetadata::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  stream_style_ = const_cast< ::xviz::StyleStreamValue*>(&::xviz::StyleStreamValue::default_instance());
}

StreamMetadata::StreamMetadata(const StreamMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.StreamMetadata)
}

void StreamMetadata::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  units_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_ = 0;
  scalar_type_ = 0;
  primitive_type_ = 0;
  ui_primitive_type_ = 0;
  annotation_type_ = 0;
  stream_style_ = NULL;
  coordinate_ = 0;
  transform_callback_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StreamMetadata::~StreamMetadata() {
  // @@protoc_insertion_point(destructor:xviz.StreamMetadata)
  SharedDtor();
}

void StreamMetadata::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  units_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_callback_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete stream_style_;
  }
}

void StreamMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMetadata_descriptor_;
}

const StreamMetadata& StreamMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2eproto();
  return *default_instance_;
}

StreamMetadata* StreamMetadata::default_instance_ = NULL;

StreamMetadata* StreamMetadata::New(::google::protobuf::Arena* arena) const {
  StreamMetadata* n = new StreamMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.StreamMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StreamMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StreamMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(category_, ui_primitive_type_);
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  units_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  annotation_type_ = 0;
  if (GetArenaNoVirtual() == NULL && stream_style_ != NULL) delete stream_style_;
  stream_style_ = NULL;
  coordinate_ = 0;
  transform_callback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  style_classes_.Clear();
  transform_.Clear();
}

bool StreamMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.StreamMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamMetadata.source"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_units;
        break;
      }

      // optional string units = 2;
      case 2: {
        if (tag == 18) {
         parse_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->units().data(), this->units().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamMetadata.units"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_category;
        break;
      }

      // optional .xviz.StreamMetadata.Category category = 3;
      case 3: {
        if (tag == 24) {
         parse_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_category(static_cast< ::xviz::StreamMetadata_Category >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_scalar_type;
        break;
      }

      // optional .xviz.StreamMetadata.ScalarType scalar_type = 4;
      case 4: {
        if (tag == 32) {
         parse_scalar_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_scalar_type(static_cast< ::xviz::StreamMetadata_ScalarType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_primitive_type;
        break;
      }

      // optional .xviz.StreamMetadata.PrimitiveType primitive_type = 5;
      case 5: {
        if (tag == 40) {
         parse_primitive_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_primitive_type(static_cast< ::xviz::StreamMetadata_PrimitiveType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ui_primitive_type;
        break;
      }

      // optional .xviz.StreamMetadata.UIPrimitiveType ui_primitive_type = 6;
      case 6: {
        if (tag == 48) {
         parse_ui_primitive_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ui_primitive_type(static_cast< ::xviz::StreamMetadata_UIPrimitiveType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_annotation_type;
        break;
      }

      // optional .xviz.StreamMetadata.AnnotationType annotation_type = 7;
      case 7: {
        if (tag == 56) {
         parse_annotation_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_annotation_type(static_cast< ::xviz::StreamMetadata_AnnotationType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_stream_style;
        break;
      }

      // optional .xviz.StyleStreamValue stream_style = 8;
      case 8: {
        if (tag == 66) {
         parse_stream_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream_style()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_style_classes;
        break;
      }

      // repeated .xviz.StyleClass style_classes = 9;
      case 9: {
        if (tag == 74) {
         parse_style_classes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_style_classes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_style_classes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_style_classes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(80)) goto parse_coordinate;
        break;
      }

      // optional .xviz.StreamMetadata.CoordinateType coordinate = 10;
      case 10: {
        if (tag == 80) {
         parse_coordinate:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_coordinate(static_cast< ::xviz::StreamMetadata_CoordinateType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_transform;
        break;
      }

      // repeated double transform = 11;
      case 11: {
        if (tag == 90) {
         parse_transform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_transform())));
        } else if (tag == 89) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 90, input, this->mutable_transform())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_transform_callback;
        break;
      }

      // optional string transform_callback = 12;
      case 12: {
        if (tag == 98) {
         parse_transform_callback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transform_callback()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transform_callback().data(), this->transform_callback().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamMetadata.transform_callback"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.StreamMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.StreamMetadata)
  return false;
#undef DO_
}

void StreamMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.StreamMetadata)
  // optional string source = 1;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.StreamMetadata.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional string units = 2;
  if (this->units().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.StreamMetadata.units");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->units(), output);
  }

  // optional .xviz.StreamMetadata.Category category = 3;
  if (this->category() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->category(), output);
  }

  // optional .xviz.StreamMetadata.ScalarType scalar_type = 4;
  if (this->scalar_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scalar_type(), output);
  }

  // optional .xviz.StreamMetadata.PrimitiveType primitive_type = 5;
  if (this->primitive_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->primitive_type(), output);
  }

  // optional .xviz.StreamMetadata.UIPrimitiveType ui_primitive_type = 6;
  if (this->ui_primitive_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->ui_primitive_type(), output);
  }

  // optional .xviz.StreamMetadata.AnnotationType annotation_type = 7;
  if (this->annotation_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->annotation_type(), output);
  }

  // optional .xviz.StyleStreamValue stream_style = 8;
  if (this->has_stream_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->stream_style_, output);
  }

  // repeated .xviz.StyleClass style_classes = 9;
  for (unsigned int i = 0, n = this->style_classes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->style_classes(i), output);
  }

  // optional .xviz.StreamMetadata.CoordinateType coordinate = 10;
  if (this->coordinate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->coordinate(), output);
  }

  // repeated double transform = 11;
  if (this->transform_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_transform_cached_byte_size_);
  }
  for (int i = 0; i < this->transform_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->transform(i), output);
  }

  // optional string transform_callback = 12;
  if (this->transform_callback().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transform_callback().data(), this->transform_callback().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.StreamMetadata.transform_callback");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->transform_callback(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.StreamMetadata)
}

::google::protobuf::uint8* StreamMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.StreamMetadata)
  // optional string source = 1;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.StreamMetadata.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional string units = 2;
  if (this->units().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.StreamMetadata.units");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->units(), target);
  }

  // optional .xviz.StreamMetadata.Category category = 3;
  if (this->category() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->category(), target);
  }

  // optional .xviz.StreamMetadata.ScalarType scalar_type = 4;
  if (this->scalar_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scalar_type(), target);
  }

  // optional .xviz.StreamMetadata.PrimitiveType primitive_type = 5;
  if (this->primitive_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->primitive_type(), target);
  }

  // optional .xviz.StreamMetadata.UIPrimitiveType ui_primitive_type = 6;
  if (this->ui_primitive_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->ui_primitive_type(), target);
  }

  // optional .xviz.StreamMetadata.AnnotationType annotation_type = 7;
  if (this->annotation_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->annotation_type(), target);
  }

  // optional .xviz.StyleStreamValue stream_style = 8;
  if (this->has_stream_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->stream_style_, false, target);
  }

  // repeated .xviz.StyleClass style_classes = 9;
  for (unsigned int i = 0, n = this->style_classes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->style_classes(i), false, target);
  }

  // optional .xviz.StreamMetadata.CoordinateType coordinate = 10;
  if (this->coordinate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->coordinate(), target);
  }

  // repeated double transform = 11;
  if (this->transform_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _transform_cached_byte_size_, target);
  }
  for (int i = 0; i < this->transform_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->transform(i), target);
  }

  // optional string transform_callback = 12;
  if (this->transform_callback().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transform_callback().data(), this->transform_callback().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.StreamMetadata.transform_callback");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->transform_callback(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.StreamMetadata)
  return target;
}

int StreamMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.StreamMetadata)
  int total_size = 0;

  // optional string source = 1;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // optional string units = 2;
  if (this->units().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->units());
  }

  // optional .xviz.StreamMetadata.Category category = 3;
  if (this->category() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
  }

  // optional .xviz.StreamMetadata.ScalarType scalar_type = 4;
  if (this->scalar_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scalar_type());
  }

  // optional .xviz.StreamMetadata.PrimitiveType primitive_type = 5;
  if (this->primitive_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->primitive_type());
  }

  // optional .xviz.StreamMetadata.UIPrimitiveType ui_primitive_type = 6;
  if (this->ui_primitive_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ui_primitive_type());
  }

  // optional .xviz.StreamMetadata.AnnotationType annotation_type = 7;
  if (this->annotation_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->annotation_type());
  }

  // optional .xviz.StyleStreamValue stream_style = 8;
  if (this->has_stream_style()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stream_style_);
  }

  // optional .xviz.StreamMetadata.CoordinateType coordinate = 10;
  if (this->coordinate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coordinate());
  }

  // optional string transform_callback = 12;
  if (this->transform_callback().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transform_callback());
  }

  // repeated .xviz.StyleClass style_classes = 9;
  total_size += 1 * this->style_classes_size();
  for (int i = 0; i < this->style_classes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->style_classes(i));
  }

  // repeated double transform = 11;
  {
    int data_size = 0;
    data_size = 8 * this->transform_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _transform_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.StreamMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StreamMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.StreamMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.StreamMetadata)
    MergeFrom(*source);
  }
}

void StreamMetadata::MergeFrom(const StreamMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.StreamMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  style_classes_.MergeFrom(from.style_classes_);
  transform_.MergeFrom(from.transform_);
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.units().size() > 0) {

    units_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.units_);
  }
  if (from.category() != 0) {
    set_category(from.category());
  }
  if (from.scalar_type() != 0) {
    set_scalar_type(from.scalar_type());
  }
  if (from.primitive_type() != 0) {
    set_primitive_type(from.primitive_type());
  }
  if (from.ui_primitive_type() != 0) {
    set_ui_primitive_type(from.ui_primitive_type());
  }
  if (from.annotation_type() != 0) {
    set_annotation_type(from.annotation_type());
  }
  if (from.has_stream_style()) {
    mutable_stream_style()->::xviz::StyleStreamValue::MergeFrom(from.stream_style());
  }
  if (from.coordinate() != 0) {
    set_coordinate(from.coordinate());
  }
  if (from.transform_callback().size() > 0) {

    transform_callback_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transform_callback_);
  }
}

void StreamMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.StreamMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMetadata::CopyFrom(const StreamMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.StreamMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMetadata::IsInitialized() const {

  return true;
}

void StreamMetadata::Swap(StreamMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamMetadata::InternalSwap(StreamMetadata* other) {
  source_.Swap(&other->source_);
  units_.Swap(&other->units_);
  std::swap(category_, other->category_);
  std::swap(scalar_type_, other->scalar_type_);
  std::swap(primitive_type_, other->primitive_type_);
  std::swap(ui_primitive_type_, other->ui_primitive_type_);
  std::swap(annotation_type_, other->annotation_type_);
  std::swap(stream_style_, other->stream_style_);
  style_classes_.UnsafeArenaSwap(&other->style_classes_);
  std::swap(coordinate_, other->coordinate_);
  transform_.UnsafeArenaSwap(&other->transform_);
  transform_callback_.Swap(&other->transform_callback_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamMetadata_descriptor_;
  metadata.reflection = StreamMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamMetadata

// optional string source = 1;
void StreamMetadata::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StreamMetadata::source() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreamMetadata::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.source)
}
 void StreamMetadata::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StreamMetadata.source)
}
 void StreamMetadata::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StreamMetadata.source)
}
 ::std::string* StreamMetadata::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StreamMetadata.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StreamMetadata::release_source() {
  // @@protoc_insertion_point(field_release:xviz.StreamMetadata.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreamMetadata::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:xviz.StreamMetadata.source)
}

// optional string units = 2;
void StreamMetadata::clear_units() {
  units_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StreamMetadata::units() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.units)
  return units_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreamMetadata::set_units(const ::std::string& value) {
  
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.units)
}
 void StreamMetadata::set_units(const char* value) {
  
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StreamMetadata.units)
}
 void StreamMetadata::set_units(const char* value, size_t size) {
  
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StreamMetadata.units)
}
 ::std::string* StreamMetadata::mutable_units() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StreamMetadata.units)
  return units_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StreamMetadata::release_units() {
  // @@protoc_insertion_point(field_release:xviz.StreamMetadata.units)
  
  return units_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreamMetadata::set_allocated_units(::std::string* units) {
  if (units != NULL) {
    
  } else {
    
  }
  units_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), units);
  // @@protoc_insertion_point(field_set_allocated:xviz.StreamMetadata.units)
}

// optional .xviz.StreamMetadata.Category category = 3;
void StreamMetadata::clear_category() {
  category_ = 0;
}
 ::xviz::StreamMetadata_Category StreamMetadata::category() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.category)
  return static_cast< ::xviz::StreamMetadata_Category >(category_);
}
 void StreamMetadata::set_category(::xviz::StreamMetadata_Category value) {
  
  category_ = value;
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.category)
}

// optional .xviz.StreamMetadata.ScalarType scalar_type = 4;
void StreamMetadata::clear_scalar_type() {
  scalar_type_ = 0;
}
 ::xviz::StreamMetadata_ScalarType StreamMetadata::scalar_type() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.scalar_type)
  return static_cast< ::xviz::StreamMetadata_ScalarType >(scalar_type_);
}
 void StreamMetadata::set_scalar_type(::xviz::StreamMetadata_ScalarType value) {
  
  scalar_type_ = value;
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.scalar_type)
}

// optional .xviz.StreamMetadata.PrimitiveType primitive_type = 5;
void StreamMetadata::clear_primitive_type() {
  primitive_type_ = 0;
}
 ::xviz::StreamMetadata_PrimitiveType StreamMetadata::primitive_type() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.primitive_type)
  return static_cast< ::xviz::StreamMetadata_PrimitiveType >(primitive_type_);
}
 void StreamMetadata::set_primitive_type(::xviz::StreamMetadata_PrimitiveType value) {
  
  primitive_type_ = value;
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.primitive_type)
}

// optional .xviz.StreamMetadata.UIPrimitiveType ui_primitive_type = 6;
void StreamMetadata::clear_ui_primitive_type() {
  ui_primitive_type_ = 0;
}
 ::xviz::StreamMetadata_UIPrimitiveType StreamMetadata::ui_primitive_type() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.ui_primitive_type)
  return static_cast< ::xviz::StreamMetadata_UIPrimitiveType >(ui_primitive_type_);
}
 void StreamMetadata::set_ui_primitive_type(::xviz::StreamMetadata_UIPrimitiveType value) {
  
  ui_primitive_type_ = value;
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.ui_primitive_type)
}

// optional .xviz.StreamMetadata.AnnotationType annotation_type = 7;
void StreamMetadata::clear_annotation_type() {
  annotation_type_ = 0;
}
 ::xviz::StreamMetadata_AnnotationType StreamMetadata::annotation_type() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.annotation_type)
  return static_cast< ::xviz::StreamMetadata_AnnotationType >(annotation_type_);
}
 void StreamMetadata::set_annotation_type(::xviz::StreamMetadata_AnnotationType value) {
  
  annotation_type_ = value;
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.annotation_type)
}

// optional .xviz.StyleStreamValue stream_style = 8;
bool StreamMetadata::has_stream_style() const {
  return !_is_default_instance_ && stream_style_ != NULL;
}
void StreamMetadata::clear_stream_style() {
  if (GetArenaNoVirtual() == NULL && stream_style_ != NULL) delete stream_style_;
  stream_style_ = NULL;
}
const ::xviz::StyleStreamValue& StreamMetadata::stream_style() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.stream_style)
  return stream_style_ != NULL ? *stream_style_ : *default_instance_->stream_style_;
}
::xviz::StyleStreamValue* StreamMetadata::mutable_stream_style() {
  
  if (stream_style_ == NULL) {
    stream_style_ = new ::xviz::StyleStreamValue;
  }
  // @@protoc_insertion_point(field_mutable:xviz.StreamMetadata.stream_style)
  return stream_style_;
}
::xviz::StyleStreamValue* StreamMetadata::release_stream_style() {
  // @@protoc_insertion_point(field_release:xviz.StreamMetadata.stream_style)
  
  ::xviz::StyleStreamValue* temp = stream_style_;
  stream_style_ = NULL;
  return temp;
}
void StreamMetadata::set_allocated_stream_style(::xviz::StyleStreamValue* stream_style) {
  delete stream_style_;
  stream_style_ = stream_style;
  if (stream_style) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.StreamMetadata.stream_style)
}

// repeated .xviz.StyleClass style_classes = 9;
int StreamMetadata::style_classes_size() const {
  return style_classes_.size();
}
void StreamMetadata::clear_style_classes() {
  style_classes_.Clear();
}
const ::xviz::StyleClass& StreamMetadata::style_classes(int index) const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.style_classes)
  return style_classes_.Get(index);
}
::xviz::StyleClass* StreamMetadata::mutable_style_classes(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.StreamMetadata.style_classes)
  return style_classes_.Mutable(index);
}
::xviz::StyleClass* StreamMetadata::add_style_classes() {
  // @@protoc_insertion_point(field_add:xviz.StreamMetadata.style_classes)
  return style_classes_.Add();
}
::google::protobuf::RepeatedPtrField< ::xviz::StyleClass >*
StreamMetadata::mutable_style_classes() {
  // @@protoc_insertion_point(field_mutable_list:xviz.StreamMetadata.style_classes)
  return &style_classes_;
}
const ::google::protobuf::RepeatedPtrField< ::xviz::StyleClass >&
StreamMetadata::style_classes() const {
  // @@protoc_insertion_point(field_list:xviz.StreamMetadata.style_classes)
  return style_classes_;
}

// optional .xviz.StreamMetadata.CoordinateType coordinate = 10;
void StreamMetadata::clear_coordinate() {
  coordinate_ = 0;
}
 ::xviz::StreamMetadata_CoordinateType StreamMetadata::coordinate() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.coordinate)
  return static_cast< ::xviz::StreamMetadata_CoordinateType >(coordinate_);
}
 void StreamMetadata::set_coordinate(::xviz::StreamMetadata_CoordinateType value) {
  
  coordinate_ = value;
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.coordinate)
}

// repeated double transform = 11;
int StreamMetadata::transform_size() const {
  return transform_.size();
}
void StreamMetadata::clear_transform() {
  transform_.Clear();
}
 double StreamMetadata::transform(int index) const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.transform)
  return transform_.Get(index);
}
 void StreamMetadata::set_transform(int index, double value) {
  transform_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.transform)
}
 void StreamMetadata::add_transform(double value) {
  transform_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.StreamMetadata.transform)
}
 const ::google::protobuf::RepeatedField< double >&
StreamMetadata::transform() const {
  // @@protoc_insertion_point(field_list:xviz.StreamMetadata.transform)
  return transform_;
}
 ::google::protobuf::RepeatedField< double >*
StreamMetadata::mutable_transform() {
  // @@protoc_insertion_point(field_mutable_list:xviz.StreamMetadata.transform)
  return &transform_;
}

// optional string transform_callback = 12;
void StreamMetadata::clear_transform_callback() {
  transform_callback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StreamMetadata::transform_callback() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.transform_callback)
  return transform_callback_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreamMetadata::set_transform_callback(const ::std::string& value) {
  
  transform_callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.transform_callback)
}
 void StreamMetadata::set_transform_callback(const char* value) {
  
  transform_callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StreamMetadata.transform_callback)
}
 void StreamMetadata::set_transform_callback(const char* value, size_t size) {
  
  transform_callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StreamMetadata.transform_callback)
}
 ::std::string* StreamMetadata::mutable_transform_callback() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StreamMetadata.transform_callback)
  return transform_callback_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StreamMetadata::release_transform_callback() {
  // @@protoc_insertion_point(field_release:xviz.StreamMetadata.transform_callback)
  
  return transform_callback_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreamMetadata::set_allocated_transform_callback(::std::string* transform_callback) {
  if (transform_callback != NULL) {
    
  } else {
    
  }
  transform_callback_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transform_callback);
  // @@protoc_insertion_point(field_set_allocated:xviz.StreamMetadata.transform_callback)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraInfo::kHumanNameFieldNumber;
const int CameraInfo::kSourceFieldNumber;
const int CameraInfo::kVehiclePositionFieldNumber;
const int CameraInfo::kVehicleOrientationFieldNumber;
const int CameraInfo::kPixelWidthFieldNumber;
const int CameraInfo::kPixelHeightFieldNumber;
const int CameraInfo::kRectificationProjectionFieldNumber;
const int CameraInfo::kGlProjectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraInfo::CameraInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.CameraInfo)
}

void CameraInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CameraInfo::CameraInfo(const CameraInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.CameraInfo)
}

void CameraInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  human_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pixel_width_ = 0;
  pixel_height_ = 0;
}

CameraInfo::~CameraInfo() {
  // @@protoc_insertion_point(destructor:xviz.CameraInfo)
  SharedDtor();
}

void CameraInfo::SharedDtor() {
  human_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CameraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraInfo_descriptor_;
}

const CameraInfo& CameraInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2eproto();
  return *default_instance_;
}

CameraInfo* CameraInfo::default_instance_ = NULL;

CameraInfo* CameraInfo::New(::google::protobuf::Arena* arena) const {
  CameraInfo* n = new CameraInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.CameraInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CameraInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CameraInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pixel_width_, pixel_height_);
  human_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  vehicle_position_.Clear();
  vehicle_orientation_.Clear();
  rectification_projection_.Clear();
  gl_projection_.Clear();
}

bool CameraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.CameraInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string human_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_human_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->human_name().data(), this->human_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.CameraInfo.human_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_source;
        break;
      }

      // optional string source = 2;
      case 2: {
        if (tag == 18) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.CameraInfo.source"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vehicle_position;
        break;
      }

      // repeated double vehicle_position = 3;
      case 3: {
        if (tag == 26) {
         parse_vehicle_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_vehicle_position())));
        } else if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_vehicle_position())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vehicle_orientation;
        break;
      }

      // repeated double vehicle_orientation = 4;
      case 4: {
        if (tag == 34) {
         parse_vehicle_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_vehicle_orientation())));
        } else if (tag == 33) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_vehicle_orientation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_pixel_width;
        break;
      }

      // optional double pixel_width = 5;
      case 5: {
        if (tag == 41) {
         parse_pixel_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pixel_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_pixel_height;
        break;
      }

      // optional double pixel_height = 6;
      case 6: {
        if (tag == 49) {
         parse_pixel_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pixel_height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_rectification_projection;
        break;
      }

      // repeated double rectification_projection = 7;
      case 7: {
        if (tag == 58) {
         parse_rectification_projection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_rectification_projection())));
        } else if (tag == 57) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 58, input, this->mutable_rectification_projection())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_gl_projection;
        break;
      }

      // repeated double gl_projection = 8;
      case 8: {
        if (tag == 66) {
         parse_gl_projection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_gl_projection())));
        } else if (tag == 65) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 66, input, this->mutable_gl_projection())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.CameraInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.CameraInfo)
  return false;
#undef DO_
}

void CameraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.CameraInfo)
  // optional string human_name = 1;
  if (this->human_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->human_name().data(), this->human_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.CameraInfo.human_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->human_name(), output);
  }

  // optional string source = 2;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.CameraInfo.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source(), output);
  }

  // repeated double vehicle_position = 3;
  if (this->vehicle_position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vehicle_position_cached_byte_size_);
  }
  for (int i = 0; i < this->vehicle_position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->vehicle_position(i), output);
  }

  // repeated double vehicle_orientation = 4;
  if (this->vehicle_orientation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vehicle_orientation_cached_byte_size_);
  }
  for (int i = 0; i < this->vehicle_orientation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->vehicle_orientation(i), output);
  }

  // optional double pixel_width = 5;
  if (this->pixel_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pixel_width(), output);
  }

  // optional double pixel_height = 6;
  if (this->pixel_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pixel_height(), output);
  }

  // repeated double rectification_projection = 7;
  if (this->rectification_projection_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rectification_projection_cached_byte_size_);
  }
  for (int i = 0; i < this->rectification_projection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->rectification_projection(i), output);
  }

  // repeated double gl_projection = 8;
  if (this->gl_projection_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_gl_projection_cached_byte_size_);
  }
  for (int i = 0; i < this->gl_projection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->gl_projection(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.CameraInfo)
}

::google::protobuf::uint8* CameraInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.CameraInfo)
  // optional string human_name = 1;
  if (this->human_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->human_name().data(), this->human_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.CameraInfo.human_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->human_name(), target);
  }

  // optional string source = 2;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.CameraInfo.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source(), target);
  }

  // repeated double vehicle_position = 3;
  if (this->vehicle_position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vehicle_position_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vehicle_position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->vehicle_position(i), target);
  }

  // repeated double vehicle_orientation = 4;
  if (this->vehicle_orientation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vehicle_orientation_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vehicle_orientation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->vehicle_orientation(i), target);
  }

  // optional double pixel_width = 5;
  if (this->pixel_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pixel_width(), target);
  }

  // optional double pixel_height = 6;
  if (this->pixel_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pixel_height(), target);
  }

  // repeated double rectification_projection = 7;
  if (this->rectification_projection_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rectification_projection_cached_byte_size_, target);
  }
  for (int i = 0; i < this->rectification_projection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->rectification_projection(i), target);
  }

  // repeated double gl_projection = 8;
  if (this->gl_projection_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _gl_projection_cached_byte_size_, target);
  }
  for (int i = 0; i < this->gl_projection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->gl_projection(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.CameraInfo)
  return target;
}

int CameraInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.CameraInfo)
  int total_size = 0;

  // optional string human_name = 1;
  if (this->human_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->human_name());
  }

  // optional string source = 2;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // optional double pixel_width = 5;
  if (this->pixel_width() != 0) {
    total_size += 1 + 8;
  }

  // optional double pixel_height = 6;
  if (this->pixel_height() != 0) {
    total_size += 1 + 8;
  }

  // repeated double vehicle_position = 3;
  {
    int data_size = 0;
    data_size = 8 * this->vehicle_position_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vehicle_position_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double vehicle_orientation = 4;
  {
    int data_size = 0;
    data_size = 8 * this->vehicle_orientation_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vehicle_orientation_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double rectification_projection = 7;
  {
    int data_size = 0;
    data_size = 8 * this->rectification_projection_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rectification_projection_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double gl_projection = 8;
  {
    int data_size = 0;
    data_size = 8 * this->gl_projection_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gl_projection_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.CameraInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CameraInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.CameraInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.CameraInfo)
    MergeFrom(*source);
  }
}

void CameraInfo::MergeFrom(const CameraInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.CameraInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  vehicle_position_.MergeFrom(from.vehicle_position_);
  vehicle_orientation_.MergeFrom(from.vehicle_orientation_);
  rectification_projection_.MergeFrom(from.rectification_projection_);
  gl_projection_.MergeFrom(from.gl_projection_);
  if (from.human_name().size() > 0) {

    human_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.human_name_);
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.pixel_width() != 0) {
    set_pixel_width(from.pixel_width());
  }
  if (from.pixel_height() != 0) {
    set_pixel_height(from.pixel_height());
  }
}

void CameraInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.CameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraInfo::CopyFrom(const CameraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.CameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraInfo::IsInitialized() const {

  return true;
}

void CameraInfo::Swap(CameraInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraInfo::InternalSwap(CameraInfo* other) {
  human_name_.Swap(&other->human_name_);
  source_.Swap(&other->source_);
  vehicle_position_.UnsafeArenaSwap(&other->vehicle_position_);
  vehicle_orientation_.UnsafeArenaSwap(&other->vehicle_orientation_);
  std::swap(pixel_width_, other->pixel_width_);
  std::swap(pixel_height_, other->pixel_height_);
  rectification_projection_.UnsafeArenaSwap(&other->rectification_projection_);
  gl_projection_.UnsafeArenaSwap(&other->gl_projection_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraInfo_descriptor_;
  metadata.reflection = CameraInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraInfo

// optional string human_name = 1;
void CameraInfo::clear_human_name() {
  human_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CameraInfo::human_name() const {
  // @@protoc_insertion_point(field_get:xviz.CameraInfo.human_name)
  return human_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraInfo::set_human_name(const ::std::string& value) {
  
  human_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.CameraInfo.human_name)
}
 void CameraInfo::set_human_name(const char* value) {
  
  human_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.CameraInfo.human_name)
}
 void CameraInfo::set_human_name(const char* value, size_t size) {
  
  human_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.CameraInfo.human_name)
}
 ::std::string* CameraInfo::mutable_human_name() {
  
  // @@protoc_insertion_point(field_mutable:xviz.CameraInfo.human_name)
  return human_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CameraInfo::release_human_name() {
  // @@protoc_insertion_point(field_release:xviz.CameraInfo.human_name)
  
  return human_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraInfo::set_allocated_human_name(::std::string* human_name) {
  if (human_name != NULL) {
    
  } else {
    
  }
  human_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), human_name);
  // @@protoc_insertion_point(field_set_allocated:xviz.CameraInfo.human_name)
}

// optional string source = 2;
void CameraInfo::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CameraInfo::source() const {
  // @@protoc_insertion_point(field_get:xviz.CameraInfo.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraInfo::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.CameraInfo.source)
}
 void CameraInfo::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.CameraInfo.source)
}
 void CameraInfo::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.CameraInfo.source)
}
 ::std::string* CameraInfo::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:xviz.CameraInfo.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CameraInfo::release_source() {
  // @@protoc_insertion_point(field_release:xviz.CameraInfo.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraInfo::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:xviz.CameraInfo.source)
}

// repeated double vehicle_position = 3;
int CameraInfo::vehicle_position_size() const {
  return vehicle_position_.size();
}
void CameraInfo::clear_vehicle_position() {
  vehicle_position_.Clear();
}
 double CameraInfo::vehicle_position(int index) const {
  // @@protoc_insertion_point(field_get:xviz.CameraInfo.vehicle_position)
  return vehicle_position_.Get(index);
}
 void CameraInfo::set_vehicle_position(int index, double value) {
  vehicle_position_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.CameraInfo.vehicle_position)
}
 void CameraInfo::add_vehicle_position(double value) {
  vehicle_position_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.CameraInfo.vehicle_position)
}
 const ::google::protobuf::RepeatedField< double >&
CameraInfo::vehicle_position() const {
  // @@protoc_insertion_point(field_list:xviz.CameraInfo.vehicle_position)
  return vehicle_position_;
}
 ::google::protobuf::RepeatedField< double >*
CameraInfo::mutable_vehicle_position() {
  // @@protoc_insertion_point(field_mutable_list:xviz.CameraInfo.vehicle_position)
  return &vehicle_position_;
}

// repeated double vehicle_orientation = 4;
int CameraInfo::vehicle_orientation_size() const {
  return vehicle_orientation_.size();
}
void CameraInfo::clear_vehicle_orientation() {
  vehicle_orientation_.Clear();
}
 double CameraInfo::vehicle_orientation(int index) const {
  // @@protoc_insertion_point(field_get:xviz.CameraInfo.vehicle_orientation)
  return vehicle_orientation_.Get(index);
}
 void CameraInfo::set_vehicle_orientation(int index, double value) {
  vehicle_orientation_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.CameraInfo.vehicle_orientation)
}
 void CameraInfo::add_vehicle_orientation(double value) {
  vehicle_orientation_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.CameraInfo.vehicle_orientation)
}
 const ::google::protobuf::RepeatedField< double >&
CameraInfo::vehicle_orientation() const {
  // @@protoc_insertion_point(field_list:xviz.CameraInfo.vehicle_orientation)
  return vehicle_orientation_;
}
 ::google::protobuf::RepeatedField< double >*
CameraInfo::mutable_vehicle_orientation() {
  // @@protoc_insertion_point(field_mutable_list:xviz.CameraInfo.vehicle_orientation)
  return &vehicle_orientation_;
}

// optional double pixel_width = 5;
void CameraInfo::clear_pixel_width() {
  pixel_width_ = 0;
}
 double CameraInfo::pixel_width() const {
  // @@protoc_insertion_point(field_get:xviz.CameraInfo.pixel_width)
  return pixel_width_;
}
 void CameraInfo::set_pixel_width(double value) {
  
  pixel_width_ = value;
  // @@protoc_insertion_point(field_set:xviz.CameraInfo.pixel_width)
}

// optional double pixel_height = 6;
void CameraInfo::clear_pixel_height() {
  pixel_height_ = 0;
}
 double CameraInfo::pixel_height() const {
  // @@protoc_insertion_point(field_get:xviz.CameraInfo.pixel_height)
  return pixel_height_;
}
 void CameraInfo::set_pixel_height(double value) {
  
  pixel_height_ = value;
  // @@protoc_insertion_point(field_set:xviz.CameraInfo.pixel_height)
}

// repeated double rectification_projection = 7;
int CameraInfo::rectification_projection_size() const {
  return rectification_projection_.size();
}
void CameraInfo::clear_rectification_projection() {
  rectification_projection_.Clear();
}
 double CameraInfo::rectification_projection(int index) const {
  // @@protoc_insertion_point(field_get:xviz.CameraInfo.rectification_projection)
  return rectification_projection_.Get(index);
}
 void CameraInfo::set_rectification_projection(int index, double value) {
  rectification_projection_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.CameraInfo.rectification_projection)
}
 void CameraInfo::add_rectification_projection(double value) {
  rectification_projection_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.CameraInfo.rectification_projection)
}
 const ::google::protobuf::RepeatedField< double >&
CameraInfo::rectification_projection() const {
  // @@protoc_insertion_point(field_list:xviz.CameraInfo.rectification_projection)
  return rectification_projection_;
}
 ::google::protobuf::RepeatedField< double >*
CameraInfo::mutable_rectification_projection() {
  // @@protoc_insertion_point(field_mutable_list:xviz.CameraInfo.rectification_projection)
  return &rectification_projection_;
}

// repeated double gl_projection = 8;
int CameraInfo::gl_projection_size() const {
  return gl_projection_.size();
}
void CameraInfo::clear_gl_projection() {
  gl_projection_.Clear();
}
 double CameraInfo::gl_projection(int index) const {
  // @@protoc_insertion_point(field_get:xviz.CameraInfo.gl_projection)
  return gl_projection_.Get(index);
}
 void CameraInfo::set_gl_projection(int index, double value) {
  gl_projection_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.CameraInfo.gl_projection)
}
 void CameraInfo::add_gl_projection(double value) {
  gl_projection_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.CameraInfo.gl_projection)
}
 const ::google::protobuf::RepeatedField< double >&
CameraInfo::gl_projection() const {
  // @@protoc_insertion_point(field_list:xviz.CameraInfo.gl_projection)
  return gl_projection_;
}
 ::google::protobuf::RepeatedField< double >*
CameraInfo::mutable_gl_projection() {
  // @@protoc_insertion_point(field_mutable_list:xviz.CameraInfo.gl_projection)
  return &gl_projection_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UIPanelInfo::kNameFieldNumber;
const int UIPanelInfo::kNeededStreamsFieldNumber;
const int UIPanelInfo::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UIPanelInfo::UIPanelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.UIPanelInfo)
}

void UIPanelInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  config_ = const_cast< ::google::protobuf::Struct*>(&::google::protobuf::Struct::default_instance());
}

UIPanelInfo::UIPanelInfo(const UIPanelInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.UIPanelInfo)
}

void UIPanelInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_ = NULL;
}

UIPanelInfo::~UIPanelInfo() {
  // @@protoc_insertion_point(destructor:xviz.UIPanelInfo)
  SharedDtor();
}

void UIPanelInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete config_;
  }
}

void UIPanelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIPanelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIPanelInfo_descriptor_;
}

const UIPanelInfo& UIPanelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2eproto();
  return *default_instance_;
}

UIPanelInfo* UIPanelInfo::default_instance_ = NULL;

UIPanelInfo* UIPanelInfo::New(::google::protobuf::Arena* arena) const {
  UIPanelInfo* n = new UIPanelInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UIPanelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.UIPanelInfo)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
  needed_streams_.Clear();
}

bool UIPanelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.UIPanelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.UIPanelInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_needed_streams;
        break;
      }

      // repeated string needed_streams = 2;
      case 2: {
        if (tag == 18) {
         parse_needed_streams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_needed_streams()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->needed_streams(this->needed_streams_size() - 1).data(),
            this->needed_streams(this->needed_streams_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.UIPanelInfo.needed_streams"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_needed_streams;
        if (input->ExpectTag(26)) goto parse_config;
        break;
      }

      // optional .google.protobuf.Struct config = 3;
      case 3: {
        if (tag == 26) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.UIPanelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.UIPanelInfo)
  return false;
#undef DO_
}

void UIPanelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.UIPanelInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.UIPanelInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string needed_streams = 2;
  for (int i = 0; i < this->needed_streams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->needed_streams(i).data(), this->needed_streams(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.UIPanelInfo.needed_streams");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->needed_streams(i), output);
  }

  // optional .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->config_, output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.UIPanelInfo)
}

::google::protobuf::uint8* UIPanelInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.UIPanelInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.UIPanelInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string needed_streams = 2;
  for (int i = 0; i < this->needed_streams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->needed_streams(i).data(), this->needed_streams(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.UIPanelInfo.needed_streams");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->needed_streams(i), target);
  }

  // optional .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.UIPanelInfo)
  return target;
}

int UIPanelInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.UIPanelInfo)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // repeated string needed_streams = 2;
  total_size += 1 * this->needed_streams_size();
  for (int i = 0; i < this->needed_streams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->needed_streams(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIPanelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.UIPanelInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UIPanelInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UIPanelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.UIPanelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.UIPanelInfo)
    MergeFrom(*source);
  }
}

void UIPanelInfo::MergeFrom(const UIPanelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.UIPanelInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  needed_streams_.MergeFrom(from.needed_streams_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_config()) {
    mutable_config()->::google::protobuf::Struct::MergeFrom(from.config());
  }
}

void UIPanelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.UIPanelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIPanelInfo::CopyFrom(const UIPanelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.UIPanelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIPanelInfo::IsInitialized() const {

  return true;
}

void UIPanelInfo::Swap(UIPanelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UIPanelInfo::InternalSwap(UIPanelInfo* other) {
  name_.Swap(&other->name_);
  needed_streams_.UnsafeArenaSwap(&other->needed_streams_);
  std::swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UIPanelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIPanelInfo_descriptor_;
  metadata.reflection = UIPanelInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UIPanelInfo

// optional string name = 1;
void UIPanelInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UIPanelInfo::name() const {
  // @@protoc_insertion_point(field_get:xviz.UIPanelInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UIPanelInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.UIPanelInfo.name)
}
 void UIPanelInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.UIPanelInfo.name)
}
 void UIPanelInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.UIPanelInfo.name)
}
 ::std::string* UIPanelInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:xviz.UIPanelInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UIPanelInfo::release_name() {
  // @@protoc_insertion_point(field_release:xviz.UIPanelInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UIPanelInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:xviz.UIPanelInfo.name)
}

// repeated string needed_streams = 2;
int UIPanelInfo::needed_streams_size() const {
  return needed_streams_.size();
}
void UIPanelInfo::clear_needed_streams() {
  needed_streams_.Clear();
}
 const ::std::string& UIPanelInfo::needed_streams(int index) const {
  // @@protoc_insertion_point(field_get:xviz.UIPanelInfo.needed_streams)
  return needed_streams_.Get(index);
}
 ::std::string* UIPanelInfo::mutable_needed_streams(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.UIPanelInfo.needed_streams)
  return needed_streams_.Mutable(index);
}
 void UIPanelInfo::set_needed_streams(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.UIPanelInfo.needed_streams)
  needed_streams_.Mutable(index)->assign(value);
}
 void UIPanelInfo::set_needed_streams(int index, const char* value) {
  needed_streams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.UIPanelInfo.needed_streams)
}
 void UIPanelInfo::set_needed_streams(int index, const char* value, size_t size) {
  needed_streams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.UIPanelInfo.needed_streams)
}
 ::std::string* UIPanelInfo::add_needed_streams() {
  // @@protoc_insertion_point(field_add_mutable:xviz.UIPanelInfo.needed_streams)
  return needed_streams_.Add();
}
 void UIPanelInfo::add_needed_streams(const ::std::string& value) {
  needed_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.UIPanelInfo.needed_streams)
}
 void UIPanelInfo::add_needed_streams(const char* value) {
  needed_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.UIPanelInfo.needed_streams)
}
 void UIPanelInfo::add_needed_streams(const char* value, size_t size) {
  needed_streams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.UIPanelInfo.needed_streams)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
UIPanelInfo::needed_streams() const {
  // @@protoc_insertion_point(field_list:xviz.UIPanelInfo.needed_streams)
  return needed_streams_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
UIPanelInfo::mutable_needed_streams() {
  // @@protoc_insertion_point(field_mutable_list:xviz.UIPanelInfo.needed_streams)
  return &needed_streams_;
}

// optional .google.protobuf.Struct config = 3;
bool UIPanelInfo::has_config() const {
  return !_is_default_instance_ && config_ != NULL;
}
void UIPanelInfo::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::google::protobuf::Struct& UIPanelInfo::config() const {
  // @@protoc_insertion_point(field_get:xviz.UIPanelInfo.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
::google::protobuf::Struct* UIPanelInfo::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:xviz.UIPanelInfo.config)
  return config_;
}
::google::protobuf::Struct* UIPanelInfo::release_config() {
  // @@protoc_insertion_point(field_release:xviz.UIPanelInfo.config)
  
  ::google::protobuf::Struct* temp = config_;
  config_ = NULL;
  return temp;
}
void UIPanelInfo::set_allocated_config(::google::protobuf::Struct* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.UIPanelInfo.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogInfo::kStartTimeFieldNumber;
const int LogInfo::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogInfo::LogInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.LogInfo)
}

void LogInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogInfo::LogInfo(const LogInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.LogInfo)
}

void LogInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  start_time_ = 0;
  end_time_ = 0;
}

LogInfo::~LogInfo() {
  // @@protoc_insertion_point(destructor:xviz.LogInfo)
  SharedDtor();
}

void LogInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogInfo_descriptor_;
}

const LogInfo& LogInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2eproto();
  return *default_instance_;
}

LogInfo* LogInfo::default_instance_ = NULL;

LogInfo* LogInfo::New(::google::protobuf::Arena* arena) const {
  LogInfo* n = new LogInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.LogInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_time_, end_time_);

#undef ZR_HELPER_
#undef ZR_

}

bool LogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.LogInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_end_time;
        break;
      }

      // optional double end_time = 2;
      case 2: {
        if (tag == 17) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.LogInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.LogInfo)
  return false;
#undef DO_
}

void LogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.LogInfo)
  // optional double start_time = 1;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_time(), output);
  }

  // optional double end_time = 2;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->end_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.LogInfo)
}

::google::protobuf::uint8* LogInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.LogInfo)
  // optional double start_time = 1;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_time(), target);
  }

  // optional double end_time = 2;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->end_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.LogInfo)
  return target;
}

int LogInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.LogInfo)
  int total_size = 0;

  // optional double start_time = 1;
  if (this->start_time() != 0) {
    total_size += 1 + 8;
  }

  // optional double end_time = 2;
  if (this->end_time() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.LogInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.LogInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.LogInfo)
    MergeFrom(*source);
  }
}

void LogInfo::MergeFrom(const LogInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.LogInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void LogInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.LogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogInfo::CopyFrom(const LogInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.LogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogInfo::IsInitialized() const {

  return true;
}

void LogInfo::Swap(LogInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogInfo::InternalSwap(LogInfo* other) {
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogInfo_descriptor_;
  metadata.reflection = LogInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogInfo

// optional double start_time = 1;
void LogInfo::clear_start_time() {
  start_time_ = 0;
}
 double LogInfo::start_time() const {
  // @@protoc_insertion_point(field_get:xviz.LogInfo.start_time)
  return start_time_;
}
 void LogInfo::set_start_time(double value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:xviz.LogInfo.start_time)
}

// optional double end_time = 2;
void LogInfo::clear_end_time() {
  end_time_ = 0;
}
 double LogInfo::end_time() const {
  // @@protoc_insertion_point(field_get:xviz.LogInfo.end_time)
  return end_time_;
}
 void LogInfo::set_end_time(double value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:xviz.LogInfo.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

// @@protoc_insertion_point(global_scope)
