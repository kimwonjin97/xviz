// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: style.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/style.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xviz {

namespace {

const ::google::protobuf::Descriptor* StyleClass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyleClass_reflection_ = NULL;
const ::google::protobuf::Descriptor* StyleObjectValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyleObjectValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* StyleStreamValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyleStreamValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Color_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TextAnchor_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TextAlignmentBaseline_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_style_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_style_2eproto() {
  protobuf_AddDesc_style_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "style.proto");
  GOOGLE_CHECK(file != NULL);
  StyleClass_descriptor_ = file->message_type(0);
  static const int StyleClass_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleClass, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleClass, style_),
  };
  StyleClass_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StyleClass_descriptor_,
      StyleClass::default_instance_,
      StyleClass_offsets_,
      -1,
      -1,
      -1,
      sizeof(StyleClass),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleClass, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleClass, _is_default_instance_));
  StyleObjectValue_descriptor_ = file->message_type(1);
  static const int StyleObjectValue_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleObjectValue, fill_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleObjectValue, stroke_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleObjectValue, stroke_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleObjectValue, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleObjectValue, text_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleObjectValue, text_rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleObjectValue, text_anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleObjectValue, text_baseline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleObjectValue, height_),
  };
  StyleObjectValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StyleObjectValue_descriptor_,
      StyleObjectValue::default_instance_,
      StyleObjectValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(StyleObjectValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleObjectValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleObjectValue, _is_default_instance_));
  StyleStreamValue_descriptor_ = file->message_type(2);
  static const int StyleStreamValue_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, fill_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, stroke_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, stroke_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, text_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, text_rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, text_anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, text_baseline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, radius_min_pixels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, radius_max_pixels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, stroke_width_min_pixels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, stroke_width_max_pixels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, stroked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, filled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, extruded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, radius_pixels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, font_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, font_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, point_cloud_mode_),
  };
  StyleStreamValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StyleStreamValue_descriptor_,
      StyleStreamValue::default_instance_,
      StyleStreamValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(StyleStreamValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleStreamValue, _is_default_instance_));
  Color_descriptor_ = file->message_type(3);
  static const int Color_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, values_),
  };
  Color_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Color_descriptor_,
      Color::default_instance_,
      Color_offsets_,
      -1,
      -1,
      -1,
      sizeof(Color),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _is_default_instance_));
  TextAnchor_descriptor_ = file->enum_type(0);
  TextAlignmentBaseline_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_style_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StyleClass_descriptor_, &StyleClass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StyleObjectValue_descriptor_, &StyleObjectValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StyleStreamValue_descriptor_, &StyleStreamValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Color_descriptor_, &Color::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_style_2eproto() {
  delete StyleClass::default_instance_;
  delete StyleClass_reflection_;
  delete StyleObjectValue::default_instance_;
  delete StyleObjectValue_reflection_;
  delete StyleStreamValue::default_instance_;
  delete StyleStreamValue_reflection_;
  delete Color::default_instance_;
  delete Color_reflection_;
}

void protobuf_AddDesc_style_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_style_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::xviz::protobuf_AddDesc_options_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013style.proto\022\004xviz\032\roptions.proto\"R\n\nSt"
    "yleClass\022\014\n\004name\030\001 \001(\t\022%\n\005style\030\002 \001(\0132\026."
    "xviz.StyleObjectValue:\017\302\273\032\013style/class\"\217"
    "\002\n\020StyleObjectValue\022\022\n\nfill_color\030\001 \001(\014\022"
    "\024\n\014stroke_color\030\002 \001(\014\022\024\n\014stroke_width\030\003 "
    "\001(\002\022\016\n\006radius\030\004 \001(\002\022\021\n\ttext_size\030\005 \001(\002\022\025"
    "\n\rtext_rotation\030\006 \001(\002\022%\n\013text_anchor\030\007 \001"
    "(\0162\020.xviz.TextAnchor\0222\n\rtext_baseline\030\010 "
    "\001(\0162\033.xviz.TextAlignmentBaseline\022\016\n\006heig"
    "ht\030\t \001(\002:\026\302\273\032\022style/object_value\"\246\004\n\020Sty"
    "leStreamValue\022\022\n\nfill_color\030\001 \001(\014\022\024\n\014str"
    "oke_color\030\002 \001(\014\022\024\n\014stroke_width\030\003 \001(\002\022\016\n"
    "\006radius\030\004 \001(\002\022\021\n\ttext_size\030\005 \001(\002\022\025\n\rtext"
    "_rotation\030\006 \001(\002\022%\n\013text_anchor\030\007 \001(\0162\020.x"
    "viz.TextAnchor\0222\n\rtext_baseline\030\010 \001(\0162\033."
    "xviz.TextAlignmentBaseline\022\016\n\006height\030\t \001"
    "(\002\022\031\n\021radius_min_pixels\030\n \001(\r\022\031\n\021radius_"
    "max_pixels\030\013 \001(\r\022\037\n\027stroke_width_min_pix"
    "els\030\014 \001(\r\022\037\n\027stroke_width_max_pixels\030\r \001"
    "(\r\022\017\n\007opacity\030\016 \001(\002\022\017\n\007stroked\030\017 \001(\010\022\016\n\006"
    "filled\030\020 \001(\010\022\020\n\010extruded\030\021 \001(\010\022\025\n\rradius"
    "_pixels\030\022 \001(\r\022\023\n\013font_weight\030\023 \001(\r\022\023\n\013fo"
    "nt_family\030\024 \001(\t\022\030\n\020point_cloud_mode\030\025 \001("
    "\t:\026\302\273\032\022style/stream_value\"\027\n\005Color\022\016\n\006va"
    "lues\030\001 \001(\014*E\n\nTextAnchor\022\027\n\023TEXT_ANCHOR_"
    "INVALID\020\000\022\t\n\005START\020\001\022\n\n\006MIDDLE\020\002\022\007\n\003END\020"
    "\003*]\n\025TextAlignmentBaseline\022#\n\037TEXT_ALIGN"
    "MENT_BASELINE_INVALID\020\000\022\007\n\003TOP\020\001\022\n\n\006CENT"
    "ER\020\002\022\n\n\006BOTTOM\020\003B2\n\013com.xviz.v2B\nStylePr"
    "otoP\001Z\004v2pb\242\002\004XVIZ\252\002\007xviz.V2b\006proto3", 1196);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "style.proto", &protobuf_RegisterTypes);
  StyleClass::default_instance_ = new StyleClass();
  StyleObjectValue::default_instance_ = new StyleObjectValue();
  StyleStreamValue::default_instance_ = new StyleStreamValue();
  Color::default_instance_ = new Color();
  StyleClass::default_instance_->InitAsDefaultInstance();
  StyleObjectValue::default_instance_->InitAsDefaultInstance();
  StyleStreamValue::default_instance_->InitAsDefaultInstance();
  Color::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_style_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_style_2eproto {
  StaticDescriptorInitializer_style_2eproto() {
    protobuf_AddDesc_style_2eproto();
  }
} static_descriptor_initializer_style_2eproto_;
const ::google::protobuf::EnumDescriptor* TextAnchor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextAnchor_descriptor_;
}
bool TextAnchor_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TextAlignmentBaseline_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextAlignmentBaseline_descriptor_;
}
bool TextAlignmentBaseline_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StyleClass::kNameFieldNumber;
const int StyleClass::kStyleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StyleClass::StyleClass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.StyleClass)
}

void StyleClass::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  style_ = const_cast< ::xviz::StyleObjectValue*>(&::xviz::StyleObjectValue::default_instance());
}

StyleClass::StyleClass(const StyleClass& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.StyleClass)
}

void StyleClass::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  style_ = NULL;
}

StyleClass::~StyleClass() {
  // @@protoc_insertion_point(destructor:xviz.StyleClass)
  SharedDtor();
}

void StyleClass::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete style_;
  }
}

void StyleClass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleClass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleClass_descriptor_;
}

const StyleClass& StyleClass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_style_2eproto();
  return *default_instance_;
}

StyleClass* StyleClass::default_instance_ = NULL;

StyleClass* StyleClass::New(::google::protobuf::Arena* arena) const {
  StyleClass* n = new StyleClass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StyleClass::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.StyleClass)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && style_ != NULL) delete style_;
  style_ = NULL;
}

bool StyleClass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.StyleClass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StyleClass.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_style;
        break;
      }

      // optional .xviz.StyleObjectValue style = 2;
      case 2: {
        if (tag == 18) {
         parse_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.StyleClass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.StyleClass)
  return false;
#undef DO_
}

void StyleClass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.StyleClass)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.StyleClass.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .xviz.StyleObjectValue style = 2;
  if (this->has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->style_, output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.StyleClass)
}

::google::protobuf::uint8* StyleClass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.StyleClass)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.StyleClass.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .xviz.StyleObjectValue style = 2;
  if (this->has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->style_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.StyleClass)
  return target;
}

int StyleClass::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.StyleClass)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .xviz.StyleObjectValue style = 2;
  if (this->has_style()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->style_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleClass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.StyleClass)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StyleClass* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StyleClass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.StyleClass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.StyleClass)
    MergeFrom(*source);
  }
}

void StyleClass::MergeFrom(const StyleClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.StyleClass)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_style()) {
    mutable_style()->::xviz::StyleObjectValue::MergeFrom(from.style());
  }
}

void StyleClass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.StyleClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleClass::CopyFrom(const StyleClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.StyleClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleClass::IsInitialized() const {

  return true;
}

void StyleClass::Swap(StyleClass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StyleClass::InternalSwap(StyleClass* other) {
  name_.Swap(&other->name_);
  std::swap(style_, other->style_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StyleClass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyleClass_descriptor_;
  metadata.reflection = StyleClass_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StyleClass

// optional string name = 1;
void StyleClass::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StyleClass::name() const {
  // @@protoc_insertion_point(field_get:xviz.StyleClass.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StyleClass::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StyleClass.name)
}
 void StyleClass::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleClass.name)
}
 void StyleClass::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleClass.name)
}
 ::std::string* StyleClass::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StyleClass.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StyleClass::release_name() {
  // @@protoc_insertion_point(field_release:xviz.StyleClass.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StyleClass::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleClass.name)
}

// optional .xviz.StyleObjectValue style = 2;
bool StyleClass::has_style() const {
  return !_is_default_instance_ && style_ != NULL;
}
void StyleClass::clear_style() {
  if (GetArenaNoVirtual() == NULL && style_ != NULL) delete style_;
  style_ = NULL;
}
const ::xviz::StyleObjectValue& StyleClass::style() const {
  // @@protoc_insertion_point(field_get:xviz.StyleClass.style)
  return style_ != NULL ? *style_ : *default_instance_->style_;
}
::xviz::StyleObjectValue* StyleClass::mutable_style() {
  
  if (style_ == NULL) {
    style_ = new ::xviz::StyleObjectValue;
  }
  // @@protoc_insertion_point(field_mutable:xviz.StyleClass.style)
  return style_;
}
::xviz::StyleObjectValue* StyleClass::release_style() {
  // @@protoc_insertion_point(field_release:xviz.StyleClass.style)
  
  ::xviz::StyleObjectValue* temp = style_;
  style_ = NULL;
  return temp;
}
void StyleClass::set_allocated_style(::xviz::StyleObjectValue* style) {
  delete style_;
  style_ = style;
  if (style) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleClass.style)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StyleObjectValue::kFillColorFieldNumber;
const int StyleObjectValue::kStrokeColorFieldNumber;
const int StyleObjectValue::kStrokeWidthFieldNumber;
const int StyleObjectValue::kRadiusFieldNumber;
const int StyleObjectValue::kTextSizeFieldNumber;
const int StyleObjectValue::kTextRotationFieldNumber;
const int StyleObjectValue::kTextAnchorFieldNumber;
const int StyleObjectValue::kTextBaselineFieldNumber;
const int StyleObjectValue::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StyleObjectValue::StyleObjectValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.StyleObjectValue)
}

void StyleObjectValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StyleObjectValue::StyleObjectValue(const StyleObjectValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.StyleObjectValue)
}

void StyleObjectValue::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fill_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stroke_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stroke_width_ = 0;
  radius_ = 0;
  text_size_ = 0;
  text_rotation_ = 0;
  text_anchor_ = 0;
  text_baseline_ = 0;
  height_ = 0;
}

StyleObjectValue::~StyleObjectValue() {
  // @@protoc_insertion_point(destructor:xviz.StyleObjectValue)
  SharedDtor();
}

void StyleObjectValue::SharedDtor() {
  fill_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stroke_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StyleObjectValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleObjectValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleObjectValue_descriptor_;
}

const StyleObjectValue& StyleObjectValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_style_2eproto();
  return *default_instance_;
}

StyleObjectValue* StyleObjectValue::default_instance_ = NULL;

StyleObjectValue* StyleObjectValue::New(::google::protobuf::Arena* arena) const {
  StyleObjectValue* n = new StyleObjectValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StyleObjectValue::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.StyleObjectValue)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StyleObjectValue, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StyleObjectValue*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(stroke_width_, text_baseline_);
  fill_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stroke_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  height_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool StyleObjectValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.StyleObjectValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes fill_color = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fill_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stroke_color;
        break;
      }

      // optional bytes stroke_color = 2;
      case 2: {
        if (tag == 18) {
         parse_stroke_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stroke_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_stroke_width;
        break;
      }

      // optional float stroke_width = 3;
      case 3: {
        if (tag == 29) {
         parse_stroke_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stroke_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_radius;
        break;
      }

      // optional float radius = 4;
      case 4: {
        if (tag == 37) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_text_size;
        break;
      }

      // optional float text_size = 5;
      case 5: {
        if (tag == 45) {
         parse_text_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &text_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_text_rotation;
        break;
      }

      // optional float text_rotation = 6;
      case 6: {
        if (tag == 53) {
         parse_text_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &text_rotation_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_text_anchor;
        break;
      }

      // optional .xviz.TextAnchor text_anchor = 7;
      case 7: {
        if (tag == 56) {
         parse_text_anchor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_text_anchor(static_cast< ::xviz::TextAnchor >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_text_baseline;
        break;
      }

      // optional .xviz.TextAlignmentBaseline text_baseline = 8;
      case 8: {
        if (tag == 64) {
         parse_text_baseline:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_text_baseline(static_cast< ::xviz::TextAlignmentBaseline >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_height;
        break;
      }

      // optional float height = 9;
      case 9: {
        if (tag == 77) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.StyleObjectValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.StyleObjectValue)
  return false;
#undef DO_
}

void StyleObjectValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.StyleObjectValue)
  // optional bytes fill_color = 1;
  if (this->fill_color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->fill_color(), output);
  }

  // optional bytes stroke_color = 2;
  if (this->stroke_color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->stroke_color(), output);
  }

  // optional float stroke_width = 3;
  if (this->stroke_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->stroke_width(), output);
  }

  // optional float radius = 4;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->radius(), output);
  }

  // optional float text_size = 5;
  if (this->text_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->text_size(), output);
  }

  // optional float text_rotation = 6;
  if (this->text_rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->text_rotation(), output);
  }

  // optional .xviz.TextAnchor text_anchor = 7;
  if (this->text_anchor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->text_anchor(), output);
  }

  // optional .xviz.TextAlignmentBaseline text_baseline = 8;
  if (this->text_baseline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->text_baseline(), output);
  }

  // optional float height = 9;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.StyleObjectValue)
}

::google::protobuf::uint8* StyleObjectValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.StyleObjectValue)
  // optional bytes fill_color = 1;
  if (this->fill_color().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fill_color(), target);
  }

  // optional bytes stroke_color = 2;
  if (this->stroke_color().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->stroke_color(), target);
  }

  // optional float stroke_width = 3;
  if (this->stroke_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->stroke_width(), target);
  }

  // optional float radius = 4;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->radius(), target);
  }

  // optional float text_size = 5;
  if (this->text_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->text_size(), target);
  }

  // optional float text_rotation = 6;
  if (this->text_rotation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->text_rotation(), target);
  }

  // optional .xviz.TextAnchor text_anchor = 7;
  if (this->text_anchor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->text_anchor(), target);
  }

  // optional .xviz.TextAlignmentBaseline text_baseline = 8;
  if (this->text_baseline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->text_baseline(), target);
  }

  // optional float height = 9;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.StyleObjectValue)
  return target;
}

int StyleObjectValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.StyleObjectValue)
  int total_size = 0;

  // optional bytes fill_color = 1;
  if (this->fill_color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fill_color());
  }

  // optional bytes stroke_color = 2;
  if (this->stroke_color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->stroke_color());
  }

  // optional float stroke_width = 3;
  if (this->stroke_width() != 0) {
    total_size += 1 + 4;
  }

  // optional float radius = 4;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  // optional float text_size = 5;
  if (this->text_size() != 0) {
    total_size += 1 + 4;
  }

  // optional float text_rotation = 6;
  if (this->text_rotation() != 0) {
    total_size += 1 + 4;
  }

  // optional .xviz.TextAnchor text_anchor = 7;
  if (this->text_anchor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->text_anchor());
  }

  // optional .xviz.TextAlignmentBaseline text_baseline = 8;
  if (this->text_baseline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->text_baseline());
  }

  // optional float height = 9;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleObjectValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.StyleObjectValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StyleObjectValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StyleObjectValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.StyleObjectValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.StyleObjectValue)
    MergeFrom(*source);
  }
}

void StyleObjectValue::MergeFrom(const StyleObjectValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.StyleObjectValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.fill_color().size() > 0) {

    fill_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fill_color_);
  }
  if (from.stroke_color().size() > 0) {

    stroke_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stroke_color_);
  }
  if (from.stroke_width() != 0) {
    set_stroke_width(from.stroke_width());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.text_size() != 0) {
    set_text_size(from.text_size());
  }
  if (from.text_rotation() != 0) {
    set_text_rotation(from.text_rotation());
  }
  if (from.text_anchor() != 0) {
    set_text_anchor(from.text_anchor());
  }
  if (from.text_baseline() != 0) {
    set_text_baseline(from.text_baseline());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void StyleObjectValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.StyleObjectValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleObjectValue::CopyFrom(const StyleObjectValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.StyleObjectValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleObjectValue::IsInitialized() const {

  return true;
}

void StyleObjectValue::Swap(StyleObjectValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StyleObjectValue::InternalSwap(StyleObjectValue* other) {
  fill_color_.Swap(&other->fill_color_);
  stroke_color_.Swap(&other->stroke_color_);
  std::swap(stroke_width_, other->stroke_width_);
  std::swap(radius_, other->radius_);
  std::swap(text_size_, other->text_size_);
  std::swap(text_rotation_, other->text_rotation_);
  std::swap(text_anchor_, other->text_anchor_);
  std::swap(text_baseline_, other->text_baseline_);
  std::swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StyleObjectValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyleObjectValue_descriptor_;
  metadata.reflection = StyleObjectValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StyleObjectValue

// optional bytes fill_color = 1;
void StyleObjectValue::clear_fill_color() {
  fill_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StyleObjectValue::fill_color() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.fill_color)
  return fill_color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StyleObjectValue::set_fill_color(const ::std::string& value) {
  
  fill_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.fill_color)
}
 void StyleObjectValue::set_fill_color(const char* value) {
  
  fill_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleObjectValue.fill_color)
}
 void StyleObjectValue::set_fill_color(const void* value, size_t size) {
  
  fill_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleObjectValue.fill_color)
}
 ::std::string* StyleObjectValue::mutable_fill_color() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StyleObjectValue.fill_color)
  return fill_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StyleObjectValue::release_fill_color() {
  // @@protoc_insertion_point(field_release:xviz.StyleObjectValue.fill_color)
  
  return fill_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StyleObjectValue::set_allocated_fill_color(::std::string* fill_color) {
  if (fill_color != NULL) {
    
  } else {
    
  }
  fill_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fill_color);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleObjectValue.fill_color)
}

// optional bytes stroke_color = 2;
void StyleObjectValue::clear_stroke_color() {
  stroke_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StyleObjectValue::stroke_color() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.stroke_color)
  return stroke_color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StyleObjectValue::set_stroke_color(const ::std::string& value) {
  
  stroke_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.stroke_color)
}
 void StyleObjectValue::set_stroke_color(const char* value) {
  
  stroke_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleObjectValue.stroke_color)
}
 void StyleObjectValue::set_stroke_color(const void* value, size_t size) {
  
  stroke_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleObjectValue.stroke_color)
}
 ::std::string* StyleObjectValue::mutable_stroke_color() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StyleObjectValue.stroke_color)
  return stroke_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StyleObjectValue::release_stroke_color() {
  // @@protoc_insertion_point(field_release:xviz.StyleObjectValue.stroke_color)
  
  return stroke_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StyleObjectValue::set_allocated_stroke_color(::std::string* stroke_color) {
  if (stroke_color != NULL) {
    
  } else {
    
  }
  stroke_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stroke_color);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleObjectValue.stroke_color)
}

// optional float stroke_width = 3;
void StyleObjectValue::clear_stroke_width() {
  stroke_width_ = 0;
}
 float StyleObjectValue::stroke_width() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.stroke_width)
  return stroke_width_;
}
 void StyleObjectValue::set_stroke_width(float value) {
  
  stroke_width_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.stroke_width)
}

// optional float radius = 4;
void StyleObjectValue::clear_radius() {
  radius_ = 0;
}
 float StyleObjectValue::radius() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.radius)
  return radius_;
}
 void StyleObjectValue::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.radius)
}

// optional float text_size = 5;
void StyleObjectValue::clear_text_size() {
  text_size_ = 0;
}
 float StyleObjectValue::text_size() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.text_size)
  return text_size_;
}
 void StyleObjectValue::set_text_size(float value) {
  
  text_size_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.text_size)
}

// optional float text_rotation = 6;
void StyleObjectValue::clear_text_rotation() {
  text_rotation_ = 0;
}
 float StyleObjectValue::text_rotation() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.text_rotation)
  return text_rotation_;
}
 void StyleObjectValue::set_text_rotation(float value) {
  
  text_rotation_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.text_rotation)
}

// optional .xviz.TextAnchor text_anchor = 7;
void StyleObjectValue::clear_text_anchor() {
  text_anchor_ = 0;
}
 ::xviz::TextAnchor StyleObjectValue::text_anchor() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.text_anchor)
  return static_cast< ::xviz::TextAnchor >(text_anchor_);
}
 void StyleObjectValue::set_text_anchor(::xviz::TextAnchor value) {
  
  text_anchor_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.text_anchor)
}

// optional .xviz.TextAlignmentBaseline text_baseline = 8;
void StyleObjectValue::clear_text_baseline() {
  text_baseline_ = 0;
}
 ::xviz::TextAlignmentBaseline StyleObjectValue::text_baseline() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.text_baseline)
  return static_cast< ::xviz::TextAlignmentBaseline >(text_baseline_);
}
 void StyleObjectValue::set_text_baseline(::xviz::TextAlignmentBaseline value) {
  
  text_baseline_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.text_baseline)
}

// optional float height = 9;
void StyleObjectValue::clear_height() {
  height_ = 0;
}
 float StyleObjectValue::height() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.height)
  return height_;
}
 void StyleObjectValue::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StyleStreamValue::kFillColorFieldNumber;
const int StyleStreamValue::kStrokeColorFieldNumber;
const int StyleStreamValue::kStrokeWidthFieldNumber;
const int StyleStreamValue::kRadiusFieldNumber;
const int StyleStreamValue::kTextSizeFieldNumber;
const int StyleStreamValue::kTextRotationFieldNumber;
const int StyleStreamValue::kTextAnchorFieldNumber;
const int StyleStreamValue::kTextBaselineFieldNumber;
const int StyleStreamValue::kHeightFieldNumber;
const int StyleStreamValue::kRadiusMinPixelsFieldNumber;
const int StyleStreamValue::kRadiusMaxPixelsFieldNumber;
const int StyleStreamValue::kStrokeWidthMinPixelsFieldNumber;
const int StyleStreamValue::kStrokeWidthMaxPixelsFieldNumber;
const int StyleStreamValue::kOpacityFieldNumber;
const int StyleStreamValue::kStrokedFieldNumber;
const int StyleStreamValue::kFilledFieldNumber;
const int StyleStreamValue::kExtrudedFieldNumber;
const int StyleStreamValue::kRadiusPixelsFieldNumber;
const int StyleStreamValue::kFontWeightFieldNumber;
const int StyleStreamValue::kFontFamilyFieldNumber;
const int StyleStreamValue::kPointCloudModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StyleStreamValue::StyleStreamValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.StyleStreamValue)
}

void StyleStreamValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StyleStreamValue::StyleStreamValue(const StyleStreamValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.StyleStreamValue)
}

void StyleStreamValue::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fill_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stroke_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stroke_width_ = 0;
  radius_ = 0;
  text_size_ = 0;
  text_rotation_ = 0;
  text_anchor_ = 0;
  text_baseline_ = 0;
  height_ = 0;
  radius_min_pixels_ = 0u;
  radius_max_pixels_ = 0u;
  stroke_width_min_pixels_ = 0u;
  stroke_width_max_pixels_ = 0u;
  opacity_ = 0;
  stroked_ = false;
  filled_ = false;
  extruded_ = false;
  radius_pixels_ = 0u;
  font_weight_ = 0u;
  font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  point_cloud_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StyleStreamValue::~StyleStreamValue() {
  // @@protoc_insertion_point(destructor:xviz.StyleStreamValue)
  SharedDtor();
}

void StyleStreamValue::SharedDtor() {
  fill_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stroke_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  font_family_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  point_cloud_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StyleStreamValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleStreamValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleStreamValue_descriptor_;
}

const StyleStreamValue& StyleStreamValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_style_2eproto();
  return *default_instance_;
}

StyleStreamValue* StyleStreamValue::default_instance_ = NULL;

StyleStreamValue* StyleStreamValue::New(::google::protobuf::Arena* arena) const {
  StyleStreamValue* n = new StyleStreamValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StyleStreamValue::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.StyleStreamValue)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StyleStreamValue, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StyleStreamValue*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(stroke_width_, text_baseline_);
  fill_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stroke_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(height_, filled_);
  ZR_(extruded_, radius_pixels_);
  font_weight_ = 0u;
  font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  point_cloud_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool StyleStreamValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.StyleStreamValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes fill_color = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fill_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stroke_color;
        break;
      }

      // optional bytes stroke_color = 2;
      case 2: {
        if (tag == 18) {
         parse_stroke_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stroke_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_stroke_width;
        break;
      }

      // optional float stroke_width = 3;
      case 3: {
        if (tag == 29) {
         parse_stroke_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stroke_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_radius;
        break;
      }

      // optional float radius = 4;
      case 4: {
        if (tag == 37) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_text_size;
        break;
      }

      // optional float text_size = 5;
      case 5: {
        if (tag == 45) {
         parse_text_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &text_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_text_rotation;
        break;
      }

      // optional float text_rotation = 6;
      case 6: {
        if (tag == 53) {
         parse_text_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &text_rotation_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_text_anchor;
        break;
      }

      // optional .xviz.TextAnchor text_anchor = 7;
      case 7: {
        if (tag == 56) {
         parse_text_anchor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_text_anchor(static_cast< ::xviz::TextAnchor >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_text_baseline;
        break;
      }

      // optional .xviz.TextAlignmentBaseline text_baseline = 8;
      case 8: {
        if (tag == 64) {
         parse_text_baseline:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_text_baseline(static_cast< ::xviz::TextAlignmentBaseline >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_height;
        break;
      }

      // optional float height = 9;
      case 9: {
        if (tag == 77) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_radius_min_pixels;
        break;
      }

      // optional uint32 radius_min_pixels = 10;
      case 10: {
        if (tag == 80) {
         parse_radius_min_pixels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radius_min_pixels_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_radius_max_pixels;
        break;
      }

      // optional uint32 radius_max_pixels = 11;
      case 11: {
        if (tag == 88) {
         parse_radius_max_pixels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radius_max_pixels_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_stroke_width_min_pixels;
        break;
      }

      // optional uint32 stroke_width_min_pixels = 12;
      case 12: {
        if (tag == 96) {
         parse_stroke_width_min_pixels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stroke_width_min_pixels_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_stroke_width_max_pixels;
        break;
      }

      // optional uint32 stroke_width_max_pixels = 13;
      case 13: {
        if (tag == 104) {
         parse_stroke_width_max_pixels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stroke_width_max_pixels_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_opacity;
        break;
      }

      // optional float opacity = 14;
      case 14: {
        if (tag == 117) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opacity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_stroked;
        break;
      }

      // optional bool stroked = 15;
      case 15: {
        if (tag == 120) {
         parse_stroked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stroked_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_filled;
        break;
      }

      // optional bool filled = 16;
      case 16: {
        if (tag == 128) {
         parse_filled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_extruded;
        break;
      }

      // optional bool extruded = 17;
      case 17: {
        if (tag == 136) {
         parse_extruded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extruded_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_radius_pixels;
        break;
      }

      // optional uint32 radius_pixels = 18;
      case 18: {
        if (tag == 144) {
         parse_radius_pixels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radius_pixels_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_font_weight;
        break;
      }

      // optional uint32 font_weight = 19;
      case 19: {
        if (tag == 152) {
         parse_font_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &font_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_font_family;
        break;
      }

      // optional string font_family = 20;
      case 20: {
        if (tag == 162) {
         parse_font_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font_family()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->font_family().data(), this->font_family().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StyleStreamValue.font_family"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_point_cloud_mode;
        break;
      }

      // optional string point_cloud_mode = 21;
      case 21: {
        if (tag == 170) {
         parse_point_cloud_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_point_cloud_mode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->point_cloud_mode().data(), this->point_cloud_mode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StyleStreamValue.point_cloud_mode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.StyleStreamValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.StyleStreamValue)
  return false;
#undef DO_
}

void StyleStreamValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.StyleStreamValue)
  // optional bytes fill_color = 1;
  if (this->fill_color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->fill_color(), output);
  }

  // optional bytes stroke_color = 2;
  if (this->stroke_color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->stroke_color(), output);
  }

  // optional float stroke_width = 3;
  if (this->stroke_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->stroke_width(), output);
  }

  // optional float radius = 4;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->radius(), output);
  }

  // optional float text_size = 5;
  if (this->text_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->text_size(), output);
  }

  // optional float text_rotation = 6;
  if (this->text_rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->text_rotation(), output);
  }

  // optional .xviz.TextAnchor text_anchor = 7;
  if (this->text_anchor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->text_anchor(), output);
  }

  // optional .xviz.TextAlignmentBaseline text_baseline = 8;
  if (this->text_baseline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->text_baseline(), output);
  }

  // optional float height = 9;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->height(), output);
  }

  // optional uint32 radius_min_pixels = 10;
  if (this->radius_min_pixels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->radius_min_pixels(), output);
  }

  // optional uint32 radius_max_pixels = 11;
  if (this->radius_max_pixels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->radius_max_pixels(), output);
  }

  // optional uint32 stroke_width_min_pixels = 12;
  if (this->stroke_width_min_pixels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->stroke_width_min_pixels(), output);
  }

  // optional uint32 stroke_width_max_pixels = 13;
  if (this->stroke_width_max_pixels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->stroke_width_max_pixels(), output);
  }

  // optional float opacity = 14;
  if (this->opacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->opacity(), output);
  }

  // optional bool stroked = 15;
  if (this->stroked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->stroked(), output);
  }

  // optional bool filled = 16;
  if (this->filled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->filled(), output);
  }

  // optional bool extruded = 17;
  if (this->extruded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->extruded(), output);
  }

  // optional uint32 radius_pixels = 18;
  if (this->radius_pixels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->radius_pixels(), output);
  }

  // optional uint32 font_weight = 19;
  if (this->font_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->font_weight(), output);
  }

  // optional string font_family = 20;
  if (this->font_family().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->font_family().data(), this->font_family().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.StyleStreamValue.font_family");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->font_family(), output);
  }

  // optional string point_cloud_mode = 21;
  if (this->point_cloud_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->point_cloud_mode().data(), this->point_cloud_mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.StyleStreamValue.point_cloud_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->point_cloud_mode(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.StyleStreamValue)
}

::google::protobuf::uint8* StyleStreamValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.StyleStreamValue)
  // optional bytes fill_color = 1;
  if (this->fill_color().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fill_color(), target);
  }

  // optional bytes stroke_color = 2;
  if (this->stroke_color().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->stroke_color(), target);
  }

  // optional float stroke_width = 3;
  if (this->stroke_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->stroke_width(), target);
  }

  // optional float radius = 4;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->radius(), target);
  }

  // optional float text_size = 5;
  if (this->text_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->text_size(), target);
  }

  // optional float text_rotation = 6;
  if (this->text_rotation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->text_rotation(), target);
  }

  // optional .xviz.TextAnchor text_anchor = 7;
  if (this->text_anchor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->text_anchor(), target);
  }

  // optional .xviz.TextAlignmentBaseline text_baseline = 8;
  if (this->text_baseline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->text_baseline(), target);
  }

  // optional float height = 9;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->height(), target);
  }

  // optional uint32 radius_min_pixels = 10;
  if (this->radius_min_pixels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->radius_min_pixels(), target);
  }

  // optional uint32 radius_max_pixels = 11;
  if (this->radius_max_pixels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->radius_max_pixels(), target);
  }

  // optional uint32 stroke_width_min_pixels = 12;
  if (this->stroke_width_min_pixels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->stroke_width_min_pixels(), target);
  }

  // optional uint32 stroke_width_max_pixels = 13;
  if (this->stroke_width_max_pixels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->stroke_width_max_pixels(), target);
  }

  // optional float opacity = 14;
  if (this->opacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->opacity(), target);
  }

  // optional bool stroked = 15;
  if (this->stroked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->stroked(), target);
  }

  // optional bool filled = 16;
  if (this->filled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->filled(), target);
  }

  // optional bool extruded = 17;
  if (this->extruded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->extruded(), target);
  }

  // optional uint32 radius_pixels = 18;
  if (this->radius_pixels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->radius_pixels(), target);
  }

  // optional uint32 font_weight = 19;
  if (this->font_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->font_weight(), target);
  }

  // optional string font_family = 20;
  if (this->font_family().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->font_family().data(), this->font_family().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.StyleStreamValue.font_family");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->font_family(), target);
  }

  // optional string point_cloud_mode = 21;
  if (this->point_cloud_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->point_cloud_mode().data(), this->point_cloud_mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.StyleStreamValue.point_cloud_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->point_cloud_mode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.StyleStreamValue)
  return target;
}

int StyleStreamValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.StyleStreamValue)
  int total_size = 0;

  // optional bytes fill_color = 1;
  if (this->fill_color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fill_color());
  }

  // optional bytes stroke_color = 2;
  if (this->stroke_color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->stroke_color());
  }

  // optional float stroke_width = 3;
  if (this->stroke_width() != 0) {
    total_size += 1 + 4;
  }

  // optional float radius = 4;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  // optional float text_size = 5;
  if (this->text_size() != 0) {
    total_size += 1 + 4;
  }

  // optional float text_rotation = 6;
  if (this->text_rotation() != 0) {
    total_size += 1 + 4;
  }

  // optional .xviz.TextAnchor text_anchor = 7;
  if (this->text_anchor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->text_anchor());
  }

  // optional .xviz.TextAlignmentBaseline text_baseline = 8;
  if (this->text_baseline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->text_baseline());
  }

  // optional float height = 9;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 radius_min_pixels = 10;
  if (this->radius_min_pixels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->radius_min_pixels());
  }

  // optional uint32 radius_max_pixels = 11;
  if (this->radius_max_pixels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->radius_max_pixels());
  }

  // optional uint32 stroke_width_min_pixels = 12;
  if (this->stroke_width_min_pixels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stroke_width_min_pixels());
  }

  // optional uint32 stroke_width_max_pixels = 13;
  if (this->stroke_width_max_pixels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stroke_width_max_pixels());
  }

  // optional float opacity = 14;
  if (this->opacity() != 0) {
    total_size += 1 + 4;
  }

  // optional bool stroked = 15;
  if (this->stroked() != 0) {
    total_size += 1 + 1;
  }

  // optional bool filled = 16;
  if (this->filled() != 0) {
    total_size += 2 + 1;
  }

  // optional bool extruded = 17;
  if (this->extruded() != 0) {
    total_size += 2 + 1;
  }

  // optional uint32 radius_pixels = 18;
  if (this->radius_pixels() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->radius_pixels());
  }

  // optional uint32 font_weight = 19;
  if (this->font_weight() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->font_weight());
  }

  // optional string font_family = 20;
  if (this->font_family().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->font_family());
  }

  // optional string point_cloud_mode = 21;
  if (this->point_cloud_mode().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->point_cloud_mode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleStreamValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.StyleStreamValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StyleStreamValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StyleStreamValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.StyleStreamValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.StyleStreamValue)
    MergeFrom(*source);
  }
}

void StyleStreamValue::MergeFrom(const StyleStreamValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.StyleStreamValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.fill_color().size() > 0) {

    fill_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fill_color_);
  }
  if (from.stroke_color().size() > 0) {

    stroke_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stroke_color_);
  }
  if (from.stroke_width() != 0) {
    set_stroke_width(from.stroke_width());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.text_size() != 0) {
    set_text_size(from.text_size());
  }
  if (from.text_rotation() != 0) {
    set_text_rotation(from.text_rotation());
  }
  if (from.text_anchor() != 0) {
    set_text_anchor(from.text_anchor());
  }
  if (from.text_baseline() != 0) {
    set_text_baseline(from.text_baseline());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.radius_min_pixels() != 0) {
    set_radius_min_pixels(from.radius_min_pixels());
  }
  if (from.radius_max_pixels() != 0) {
    set_radius_max_pixels(from.radius_max_pixels());
  }
  if (from.stroke_width_min_pixels() != 0) {
    set_stroke_width_min_pixels(from.stroke_width_min_pixels());
  }
  if (from.stroke_width_max_pixels() != 0) {
    set_stroke_width_max_pixels(from.stroke_width_max_pixels());
  }
  if (from.opacity() != 0) {
    set_opacity(from.opacity());
  }
  if (from.stroked() != 0) {
    set_stroked(from.stroked());
  }
  if (from.filled() != 0) {
    set_filled(from.filled());
  }
  if (from.extruded() != 0) {
    set_extruded(from.extruded());
  }
  if (from.radius_pixels() != 0) {
    set_radius_pixels(from.radius_pixels());
  }
  if (from.font_weight() != 0) {
    set_font_weight(from.font_weight());
  }
  if (from.font_family().size() > 0) {

    font_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.font_family_);
  }
  if (from.point_cloud_mode().size() > 0) {

    point_cloud_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.point_cloud_mode_);
  }
}

void StyleStreamValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.StyleStreamValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleStreamValue::CopyFrom(const StyleStreamValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.StyleStreamValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleStreamValue::IsInitialized() const {

  return true;
}

void StyleStreamValue::Swap(StyleStreamValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StyleStreamValue::InternalSwap(StyleStreamValue* other) {
  fill_color_.Swap(&other->fill_color_);
  stroke_color_.Swap(&other->stroke_color_);
  std::swap(stroke_width_, other->stroke_width_);
  std::swap(radius_, other->radius_);
  std::swap(text_size_, other->text_size_);
  std::swap(text_rotation_, other->text_rotation_);
  std::swap(text_anchor_, other->text_anchor_);
  std::swap(text_baseline_, other->text_baseline_);
  std::swap(height_, other->height_);
  std::swap(radius_min_pixels_, other->radius_min_pixels_);
  std::swap(radius_max_pixels_, other->radius_max_pixels_);
  std::swap(stroke_width_min_pixels_, other->stroke_width_min_pixels_);
  std::swap(stroke_width_max_pixels_, other->stroke_width_max_pixels_);
  std::swap(opacity_, other->opacity_);
  std::swap(stroked_, other->stroked_);
  std::swap(filled_, other->filled_);
  std::swap(extruded_, other->extruded_);
  std::swap(radius_pixels_, other->radius_pixels_);
  std::swap(font_weight_, other->font_weight_);
  font_family_.Swap(&other->font_family_);
  point_cloud_mode_.Swap(&other->point_cloud_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StyleStreamValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyleStreamValue_descriptor_;
  metadata.reflection = StyleStreamValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StyleStreamValue

// optional bytes fill_color = 1;
void StyleStreamValue::clear_fill_color() {
  fill_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StyleStreamValue::fill_color() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.fill_color)
  return fill_color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StyleStreamValue::set_fill_color(const ::std::string& value) {
  
  fill_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.fill_color)
}
 void StyleStreamValue::set_fill_color(const char* value) {
  
  fill_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleStreamValue.fill_color)
}
 void StyleStreamValue::set_fill_color(const void* value, size_t size) {
  
  fill_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleStreamValue.fill_color)
}
 ::std::string* StyleStreamValue::mutable_fill_color() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StyleStreamValue.fill_color)
  return fill_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StyleStreamValue::release_fill_color() {
  // @@protoc_insertion_point(field_release:xviz.StyleStreamValue.fill_color)
  
  return fill_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StyleStreamValue::set_allocated_fill_color(::std::string* fill_color) {
  if (fill_color != NULL) {
    
  } else {
    
  }
  fill_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fill_color);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleStreamValue.fill_color)
}

// optional bytes stroke_color = 2;
void StyleStreamValue::clear_stroke_color() {
  stroke_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StyleStreamValue::stroke_color() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.stroke_color)
  return stroke_color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StyleStreamValue::set_stroke_color(const ::std::string& value) {
  
  stroke_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.stroke_color)
}
 void StyleStreamValue::set_stroke_color(const char* value) {
  
  stroke_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleStreamValue.stroke_color)
}
 void StyleStreamValue::set_stroke_color(const void* value, size_t size) {
  
  stroke_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleStreamValue.stroke_color)
}
 ::std::string* StyleStreamValue::mutable_stroke_color() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StyleStreamValue.stroke_color)
  return stroke_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StyleStreamValue::release_stroke_color() {
  // @@protoc_insertion_point(field_release:xviz.StyleStreamValue.stroke_color)
  
  return stroke_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StyleStreamValue::set_allocated_stroke_color(::std::string* stroke_color) {
  if (stroke_color != NULL) {
    
  } else {
    
  }
  stroke_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stroke_color);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleStreamValue.stroke_color)
}

// optional float stroke_width = 3;
void StyleStreamValue::clear_stroke_width() {
  stroke_width_ = 0;
}
 float StyleStreamValue::stroke_width() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.stroke_width)
  return stroke_width_;
}
 void StyleStreamValue::set_stroke_width(float value) {
  
  stroke_width_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.stroke_width)
}

// optional float radius = 4;
void StyleStreamValue::clear_radius() {
  radius_ = 0;
}
 float StyleStreamValue::radius() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.radius)
  return radius_;
}
 void StyleStreamValue::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.radius)
}

// optional float text_size = 5;
void StyleStreamValue::clear_text_size() {
  text_size_ = 0;
}
 float StyleStreamValue::text_size() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.text_size)
  return text_size_;
}
 void StyleStreamValue::set_text_size(float value) {
  
  text_size_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.text_size)
}

// optional float text_rotation = 6;
void StyleStreamValue::clear_text_rotation() {
  text_rotation_ = 0;
}
 float StyleStreamValue::text_rotation() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.text_rotation)
  return text_rotation_;
}
 void StyleStreamValue::set_text_rotation(float value) {
  
  text_rotation_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.text_rotation)
}

// optional .xviz.TextAnchor text_anchor = 7;
void StyleStreamValue::clear_text_anchor() {
  text_anchor_ = 0;
}
 ::xviz::TextAnchor StyleStreamValue::text_anchor() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.text_anchor)
  return static_cast< ::xviz::TextAnchor >(text_anchor_);
}
 void StyleStreamValue::set_text_anchor(::xviz::TextAnchor value) {
  
  text_anchor_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.text_anchor)
}

// optional .xviz.TextAlignmentBaseline text_baseline = 8;
void StyleStreamValue::clear_text_baseline() {
  text_baseline_ = 0;
}
 ::xviz::TextAlignmentBaseline StyleStreamValue::text_baseline() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.text_baseline)
  return static_cast< ::xviz::TextAlignmentBaseline >(text_baseline_);
}
 void StyleStreamValue::set_text_baseline(::xviz::TextAlignmentBaseline value) {
  
  text_baseline_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.text_baseline)
}

// optional float height = 9;
void StyleStreamValue::clear_height() {
  height_ = 0;
}
 float StyleStreamValue::height() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.height)
  return height_;
}
 void StyleStreamValue::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.height)
}

// optional uint32 radius_min_pixels = 10;
void StyleStreamValue::clear_radius_min_pixels() {
  radius_min_pixels_ = 0u;
}
 ::google::protobuf::uint32 StyleStreamValue::radius_min_pixels() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.radius_min_pixels)
  return radius_min_pixels_;
}
 void StyleStreamValue::set_radius_min_pixels(::google::protobuf::uint32 value) {
  
  radius_min_pixels_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.radius_min_pixels)
}

// optional uint32 radius_max_pixels = 11;
void StyleStreamValue::clear_radius_max_pixels() {
  radius_max_pixels_ = 0u;
}
 ::google::protobuf::uint32 StyleStreamValue::radius_max_pixels() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.radius_max_pixels)
  return radius_max_pixels_;
}
 void StyleStreamValue::set_radius_max_pixels(::google::protobuf::uint32 value) {
  
  radius_max_pixels_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.radius_max_pixels)
}

// optional uint32 stroke_width_min_pixels = 12;
void StyleStreamValue::clear_stroke_width_min_pixels() {
  stroke_width_min_pixels_ = 0u;
}
 ::google::protobuf::uint32 StyleStreamValue::stroke_width_min_pixels() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.stroke_width_min_pixels)
  return stroke_width_min_pixels_;
}
 void StyleStreamValue::set_stroke_width_min_pixels(::google::protobuf::uint32 value) {
  
  stroke_width_min_pixels_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.stroke_width_min_pixels)
}

// optional uint32 stroke_width_max_pixels = 13;
void StyleStreamValue::clear_stroke_width_max_pixels() {
  stroke_width_max_pixels_ = 0u;
}
 ::google::protobuf::uint32 StyleStreamValue::stroke_width_max_pixels() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.stroke_width_max_pixels)
  return stroke_width_max_pixels_;
}
 void StyleStreamValue::set_stroke_width_max_pixels(::google::protobuf::uint32 value) {
  
  stroke_width_max_pixels_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.stroke_width_max_pixels)
}

// optional float opacity = 14;
void StyleStreamValue::clear_opacity() {
  opacity_ = 0;
}
 float StyleStreamValue::opacity() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.opacity)
  return opacity_;
}
 void StyleStreamValue::set_opacity(float value) {
  
  opacity_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.opacity)
}

// optional bool stroked = 15;
void StyleStreamValue::clear_stroked() {
  stroked_ = false;
}
 bool StyleStreamValue::stroked() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.stroked)
  return stroked_;
}
 void StyleStreamValue::set_stroked(bool value) {
  
  stroked_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.stroked)
}

// optional bool filled = 16;
void StyleStreamValue::clear_filled() {
  filled_ = false;
}
 bool StyleStreamValue::filled() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.filled)
  return filled_;
}
 void StyleStreamValue::set_filled(bool value) {
  
  filled_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.filled)
}

// optional bool extruded = 17;
void StyleStreamValue::clear_extruded() {
  extruded_ = false;
}
 bool StyleStreamValue::extruded() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.extruded)
  return extruded_;
}
 void StyleStreamValue::set_extruded(bool value) {
  
  extruded_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.extruded)
}

// optional uint32 radius_pixels = 18;
void StyleStreamValue::clear_radius_pixels() {
  radius_pixels_ = 0u;
}
 ::google::protobuf::uint32 StyleStreamValue::radius_pixels() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.radius_pixels)
  return radius_pixels_;
}
 void StyleStreamValue::set_radius_pixels(::google::protobuf::uint32 value) {
  
  radius_pixels_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.radius_pixels)
}

// optional uint32 font_weight = 19;
void StyleStreamValue::clear_font_weight() {
  font_weight_ = 0u;
}
 ::google::protobuf::uint32 StyleStreamValue::font_weight() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.font_weight)
  return font_weight_;
}
 void StyleStreamValue::set_font_weight(::google::protobuf::uint32 value) {
  
  font_weight_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.font_weight)
}

// optional string font_family = 20;
void StyleStreamValue::clear_font_family() {
  font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StyleStreamValue::font_family() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.font_family)
  return font_family_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StyleStreamValue::set_font_family(const ::std::string& value) {
  
  font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.font_family)
}
 void StyleStreamValue::set_font_family(const char* value) {
  
  font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleStreamValue.font_family)
}
 void StyleStreamValue::set_font_family(const char* value, size_t size) {
  
  font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleStreamValue.font_family)
}
 ::std::string* StyleStreamValue::mutable_font_family() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StyleStreamValue.font_family)
  return font_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StyleStreamValue::release_font_family() {
  // @@protoc_insertion_point(field_release:xviz.StyleStreamValue.font_family)
  
  return font_family_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StyleStreamValue::set_allocated_font_family(::std::string* font_family) {
  if (font_family != NULL) {
    
  } else {
    
  }
  font_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), font_family);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleStreamValue.font_family)
}

// optional string point_cloud_mode = 21;
void StyleStreamValue::clear_point_cloud_mode() {
  point_cloud_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StyleStreamValue::point_cloud_mode() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.point_cloud_mode)
  return point_cloud_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StyleStreamValue::set_point_cloud_mode(const ::std::string& value) {
  
  point_cloud_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.point_cloud_mode)
}
 void StyleStreamValue::set_point_cloud_mode(const char* value) {
  
  point_cloud_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleStreamValue.point_cloud_mode)
}
 void StyleStreamValue::set_point_cloud_mode(const char* value, size_t size) {
  
  point_cloud_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleStreamValue.point_cloud_mode)
}
 ::std::string* StyleStreamValue::mutable_point_cloud_mode() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StyleStreamValue.point_cloud_mode)
  return point_cloud_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StyleStreamValue::release_point_cloud_mode() {
  // @@protoc_insertion_point(field_release:xviz.StyleStreamValue.point_cloud_mode)
  
  return point_cloud_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StyleStreamValue::set_allocated_point_cloud_mode(::std::string* point_cloud_mode) {
  if (point_cloud_mode != NULL) {
    
  } else {
    
  }
  point_cloud_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), point_cloud_mode);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleStreamValue.point_cloud_mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Color)
}

void Color::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Color::Color(const Color& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.Color)
}

void Color::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  values_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:xviz.Color)
  SharedDtor();
}

void Color::SharedDtor() {
  values_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Color_descriptor_;
}

const Color& Color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_style_2eproto();
  return *default_instance_;
}

Color* Color::default_instance_ = NULL;

Color* Color::New(::google::protobuf::Arena* arena) const {
  Color* n = new Color;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Color)
  values_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes values = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Color)
  // optional bytes values = 1;
  if (this->values().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->values(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.Color)
}

::google::protobuf::uint8* Color::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Color)
  // optional bytes values = 1;
  if (this->values().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->values(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.Color)
  return target;
}

int Color::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Color)
  int total_size = 0;

  // optional bytes values = 1;
  if (this->values().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->values());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Color)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Color* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Color>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Color)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.values().size() > 0) {

    values_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.values_);
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {

  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  values_.Swap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Color_descriptor_;
  metadata.reflection = Color_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Color

// optional bytes values = 1;
void Color::clear_values() {
  values_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Color::values() const {
  // @@protoc_insertion_point(field_get:xviz.Color.values)
  return values_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Color::set_values(const ::std::string& value) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Color.values)
}
 void Color::set_values(const char* value) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Color.values)
}
 void Color::set_values(const void* value, size_t size) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Color.values)
}
 ::std::string* Color::mutable_values() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Color.values)
  return values_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Color::release_values() {
  // @@protoc_insertion_point(field_release:xviz.Color.values)
  
  return values_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Color::set_allocated_values(::std::string* values) {
  if (values != NULL) {
    
  } else {
    
  }
  values_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), values);
  // @@protoc_insertion_point(field_set_allocated:xviz.Color.values)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

// @@protoc_insertion_point(global_scope)
