// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#include "proto/core.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_annotation_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_annotation_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Visual;
}  // namespace protobuf_annotation_2eproto
namespace protobuf_core_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Link;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MapOrigin;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Values;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VariableBase;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnnotationState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FutureInstances;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Pose;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StreamSet_AnnotationsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StreamSet_FutureInstancesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StreamSet_LinksEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StreamSet_PosesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StreamSet_PrimitivesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StreamSet_UiPrimitivesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StreamSet_VariablesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TimeSeriesState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UIPrimitiveState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VariableState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Variable;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_core_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_PrimitiveState;
}  // namespace protobuf_core_2eproto
namespace protobuf_primitives_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_primitives_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Circle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_primitives_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Image;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_primitives_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_primitives_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Polygon;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_primitives_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Polyline;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_primitives_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Stadium;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_primitives_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Text;
}  // namespace protobuf_primitives_2eproto
namespace protobuf_uiprimitives_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_uiprimitives_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TreeTable;
}  // namespace protobuf_uiprimitives_2eproto
namespace xviz {
class StreamSet_PosesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamSet_PosesEntry_DoNotUse>
      _instance;
} _StreamSet_PosesEntry_DoNotUse_default_instance_;
class StreamSet_PrimitivesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamSet_PrimitivesEntry_DoNotUse>
      _instance;
} _StreamSet_PrimitivesEntry_DoNotUse_default_instance_;
class StreamSet_FutureInstancesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamSet_FutureInstancesEntry_DoNotUse>
      _instance;
} _StreamSet_FutureInstancesEntry_DoNotUse_default_instance_;
class StreamSet_VariablesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamSet_VariablesEntry_DoNotUse>
      _instance;
} _StreamSet_VariablesEntry_DoNotUse_default_instance_;
class StreamSet_AnnotationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamSet_AnnotationsEntry_DoNotUse>
      _instance;
} _StreamSet_AnnotationsEntry_DoNotUse_default_instance_;
class StreamSet_UiPrimitivesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamSet_UiPrimitivesEntry_DoNotUse>
      _instance;
} _StreamSet_UiPrimitivesEntry_DoNotUse_default_instance_;
class StreamSet_LinksEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamSet_LinksEntry_DoNotUse>
      _instance;
} _StreamSet_LinksEntry_DoNotUse_default_instance_;
class StreamSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamSet>
      _instance;
} _StreamSet_default_instance_;
class PoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pose>
      _instance;
} _Pose_default_instance_;
class MapOriginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapOrigin>
      _instance;
} _MapOrigin_default_instance_;
class PrimitiveStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrimitiveState>
      _instance;
} _PrimitiveState_default_instance_;
class UIPrimitiveStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UIPrimitiveState>
      _instance;
} _UIPrimitiveState_default_instance_;
class TimeSeriesStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeSeriesState>
      _instance;
} _TimeSeriesState_default_instance_;
class FutureInstancesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureInstances>
      _instance;
} _FutureInstances_default_instance_;
class VariableStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VariableState>
      _instance;
} _VariableState_default_instance_;
class AnnotationStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnnotationState>
      _instance;
} _AnnotationState_default_instance_;
class VariableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Variable>
      _instance;
} _Variable_default_instance_;
class VariableBaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VariableBase>
      _instance;
} _VariableBase_default_instance_;
class ValuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Values>
      _instance;
} _Values_default_instance_;
class LinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Link>
      _instance;
} _Link_default_instance_;
}  // namespace xviz
namespace protobuf_core_2eproto {
static void InitDefaultsStreamSet_PosesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_StreamSet_PosesEntry_DoNotUse_default_instance_;
    new (ptr) ::xviz::StreamSet_PosesEntry_DoNotUse();
  }
  ::xviz::StreamSet_PosesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StreamSet_PosesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStreamSet_PosesEntry_DoNotUse}, {
      &protobuf_core_2eproto::scc_info_Pose.base,}};

static void InitDefaultsStreamSet_PrimitivesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_StreamSet_PrimitivesEntry_DoNotUse_default_instance_;
    new (ptr) ::xviz::StreamSet_PrimitivesEntry_DoNotUse();
  }
  ::xviz::StreamSet_PrimitivesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StreamSet_PrimitivesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStreamSet_PrimitivesEntry_DoNotUse}, {
      &protobuf_core_2eproto::scc_info_PrimitiveState.base,}};

static void InitDefaultsStreamSet_FutureInstancesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_StreamSet_FutureInstancesEntry_DoNotUse_default_instance_;
    new (ptr) ::xviz::StreamSet_FutureInstancesEntry_DoNotUse();
  }
  ::xviz::StreamSet_FutureInstancesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StreamSet_FutureInstancesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStreamSet_FutureInstancesEntry_DoNotUse}, {
      &protobuf_core_2eproto::scc_info_FutureInstances.base,}};

static void InitDefaultsStreamSet_VariablesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_StreamSet_VariablesEntry_DoNotUse_default_instance_;
    new (ptr) ::xviz::StreamSet_VariablesEntry_DoNotUse();
  }
  ::xviz::StreamSet_VariablesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StreamSet_VariablesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStreamSet_VariablesEntry_DoNotUse}, {
      &protobuf_core_2eproto::scc_info_VariableState.base,}};

static void InitDefaultsStreamSet_AnnotationsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_StreamSet_AnnotationsEntry_DoNotUse_default_instance_;
    new (ptr) ::xviz::StreamSet_AnnotationsEntry_DoNotUse();
  }
  ::xviz::StreamSet_AnnotationsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StreamSet_AnnotationsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStreamSet_AnnotationsEntry_DoNotUse}, {
      &protobuf_core_2eproto::scc_info_AnnotationState.base,}};

static void InitDefaultsStreamSet_UiPrimitivesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_StreamSet_UiPrimitivesEntry_DoNotUse_default_instance_;
    new (ptr) ::xviz::StreamSet_UiPrimitivesEntry_DoNotUse();
  }
  ::xviz::StreamSet_UiPrimitivesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StreamSet_UiPrimitivesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStreamSet_UiPrimitivesEntry_DoNotUse}, {
      &protobuf_core_2eproto::scc_info_UIPrimitiveState.base,}};

static void InitDefaultsStreamSet_LinksEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_StreamSet_LinksEntry_DoNotUse_default_instance_;
    new (ptr) ::xviz::StreamSet_LinksEntry_DoNotUse();
  }
  ::xviz::StreamSet_LinksEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StreamSet_LinksEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStreamSet_LinksEntry_DoNotUse}, {
      &protobuf_core_2eproto::scc_info_Link.base,}};

static void InitDefaultsStreamSet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_StreamSet_default_instance_;
    new (ptr) ::xviz::StreamSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::StreamSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_StreamSet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsStreamSet}, {
      &protobuf_core_2eproto::scc_info_StreamSet_PosesEntry_DoNotUse.base,
      &protobuf_core_2eproto::scc_info_StreamSet_PrimitivesEntry_DoNotUse.base,
      &protobuf_core_2eproto::scc_info_TimeSeriesState.base,
      &protobuf_core_2eproto::scc_info_StreamSet_FutureInstancesEntry_DoNotUse.base,
      &protobuf_core_2eproto::scc_info_StreamSet_VariablesEntry_DoNotUse.base,
      &protobuf_core_2eproto::scc_info_StreamSet_AnnotationsEntry_DoNotUse.base,
      &protobuf_core_2eproto::scc_info_StreamSet_UiPrimitivesEntry_DoNotUse.base,
      &protobuf_core_2eproto::scc_info_StreamSet_LinksEntry_DoNotUse.base,}};

static void InitDefaultsPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_Pose_default_instance_;
    new (ptr) ::xviz::Pose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::Pose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Pose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPose}, {
      &protobuf_core_2eproto::scc_info_MapOrigin.base,}};

static void InitDefaultsMapOrigin() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_MapOrigin_default_instance_;
    new (ptr) ::xviz::MapOrigin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::MapOrigin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MapOrigin =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMapOrigin}, {}};

static void InitDefaultsPrimitiveState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_PrimitiveState_default_instance_;
    new (ptr) ::xviz::PrimitiveState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::PrimitiveState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_PrimitiveState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsPrimitiveState}, {
      &protobuf_primitives_2eproto::scc_info_Polygon.base,
      &protobuf_primitives_2eproto::scc_info_Polyline.base,
      &protobuf_primitives_2eproto::scc_info_Text.base,
      &protobuf_primitives_2eproto::scc_info_Circle.base,
      &protobuf_primitives_2eproto::scc_info_Point.base,
      &protobuf_primitives_2eproto::scc_info_Stadium.base,
      &protobuf_primitives_2eproto::scc_info_Image.base,}};

static void InitDefaultsUIPrimitiveState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_UIPrimitiveState_default_instance_;
    new (ptr) ::xviz::UIPrimitiveState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::UIPrimitiveState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UIPrimitiveState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUIPrimitiveState}, {
      &protobuf_uiprimitives_2eproto::scc_info_TreeTable.base,}};

static void InitDefaultsTimeSeriesState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_TimeSeriesState_default_instance_;
    new (ptr) ::xviz::TimeSeriesState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::TimeSeriesState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TimeSeriesState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTimeSeriesState}, {
      &protobuf_core_2eproto::scc_info_Values.base,}};

static void InitDefaultsFutureInstances() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_FutureInstances_default_instance_;
    new (ptr) ::xviz::FutureInstances();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::FutureInstances::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FutureInstances =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFutureInstances}, {
      &protobuf_core_2eproto::scc_info_PrimitiveState.base,}};

static void InitDefaultsVariableState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_VariableState_default_instance_;
    new (ptr) ::xviz::VariableState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::VariableState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VariableState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVariableState}, {
      &protobuf_core_2eproto::scc_info_Variable.base,}};

static void InitDefaultsAnnotationState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_AnnotationState_default_instance_;
    new (ptr) ::xviz::AnnotationState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::AnnotationState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnnotationState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnnotationState}, {
      &protobuf_annotation_2eproto::scc_info_Visual.base,}};

static void InitDefaultsVariable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_Variable_default_instance_;
    new (ptr) ::xviz::Variable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::Variable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Variable =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsVariable}, {
      &protobuf_core_2eproto::scc_info_VariableBase.base,
      &protobuf_core_2eproto::scc_info_Values.base,}};

static void InitDefaultsVariableBase() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_VariableBase_default_instance_;
    new (ptr) ::xviz::VariableBase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::VariableBase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VariableBase =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVariableBase}, {}};

static void InitDefaultsValues() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_Values_default_instance_;
    new (ptr) ::xviz::Values();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::Values::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Values =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsValues}, {}};

static void InitDefaultsLink() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_Link_default_instance_;
    new (ptr) ::xviz::Link();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::Link::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Link =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLink}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_StreamSet_PosesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StreamSet_PrimitivesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StreamSet_FutureInstancesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StreamSet_VariablesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StreamSet_AnnotationsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StreamSet_UiPrimitivesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StreamSet_LinksEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StreamSet.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Pose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapOrigin.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrimitiveState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UIPrimitiveState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimeSeriesState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureInstances.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VariableState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnnotationState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Variable.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VariableBase.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Values.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Link.base);
}

::google::protobuf::Metadata file_level_metadata[20];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_PosesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_PosesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_PosesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_PosesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_PrimitivesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_PrimitivesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_PrimitivesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_PrimitivesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_FutureInstancesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_FutureInstancesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_FutureInstancesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_FutureInstancesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_VariablesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_VariablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_VariablesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_VariablesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_AnnotationsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_AnnotationsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_UiPrimitivesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_UiPrimitivesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_UiPrimitivesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_UiPrimitivesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_LinksEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_LinksEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_LinksEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet_LinksEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet, poses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet, primitives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet, time_series_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet, future_instances_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet, variables_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet, annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet, ui_primitives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet, no_data_streams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::StreamSet, links_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::Pose, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::Pose, map_origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::Pose, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::Pose, orientation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::MapOrigin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::MapOrigin, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::MapOrigin, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::MapOrigin, altitude_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::PrimitiveState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::PrimitiveState, polygons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::PrimitiveState, polylines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::PrimitiveState, texts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::PrimitiveState, circles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::PrimitiveState, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::PrimitiveState, stadiums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::PrimitiveState, images_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::UIPrimitiveState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::UIPrimitiveState, treetable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::TimeSeriesState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::TimeSeriesState, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::TimeSeriesState, object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::TimeSeriesState, streams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::TimeSeriesState, values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::FutureInstances, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::FutureInstances, timestamps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::FutureInstances, primitives_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::VariableState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::VariableState, variables_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::AnnotationState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::AnnotationState, visuals_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::Variable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::Variable, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::Variable, values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::VariableBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::VariableBase, object_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::Values, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::Values, doubles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::Values, int32s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::Values, bools_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::Values, strings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::xviz::Link, target_pose_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::xviz::StreamSet_PosesEntry_DoNotUse)},
  { 9, 16, sizeof(::xviz::StreamSet_PrimitivesEntry_DoNotUse)},
  { 18, 25, sizeof(::xviz::StreamSet_FutureInstancesEntry_DoNotUse)},
  { 27, 34, sizeof(::xviz::StreamSet_VariablesEntry_DoNotUse)},
  { 36, 43, sizeof(::xviz::StreamSet_AnnotationsEntry_DoNotUse)},
  { 45, 52, sizeof(::xviz::StreamSet_UiPrimitivesEntry_DoNotUse)},
  { 54, 61, sizeof(::xviz::StreamSet_LinksEntry_DoNotUse)},
  { 63, -1, sizeof(::xviz::StreamSet)},
  { 78, -1, sizeof(::xviz::Pose)},
  { 87, -1, sizeof(::xviz::MapOrigin)},
  { 95, -1, sizeof(::xviz::PrimitiveState)},
  { 107, -1, sizeof(::xviz::UIPrimitiveState)},
  { 113, -1, sizeof(::xviz::TimeSeriesState)},
  { 122, -1, sizeof(::xviz::FutureInstances)},
  { 129, -1, sizeof(::xviz::VariableState)},
  { 135, -1, sizeof(::xviz::AnnotationState)},
  { 141, -1, sizeof(::xviz::Variable)},
  { 148, -1, sizeof(::xviz::VariableBase)},
  { 154, -1, sizeof(::xviz::Values)},
  { 163, -1, sizeof(::xviz::Link)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_StreamSet_PosesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_StreamSet_PrimitivesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_StreamSet_FutureInstancesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_StreamSet_VariablesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_StreamSet_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_StreamSet_UiPrimitivesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_StreamSet_LinksEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_StreamSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_Pose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_MapOrigin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_PrimitiveState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_UIPrimitiveState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_TimeSeriesState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_FutureInstances_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_VariableState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_AnnotationState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_Variable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_VariableBase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_Values_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::xviz::_Link_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "core.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 20);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ncore.proto\022\004xviz\032\020annotation.proto\032\rop"
      "tions.proto\032\020primitives.proto\032\022uiprimiti"
      "ves.proto\"\322\007\n\tStreamSet\022\021\n\ttimestamp\030\001 \001"
      "(\001\022)\n\005poses\030\002 \003(\0132\032.xviz.StreamSet.Poses"
      "Entry\0223\n\nprimitives\030\003 \003(\0132\037.xviz.StreamS"
      "et.PrimitivesEntry\022*\n\013time_series\030\004 \003(\0132"
      "\025.xviz.TimeSeriesState\022>\n\020future_instanc"
      "es\030\006 \003(\0132$.xviz.StreamSet.FutureInstance"
      "sEntry\0221\n\tvariables\030\007 \003(\0132\036.xviz.StreamS"
      "et.VariablesEntry\0225\n\013annotations\030\010 \003(\0132 "
      ".xviz.StreamSet.AnnotationsEntry\0228\n\rui_p"
      "rimitives\030\t \003(\0132!.xviz.StreamSet.UiPrimi"
      "tivesEntry\022\027\n\017no_data_streams\030\n \003(\t\022)\n\005l"
      "inks\030\013 \003(\0132\032.xviz.StreamSet.LinksEntry\0328"
      "\n\nPosesEntry\022\013\n\003key\030\001 \001(\t\022\031\n\005value\030\002 \001(\013"
      "2\n.xviz.Pose:\0028\001\032G\n\017PrimitivesEntry\022\013\n\003k"
      "ey\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.xviz.Primitive"
      "State:\0028\001\032M\n\024FutureInstancesEntry\022\013\n\003key"
      "\030\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.xviz.FutureInsta"
      "nces:\0028\001\032E\n\016VariablesEntry\022\013\n\003key\030\001 \001(\t\022"
      "\"\n\005value\030\002 \001(\0132\023.xviz.VariableState:\0028\001\032"
      "I\n\020AnnotationsEntry\022\013\n\003key\030\001 \001(\t\022$\n\005valu"
      "e\030\002 \001(\0132\025.xviz.AnnotationState:\0028\001\032K\n\021Ui"
      "PrimitivesEntry\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 "
      "\001(\0132\026.xviz.UIPrimitiveState:\0028\001\0328\n\nLinks"
      "Entry\022\013\n\003key\030\001 \001(\t\022\031\n\005value\030\002 \001(\0132\n.xviz"
      ".Link:\0028\001:\023\302\273\032\017core/stream_set\"t\n\004Pose\022\021"
      "\n\ttimestamp\030\001 \001(\001\022#\n\nmap_origin\030\002 \001(\0132\017."
      "xviz.MapOrigin\022\020\n\010position\030\003 \003(\001\022\023\n\013orie"
      "ntation\030\004 \003(\001:\r\302\273\032\tcore/pose\"B\n\tMapOrigi"
      "n\022\021\n\tlongitude\030\001 \001(\001\022\020\n\010latitude\030\002 \001(\001\022\020"
      "\n\010altitude\030\003 \001(\001\"\203\002\n\016PrimitiveState\022\037\n\010p"
      "olygons\030\001 \003(\0132\r.xviz.Polygon\022!\n\tpolyline"
      "s\030\002 \003(\0132\016.xviz.Polyline\022\031\n\005texts\030\003 \003(\0132\n"
      ".xviz.Text\022\035\n\007circles\030\004 \003(\0132\014.xviz.Circl"
      "e\022\033\n\006points\030\005 \003(\0132\013.xviz.Point\022\037\n\010stadiu"
      "ms\030\006 \003(\0132\r.xviz.Stadium\022\033\n\006images\030\007 \003(\0132"
      "\013.xviz.Image:\030\302\273\032\024core/primitive_state\"S"
      "\n\020UIPrimitiveState\022\"\n\ttreetable\030\001 \001(\0132\017."
      "xviz.TreeTable:\033\302\273\032\027core/ui_primitive_st"
      "ate\"\201\001\n\017TimeSeriesState\022\021\n\ttimestamp\030\001 \001"
      "(\001\022\021\n\tobject_id\030\002 \001(\t\022\017\n\007streams\030\003 \003(\t\022\034"
      "\n\006values\030\004 \001(\0132\014.xviz.Values:\031\302\273\032\025core/t"
      "imeseries_state\"j\n\017FutureInstances\022\022\n\nti"
      "mestamps\030\001 \003(\001\022(\n\nprimitives\030\002 \003(\0132\024.xvi"
      "z.PrimitiveState:\031\302\273\032\025core/future_instan"
      "ces\"K\n\rVariableState\022!\n\tvariables\030\001 \003(\0132"
      "\016.xviz.Variable:\027\302\273\032\023core/variable_state"
      "\"K\n\017AnnotationState\022\035\n\007visuals\030\001 \003(\0132\014.x"
      "viz.Visual:\031\302\273\032\025core/annotation_state\"]\n"
      "\010Variable\022 \n\004base\030\001 \001(\0132\022.xviz.VariableB"
      "ase\022\034\n\006values\030\002 \001(\0132\014.xviz.Values:\021\302\273\032\rc"
      "ore/variable\"!\n\014VariableBase\022\021\n\tobject_i"
      "d\030\001 \001(\t\"Z\n\006Values\022\017\n\007doubles\030\002 \003(\001\022\016\n\006in"
      "t32s\030\003 \003(\005\022\r\n\005bools\030\004 \003(\010\022\017\n\007strings\030\005 \003"
      "(\t:\017\302\273\032\013core/values\"0\n\004Link\022\023\n\013target_po"
      "se\030\001 \001(\t:\023\302\273\032\017core/link_stateB1\n\013com.xvi"
      "z.v2B\tCoreProtoP\001Z\004v2pb\242\002\004XVIZ\252\002\007xviz.V2"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2328);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "core.proto", &protobuf_RegisterTypes);
  ::protobuf_annotation_2eproto::AddDescriptors();
  ::protobuf_options_2eproto::AddDescriptors();
  ::protobuf_primitives_2eproto::AddDescriptors();
  ::protobuf_uiprimitives_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_core_2eproto
namespace xviz {

// ===================================================================

StreamSet_PosesEntry_DoNotUse::StreamSet_PosesEntry_DoNotUse() {}
StreamSet_PosesEntry_DoNotUse::StreamSet_PosesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void StreamSet_PosesEntry_DoNotUse::MergeFrom(const StreamSet_PosesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata StreamSet_PosesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[0];
}
void StreamSet_PosesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

StreamSet_PrimitivesEntry_DoNotUse::StreamSet_PrimitivesEntry_DoNotUse() {}
StreamSet_PrimitivesEntry_DoNotUse::StreamSet_PrimitivesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void StreamSet_PrimitivesEntry_DoNotUse::MergeFrom(const StreamSet_PrimitivesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata StreamSet_PrimitivesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[1];
}
void StreamSet_PrimitivesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

StreamSet_FutureInstancesEntry_DoNotUse::StreamSet_FutureInstancesEntry_DoNotUse() {}
StreamSet_FutureInstancesEntry_DoNotUse::StreamSet_FutureInstancesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void StreamSet_FutureInstancesEntry_DoNotUse::MergeFrom(const StreamSet_FutureInstancesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata StreamSet_FutureInstancesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[2];
}
void StreamSet_FutureInstancesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

StreamSet_VariablesEntry_DoNotUse::StreamSet_VariablesEntry_DoNotUse() {}
StreamSet_VariablesEntry_DoNotUse::StreamSet_VariablesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void StreamSet_VariablesEntry_DoNotUse::MergeFrom(const StreamSet_VariablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata StreamSet_VariablesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[3];
}
void StreamSet_VariablesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

StreamSet_AnnotationsEntry_DoNotUse::StreamSet_AnnotationsEntry_DoNotUse() {}
StreamSet_AnnotationsEntry_DoNotUse::StreamSet_AnnotationsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void StreamSet_AnnotationsEntry_DoNotUse::MergeFrom(const StreamSet_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata StreamSet_AnnotationsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[4];
}
void StreamSet_AnnotationsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

StreamSet_UiPrimitivesEntry_DoNotUse::StreamSet_UiPrimitivesEntry_DoNotUse() {}
StreamSet_UiPrimitivesEntry_DoNotUse::StreamSet_UiPrimitivesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void StreamSet_UiPrimitivesEntry_DoNotUse::MergeFrom(const StreamSet_UiPrimitivesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata StreamSet_UiPrimitivesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[5];
}
void StreamSet_UiPrimitivesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

StreamSet_LinksEntry_DoNotUse::StreamSet_LinksEntry_DoNotUse() {}
StreamSet_LinksEntry_DoNotUse::StreamSet_LinksEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void StreamSet_LinksEntry_DoNotUse::MergeFrom(const StreamSet_LinksEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata StreamSet_LinksEntry_DoNotUse::GetMetadata() const {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[6];
}
void StreamSet_LinksEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void StreamSet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSet::kTimestampFieldNumber;
const int StreamSet::kPosesFieldNumber;
const int StreamSet::kPrimitivesFieldNumber;
const int StreamSet::kTimeSeriesFieldNumber;
const int StreamSet::kFutureInstancesFieldNumber;
const int StreamSet::kVariablesFieldNumber;
const int StreamSet::kAnnotationsFieldNumber;
const int StreamSet::kUiPrimitivesFieldNumber;
const int StreamSet::kNoDataStreamsFieldNumber;
const int StreamSet::kLinksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSet::StreamSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_StreamSet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.StreamSet)
}
StreamSet::StreamSet(const StreamSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      time_series_(from.time_series_),
      no_data_streams_(from.no_data_streams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  poses_.MergeFrom(from.poses_);
  primitives_.MergeFrom(from.primitives_);
  future_instances_.MergeFrom(from.future_instances_);
  variables_.MergeFrom(from.variables_);
  annotations_.MergeFrom(from.annotations_);
  ui_primitives_.MergeFrom(from.ui_primitives_);
  links_.MergeFrom(from.links_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:xviz.StreamSet)
}

void StreamSet::SharedCtor() {
  timestamp_ = 0;
}

StreamSet::~StreamSet() {
  // @@protoc_insertion_point(destructor:xviz.StreamSet)
  SharedDtor();
}

void StreamSet::SharedDtor() {
}

void StreamSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StreamSet::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamSet& StreamSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_StreamSet.base);
  return *internal_default_instance();
}


void StreamSet::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.StreamSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  poses_.Clear();
  primitives_.Clear();
  time_series_.Clear();
  future_instances_.Clear();
  variables_.Clear();
  annotations_.Clear();
  ui_primitives_.Clear();
  no_data_streams_.Clear();
  links_.Clear();
  timestamp_ = 0;
  _internal_metadata_.Clear();
}

bool StreamSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.StreamSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .xviz.Pose> poses = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          StreamSet_PosesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              StreamSet_PosesEntry_DoNotUse,
              ::std::string, ::xviz::Pose,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::Pose > > parser(&poses_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamSet.PosesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .xviz.PrimitiveState> primitives = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          StreamSet_PrimitivesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              StreamSet_PrimitivesEntry_DoNotUse,
              ::std::string, ::xviz::PrimitiveState,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState > > parser(&primitives_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamSet.PrimitivesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xviz.TimeSeriesState time_series = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_time_series()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .xviz.FutureInstances> future_instances = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          StreamSet_FutureInstancesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              StreamSet_FutureInstancesEntry_DoNotUse,
              ::std::string, ::xviz::FutureInstances,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::FutureInstances > > parser(&future_instances_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamSet.FutureInstancesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .xviz.VariableState> variables = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          StreamSet_VariablesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              StreamSet_VariablesEntry_DoNotUse,
              ::std::string, ::xviz::VariableState,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::VariableState > > parser(&variables_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamSet.VariablesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .xviz.AnnotationState> annotations = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          StreamSet_AnnotationsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              StreamSet_AnnotationsEntry_DoNotUse,
              ::std::string, ::xviz::AnnotationState,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::AnnotationState > > parser(&annotations_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamSet.AnnotationsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .xviz.UIPrimitiveState> ui_primitives = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          StreamSet_UiPrimitivesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              StreamSet_UiPrimitivesEntry_DoNotUse,
              ::std::string, ::xviz::UIPrimitiveState,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState > > parser(&ui_primitives_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamSet.UiPrimitivesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string no_data_streams = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_no_data_streams()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->no_data_streams(this->no_data_streams_size() - 1).data(),
            static_cast<int>(this->no_data_streams(this->no_data_streams_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamSet.no_data_streams"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .xviz.Link> links = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          StreamSet_LinksEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              StreamSet_LinksEntry_DoNotUse,
              ::std::string, ::xviz::Link,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::xviz::Link > > parser(&links_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.StreamSet.LinksEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.StreamSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.StreamSet)
  return false;
#undef DO_
}

void StreamSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.StreamSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // map<string, .xviz.Pose> poses = 2;
  if (!this->poses().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::Pose >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.PosesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->poses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->poses().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::Pose >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::Pose >::const_iterator
          it = this->poses().begin();
          it != this->poses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StreamSet_PosesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(poses_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<StreamSet_PosesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::Pose >::const_iterator
          it = this->poses().begin();
          it != this->poses().end(); ++it) {
        entry.reset(poses_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.PrimitiveState> primitives = 3;
  if (!this->primitives().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.PrimitivesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->primitives().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->primitives().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::const_iterator
          it = this->primitives().begin();
          it != this->primitives().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StreamSet_PrimitivesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(primitives_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<StreamSet_PrimitivesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::const_iterator
          it = this->primitives().begin();
          it != this->primitives().end(); ++it) {
        entry.reset(primitives_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .xviz.TimeSeriesState time_series = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->time_series_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->time_series(static_cast<int>(i)),
      output);
  }

  // map<string, .xviz.FutureInstances> future_instances = 6;
  if (!this->future_instances().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.FutureInstancesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->future_instances().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->future_instances().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::const_iterator
          it = this->future_instances().begin();
          it != this->future_instances().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StreamSet_FutureInstancesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(future_instances_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<StreamSet_FutureInstancesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::const_iterator
          it = this->future_instances().begin();
          it != this->future_instances().end(); ++it) {
        entry.reset(future_instances_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.VariableState> variables = 7;
  if (!this->variables().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::VariableState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.VariablesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->variables().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->variables().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::VariableState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::VariableState >::const_iterator
          it = this->variables().begin();
          it != this->variables().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StreamSet_VariablesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(variables_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<StreamSet_VariablesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::VariableState >::const_iterator
          it = this->variables().begin();
          it != this->variables().end(); ++it) {
        entry.reset(variables_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.AnnotationState> annotations = 8;
  if (!this->annotations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.AnnotationsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->annotations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StreamSet_AnnotationsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(annotations_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<StreamSet_AnnotationsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it) {
        entry.reset(annotations_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.UIPrimitiveState> ui_primitives = 9;
  if (!this->ui_primitives().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.UiPrimitivesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ui_primitives().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ui_primitives().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::const_iterator
          it = this->ui_primitives().begin();
          it != this->ui_primitives().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StreamSet_UiPrimitivesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ui_primitives_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<StreamSet_UiPrimitivesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::const_iterator
          it = this->ui_primitives().begin();
          it != this->ui_primitives().end(); ++it) {
        entry.reset(ui_primitives_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string no_data_streams = 10;
  for (int i = 0, n = this->no_data_streams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->no_data_streams(i).data(), static_cast<int>(this->no_data_streams(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.StreamSet.no_data_streams");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->no_data_streams(i), output);
  }

  // map<string, .xviz.Link> links = 11;
  if (!this->links().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::Link >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.LinksEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->links().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->links().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::Link >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::Link >::const_iterator
          it = this->links().begin();
          it != this->links().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StreamSet_LinksEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(links_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<StreamSet_LinksEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::Link >::const_iterator
          it = this->links().begin();
          it != this->links().end(); ++it) {
        entry.reset(links_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xviz.StreamSet)
}

::google::protobuf::uint8* StreamSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xviz.StreamSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // map<string, .xviz.Pose> poses = 2;
  if (!this->poses().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::Pose >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.PosesEntry.key");
      }
    };

    if (deterministic &&
        this->poses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->poses().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::Pose >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::Pose >::const_iterator
          it = this->poses().begin();
          it != this->poses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StreamSet_PosesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(poses_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<StreamSet_PosesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::Pose >::const_iterator
          it = this->poses().begin();
          it != this->poses().end(); ++it) {
        entry.reset(poses_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.PrimitiveState> primitives = 3;
  if (!this->primitives().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.PrimitivesEntry.key");
      }
    };

    if (deterministic &&
        this->primitives().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->primitives().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::const_iterator
          it = this->primitives().begin();
          it != this->primitives().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StreamSet_PrimitivesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(primitives_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<StreamSet_PrimitivesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::const_iterator
          it = this->primitives().begin();
          it != this->primitives().end(); ++it) {
        entry.reset(primitives_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .xviz.TimeSeriesState time_series = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->time_series_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->time_series(static_cast<int>(i)), deterministic, target);
  }

  // map<string, .xviz.FutureInstances> future_instances = 6;
  if (!this->future_instances().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.FutureInstancesEntry.key");
      }
    };

    if (deterministic &&
        this->future_instances().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->future_instances().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::const_iterator
          it = this->future_instances().begin();
          it != this->future_instances().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StreamSet_FutureInstancesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(future_instances_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<StreamSet_FutureInstancesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::const_iterator
          it = this->future_instances().begin();
          it != this->future_instances().end(); ++it) {
        entry.reset(future_instances_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.VariableState> variables = 7;
  if (!this->variables().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::VariableState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.VariablesEntry.key");
      }
    };

    if (deterministic &&
        this->variables().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->variables().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::VariableState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::VariableState >::const_iterator
          it = this->variables().begin();
          it != this->variables().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StreamSet_VariablesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(variables_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<StreamSet_VariablesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::VariableState >::const_iterator
          it = this->variables().begin();
          it != this->variables().end(); ++it) {
        entry.reset(variables_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.AnnotationState> annotations = 8;
  if (!this->annotations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.AnnotationsEntry.key");
      }
    };

    if (deterministic &&
        this->annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->annotations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StreamSet_AnnotationsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(annotations_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<StreamSet_AnnotationsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it) {
        entry.reset(annotations_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .xviz.UIPrimitiveState> ui_primitives = 9;
  if (!this->ui_primitives().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.UiPrimitivesEntry.key");
      }
    };

    if (deterministic &&
        this->ui_primitives().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ui_primitives().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::const_iterator
          it = this->ui_primitives().begin();
          it != this->ui_primitives().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StreamSet_UiPrimitivesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ui_primitives_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<StreamSet_UiPrimitivesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::const_iterator
          it = this->ui_primitives().begin();
          it != this->ui_primitives().end(); ++it) {
        entry.reset(ui_primitives_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string no_data_streams = 10;
  for (int i = 0, n = this->no_data_streams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->no_data_streams(i).data(), static_cast<int>(this->no_data_streams(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.StreamSet.no_data_streams");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->no_data_streams(i), target);
  }

  // map<string, .xviz.Link> links = 11;
  if (!this->links().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::xviz::Link >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "xviz.StreamSet.LinksEntry.key");
      }
    };

    if (deterministic &&
        this->links().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->links().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::xviz::Link >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::xviz::Link >::const_iterator
          it = this->links().begin();
          it != this->links().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StreamSet_LinksEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(links_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<StreamSet_LinksEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::xviz::Link >::const_iterator
          it = this->links().begin();
          it != this->links().end(); ++it) {
        entry.reset(links_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.StreamSet)
  return target;
}

size_t StreamSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.StreamSet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .xviz.Pose> poses = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->poses_size());
  {
    ::std::unique_ptr<StreamSet_PosesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::Pose >::const_iterator
        it = this->poses().begin();
        it != this->poses().end(); ++it) {
      entry.reset(poses_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .xviz.PrimitiveState> primitives = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->primitives_size());
  {
    ::std::unique_ptr<StreamSet_PrimitivesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::PrimitiveState >::const_iterator
        it = this->primitives().begin();
        it != this->primitives().end(); ++it) {
      entry.reset(primitives_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .xviz.TimeSeriesState time_series = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->time_series_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->time_series(static_cast<int>(i)));
    }
  }

  // map<string, .xviz.FutureInstances> future_instances = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->future_instances_size());
  {
    ::std::unique_ptr<StreamSet_FutureInstancesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::FutureInstances >::const_iterator
        it = this->future_instances().begin();
        it != this->future_instances().end(); ++it) {
      entry.reset(future_instances_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .xviz.VariableState> variables = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->variables_size());
  {
    ::std::unique_ptr<StreamSet_VariablesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::VariableState >::const_iterator
        it = this->variables().begin();
        it != this->variables().end(); ++it) {
      entry.reset(variables_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .xviz.AnnotationState> annotations = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->annotations_size());
  {
    ::std::unique_ptr<StreamSet_AnnotationsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::AnnotationState >::const_iterator
        it = this->annotations().begin();
        it != this->annotations().end(); ++it) {
      entry.reset(annotations_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .xviz.UIPrimitiveState> ui_primitives = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ui_primitives_size());
  {
    ::std::unique_ptr<StreamSet_UiPrimitivesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::UIPrimitiveState >::const_iterator
        it = this->ui_primitives().begin();
        it != this->ui_primitives().end(); ++it) {
      entry.reset(ui_primitives_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string no_data_streams = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->no_data_streams_size());
  for (int i = 0, n = this->no_data_streams_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->no_data_streams(i));
  }

  // map<string, .xviz.Link> links = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->links_size());
  {
    ::std::unique_ptr<StreamSet_LinksEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::xviz::Link >::const_iterator
        it = this->links().begin();
        it != this->links().end(); ++it) {
      entry.reset(links_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.StreamSet)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.StreamSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.StreamSet)
    MergeFrom(*source);
  }
}

void StreamSet::MergeFrom(const StreamSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.StreamSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  poses_.MergeFrom(from.poses_);
  primitives_.MergeFrom(from.primitives_);
  time_series_.MergeFrom(from.time_series_);
  future_instances_.MergeFrom(from.future_instances_);
  variables_.MergeFrom(from.variables_);
  annotations_.MergeFrom(from.annotations_);
  ui_primitives_.MergeFrom(from.ui_primitives_);
  no_data_streams_.MergeFrom(from.no_data_streams_);
  links_.MergeFrom(from.links_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void StreamSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.StreamSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSet::CopyFrom(const StreamSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.StreamSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSet::IsInitialized() const {
  return true;
}

void StreamSet::Swap(StreamSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamSet::InternalSwap(StreamSet* other) {
  using std::swap;
  poses_.Swap(&other->poses_);
  primitives_.Swap(&other->primitives_);
  CastToBase(&time_series_)->InternalSwap(CastToBase(&other->time_series_));
  future_instances_.Swap(&other->future_instances_);
  variables_.Swap(&other->variables_);
  annotations_.Swap(&other->annotations_);
  ui_primitives_.Swap(&other->ui_primitives_);
  no_data_streams_.InternalSwap(CastToBase(&other->no_data_streams_));
  links_.Swap(&other->links_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StreamSet::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Pose::InitAsDefaultInstance() {
  ::xviz::_Pose_default_instance_._instance.get_mutable()->map_origin_ = const_cast< ::xviz::MapOrigin*>(
      ::xviz::MapOrigin::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kTimestampFieldNumber;
const int Pose::kMapOriginFieldNumber;
const int Pose::kPositionFieldNumber;
const int Pose::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_Pose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Pose)
}
Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_(from.position_),
      orientation_(from.orientation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map_origin()) {
    map_origin_ = new ::xviz::MapOrigin(*from.map_origin_);
  } else {
    map_origin_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:xviz.Pose)
}

void Pose::SharedCtor() {
  ::memset(&map_origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&map_origin_)) + sizeof(timestamp_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:xviz.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
  if (this != internal_default_instance()) delete map_origin_;
}

void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pose& Pose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_Pose.base);
  return *internal_default_instance();
}


void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  orientation_.Clear();
  if (GetArenaNoVirtual() == NULL && map_origin_ != NULL) {
    delete map_origin_;
  }
  map_origin_ = NULL;
  timestamp_ = 0;
  _internal_metadata_.Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Pose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xviz.MapOrigin map_origin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double orientation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_orientation())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_orientation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // .xviz.MapOrigin map_origin = 2;
  if (this->has_map_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_map_origin(), output);
  }

  // repeated double position = 3;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated double orientation = 4;
  if (this->orientation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _orientation_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->orientation().data(), this->orientation_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xviz.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // .xviz.MapOrigin map_origin = 2;
  if (this->has_map_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_map_origin(), deterministic, target);
  }

  // repeated double position = 3;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_, target);
  }

  // repeated double orientation = 4;
  if (this->orientation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _orientation_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->orientation_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Pose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double position = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double orientation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->orientation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _orientation_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .xviz.MapOrigin map_origin = 2;
  if (this->has_map_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *map_origin_);
  }

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  orientation_.MergeFrom(from.orientation_);
  if (from.has_map_origin()) {
    mutable_map_origin()->::xviz::MapOrigin::MergeFrom(from.map_origin());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  using std::swap;
  position_.InternalSwap(&other->position_);
  orientation_.InternalSwap(&other->orientation_);
  swap(map_origin_, other->map_origin_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapOrigin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapOrigin::kLongitudeFieldNumber;
const int MapOrigin::kLatitudeFieldNumber;
const int MapOrigin::kAltitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapOrigin::MapOrigin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_MapOrigin.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.MapOrigin)
}
MapOrigin::MapOrigin(const MapOrigin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:xviz.MapOrigin)
}

void MapOrigin::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
}

MapOrigin::~MapOrigin() {
  // @@protoc_insertion_point(destructor:xviz.MapOrigin)
  SharedDtor();
}

void MapOrigin::SharedDtor() {
}

void MapOrigin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapOrigin::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapOrigin& MapOrigin::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_MapOrigin.base);
  return *internal_default_instance();
}


void MapOrigin::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.MapOrigin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
  _internal_metadata_.Clear();
}

bool MapOrigin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.MapOrigin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double altitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.MapOrigin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.MapOrigin)
  return false;
#undef DO_
}

void MapOrigin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.MapOrigin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // double altitude = 3;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->altitude(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xviz.MapOrigin)
}

::google::protobuf::uint8* MapOrigin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xviz.MapOrigin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitude(), target);
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // double altitude = 3;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->altitude(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.MapOrigin)
  return target;
}

size_t MapOrigin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.MapOrigin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double longitude = 1;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // double altitude = 3;
  if (this->altitude() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapOrigin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.MapOrigin)
  GOOGLE_DCHECK_NE(&from, this);
  const MapOrigin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapOrigin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.MapOrigin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.MapOrigin)
    MergeFrom(*source);
  }
}

void MapOrigin::MergeFrom(const MapOrigin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.MapOrigin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
}

void MapOrigin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.MapOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOrigin::CopyFrom(const MapOrigin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.MapOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOrigin::IsInitialized() const {
  return true;
}

void MapOrigin::Swap(MapOrigin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapOrigin::InternalSwap(MapOrigin* other) {
  using std::swap;
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapOrigin::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PrimitiveState::InitAsDefaultInstance() {
}
void PrimitiveState::clear_polygons() {
  polygons_.Clear();
}
void PrimitiveState::clear_polylines() {
  polylines_.Clear();
}
void PrimitiveState::clear_texts() {
  texts_.Clear();
}
void PrimitiveState::clear_circles() {
  circles_.Clear();
}
void PrimitiveState::clear_points() {
  points_.Clear();
}
void PrimitiveState::clear_stadiums() {
  stadiums_.Clear();
}
void PrimitiveState::clear_images() {
  images_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrimitiveState::kPolygonsFieldNumber;
const int PrimitiveState::kPolylinesFieldNumber;
const int PrimitiveState::kTextsFieldNumber;
const int PrimitiveState::kCirclesFieldNumber;
const int PrimitiveState::kPointsFieldNumber;
const int PrimitiveState::kStadiumsFieldNumber;
const int PrimitiveState::kImagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrimitiveState::PrimitiveState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_PrimitiveState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.PrimitiveState)
}
PrimitiveState::PrimitiveState(const PrimitiveState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      polygons_(from.polygons_),
      polylines_(from.polylines_),
      texts_(from.texts_),
      circles_(from.circles_),
      points_(from.points_),
      stadiums_(from.stadiums_),
      images_(from.images_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xviz.PrimitiveState)
}

void PrimitiveState::SharedCtor() {
}

PrimitiveState::~PrimitiveState() {
  // @@protoc_insertion_point(destructor:xviz.PrimitiveState)
  SharedDtor();
}

void PrimitiveState::SharedDtor() {
}

void PrimitiveState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PrimitiveState::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrimitiveState& PrimitiveState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_PrimitiveState.base);
  return *internal_default_instance();
}


void PrimitiveState::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.PrimitiveState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygons_.Clear();
  polylines_.Clear();
  texts_.Clear();
  circles_.Clear();
  points_.Clear();
  stadiums_.Clear();
  images_.Clear();
  _internal_metadata_.Clear();
}

bool PrimitiveState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.PrimitiveState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xviz.Polygon polygons = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polygons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xviz.Polyline polylines = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polylines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xviz.Text texts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_texts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xviz.Circle circles = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_circles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xviz.Point points = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xviz.Stadium stadiums = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stadiums()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xviz.Image images = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.PrimitiveState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.PrimitiveState)
  return false;
#undef DO_
}

void PrimitiveState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.PrimitiveState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xviz.Polygon polygons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->polygons(static_cast<int>(i)),
      output);
  }

  // repeated .xviz.Polyline polylines = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polylines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->polylines(static_cast<int>(i)),
      output);
  }

  // repeated .xviz.Text texts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->texts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->texts(static_cast<int>(i)),
      output);
  }

  // repeated .xviz.Circle circles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->circles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->circles(static_cast<int>(i)),
      output);
  }

  // repeated .xviz.Point points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->points(static_cast<int>(i)),
      output);
  }

  // repeated .xviz.Stadium stadiums = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stadiums_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->stadiums(static_cast<int>(i)),
      output);
  }

  // repeated .xviz.Image images = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->images(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xviz.PrimitiveState)
}

::google::protobuf::uint8* PrimitiveState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xviz.PrimitiveState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xviz.Polygon polygons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->polygons(static_cast<int>(i)), deterministic, target);
  }

  // repeated .xviz.Polyline polylines = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polylines_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->polylines(static_cast<int>(i)), deterministic, target);
  }

  // repeated .xviz.Text texts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->texts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->texts(static_cast<int>(i)), deterministic, target);
  }

  // repeated .xviz.Circle circles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->circles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->circles(static_cast<int>(i)), deterministic, target);
  }

  // repeated .xviz.Point points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->points(static_cast<int>(i)), deterministic, target);
  }

  // repeated .xviz.Stadium stadiums = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stadiums_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->stadiums(static_cast<int>(i)), deterministic, target);
  }

  // repeated .xviz.Image images = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->images(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.PrimitiveState)
  return target;
}

size_t PrimitiveState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.PrimitiveState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .xviz.Polygon polygons = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->polygons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polygons(static_cast<int>(i)));
    }
  }

  // repeated .xviz.Polyline polylines = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->polylines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polylines(static_cast<int>(i)));
    }
  }

  // repeated .xviz.Text texts = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->texts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->texts(static_cast<int>(i)));
    }
  }

  // repeated .xviz.Circle circles = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->circles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->circles(static_cast<int>(i)));
    }
  }

  // repeated .xviz.Point points = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // repeated .xviz.Stadium stadiums = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->stadiums_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stadiums(static_cast<int>(i)));
    }
  }

  // repeated .xviz.Image images = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->images_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->images(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrimitiveState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.PrimitiveState)
  GOOGLE_DCHECK_NE(&from, this);
  const PrimitiveState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrimitiveState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.PrimitiveState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.PrimitiveState)
    MergeFrom(*source);
  }
}

void PrimitiveState::MergeFrom(const PrimitiveState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.PrimitiveState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygons_.MergeFrom(from.polygons_);
  polylines_.MergeFrom(from.polylines_);
  texts_.MergeFrom(from.texts_);
  circles_.MergeFrom(from.circles_);
  points_.MergeFrom(from.points_);
  stadiums_.MergeFrom(from.stadiums_);
  images_.MergeFrom(from.images_);
}

void PrimitiveState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.PrimitiveState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrimitiveState::CopyFrom(const PrimitiveState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.PrimitiveState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveState::IsInitialized() const {
  return true;
}

void PrimitiveState::Swap(PrimitiveState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrimitiveState::InternalSwap(PrimitiveState* other) {
  using std::swap;
  CastToBase(&polygons_)->InternalSwap(CastToBase(&other->polygons_));
  CastToBase(&polylines_)->InternalSwap(CastToBase(&other->polylines_));
  CastToBase(&texts_)->InternalSwap(CastToBase(&other->texts_));
  CastToBase(&circles_)->InternalSwap(CastToBase(&other->circles_));
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  CastToBase(&stadiums_)->InternalSwap(CastToBase(&other->stadiums_));
  CastToBase(&images_)->InternalSwap(CastToBase(&other->images_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PrimitiveState::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UIPrimitiveState::InitAsDefaultInstance() {
  ::xviz::_UIPrimitiveState_default_instance_._instance.get_mutable()->treetable_ = const_cast< ::xviz::TreeTable*>(
      ::xviz::TreeTable::internal_default_instance());
}
void UIPrimitiveState::clear_treetable() {
  if (GetArenaNoVirtual() == NULL && treetable_ != NULL) {
    delete treetable_;
  }
  treetable_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UIPrimitiveState::kTreetableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UIPrimitiveState::UIPrimitiveState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_UIPrimitiveState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.UIPrimitiveState)
}
UIPrimitiveState::UIPrimitiveState(const UIPrimitiveState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_treetable()) {
    treetable_ = new ::xviz::TreeTable(*from.treetable_);
  } else {
    treetable_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xviz.UIPrimitiveState)
}

void UIPrimitiveState::SharedCtor() {
  treetable_ = NULL;
}

UIPrimitiveState::~UIPrimitiveState() {
  // @@protoc_insertion_point(destructor:xviz.UIPrimitiveState)
  SharedDtor();
}

void UIPrimitiveState::SharedDtor() {
  if (this != internal_default_instance()) delete treetable_;
}

void UIPrimitiveState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UIPrimitiveState::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UIPrimitiveState& UIPrimitiveState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_UIPrimitiveState.base);
  return *internal_default_instance();
}


void UIPrimitiveState::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.UIPrimitiveState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && treetable_ != NULL) {
    delete treetable_;
  }
  treetable_ = NULL;
  _internal_metadata_.Clear();
}

bool UIPrimitiveState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.UIPrimitiveState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xviz.TreeTable treetable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_treetable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.UIPrimitiveState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.UIPrimitiveState)
  return false;
#undef DO_
}

void UIPrimitiveState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.UIPrimitiveState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz.TreeTable treetable = 1;
  if (this->has_treetable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_treetable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xviz.UIPrimitiveState)
}

::google::protobuf::uint8* UIPrimitiveState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xviz.UIPrimitiveState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz.TreeTable treetable = 1;
  if (this->has_treetable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_treetable(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.UIPrimitiveState)
  return target;
}

size_t UIPrimitiveState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.UIPrimitiveState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .xviz.TreeTable treetable = 1;
  if (this->has_treetable()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *treetable_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UIPrimitiveState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.UIPrimitiveState)
  GOOGLE_DCHECK_NE(&from, this);
  const UIPrimitiveState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UIPrimitiveState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.UIPrimitiveState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.UIPrimitiveState)
    MergeFrom(*source);
  }
}

void UIPrimitiveState::MergeFrom(const UIPrimitiveState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.UIPrimitiveState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_treetable()) {
    mutable_treetable()->::xviz::TreeTable::MergeFrom(from.treetable());
  }
}

void UIPrimitiveState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.UIPrimitiveState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIPrimitiveState::CopyFrom(const UIPrimitiveState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.UIPrimitiveState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIPrimitiveState::IsInitialized() const {
  return true;
}

void UIPrimitiveState::Swap(UIPrimitiveState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UIPrimitiveState::InternalSwap(UIPrimitiveState* other) {
  using std::swap;
  swap(treetable_, other->treetable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UIPrimitiveState::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimeSeriesState::InitAsDefaultInstance() {
  ::xviz::_TimeSeriesState_default_instance_._instance.get_mutable()->values_ = const_cast< ::xviz::Values*>(
      ::xviz::Values::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeSeriesState::kTimestampFieldNumber;
const int TimeSeriesState::kObjectIdFieldNumber;
const int TimeSeriesState::kStreamsFieldNumber;
const int TimeSeriesState::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeSeriesState::TimeSeriesState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_TimeSeriesState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.TimeSeriesState)
}
TimeSeriesState::TimeSeriesState(const TimeSeriesState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      streams_(from.streams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.has_values()) {
    values_ = new ::xviz::Values(*from.values_);
  } else {
    values_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:xviz.TimeSeriesState)
}

void TimeSeriesState::SharedCtor() {
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&values_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&values_)) + sizeof(timestamp_));
}

TimeSeriesState::~TimeSeriesState() {
  // @@protoc_insertion_point(destructor:xviz.TimeSeriesState)
  SharedDtor();
}

void TimeSeriesState::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete values_;
}

void TimeSeriesState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TimeSeriesState::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeSeriesState& TimeSeriesState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_TimeSeriesState.base);
  return *internal_default_instance();
}


void TimeSeriesState::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.TimeSeriesState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  streams_.Clear();
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && values_ != NULL) {
    delete values_;
  }
  values_ = NULL;
  timestamp_ = 0;
  _internal_metadata_.Clear();
}

bool TimeSeriesState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.TimeSeriesState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.TimeSeriesState.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string streams = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_streams()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->streams(this->streams_size() - 1).data(),
            static_cast<int>(this->streams(this->streams_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.TimeSeriesState.streams"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xviz.Values values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.TimeSeriesState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.TimeSeriesState)
  return false;
#undef DO_
}

void TimeSeriesState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.TimeSeriesState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TimeSeriesState.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object_id(), output);
  }

  // repeated string streams = 3;
  for (int i = 0, n = this->streams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->streams(i).data(), static_cast<int>(this->streams(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TimeSeriesState.streams");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->streams(i), output);
  }

  // .xviz.Values values = 4;
  if (this->has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_values(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xviz.TimeSeriesState)
}

::google::protobuf::uint8* TimeSeriesState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xviz.TimeSeriesState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TimeSeriesState.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_id(), target);
  }

  // repeated string streams = 3;
  for (int i = 0, n = this->streams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->streams(i).data(), static_cast<int>(this->streams(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TimeSeriesState.streams");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->streams(i), target);
  }

  // .xviz.Values values = 4;
  if (this->has_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_values(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.TimeSeriesState)
  return target;
}

size_t TimeSeriesState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.TimeSeriesState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string streams = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->streams_size());
  for (int i = 0, n = this->streams_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->streams(i));
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // .xviz.Values values = 4;
  if (this->has_values()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *values_);
  }

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeSeriesState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.TimeSeriesState)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSeriesState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeSeriesState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.TimeSeriesState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.TimeSeriesState)
    MergeFrom(*source);
  }
}

void TimeSeriesState::MergeFrom(const TimeSeriesState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.TimeSeriesState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  streams_.MergeFrom(from.streams_);
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.has_values()) {
    mutable_values()->::xviz::Values::MergeFrom(from.values());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void TimeSeriesState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.TimeSeriesState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSeriesState::CopyFrom(const TimeSeriesState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.TimeSeriesState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSeriesState::IsInitialized() const {
  return true;
}

void TimeSeriesState::Swap(TimeSeriesState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeSeriesState::InternalSwap(TimeSeriesState* other) {
  using std::swap;
  streams_.InternalSwap(CastToBase(&other->streams_));
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(values_, other->values_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TimeSeriesState::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FutureInstances::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureInstances::kTimestampsFieldNumber;
const int FutureInstances::kPrimitivesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureInstances::FutureInstances()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_FutureInstances.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.FutureInstances)
}
FutureInstances::FutureInstances(const FutureInstances& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      timestamps_(from.timestamps_),
      primitives_(from.primitives_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xviz.FutureInstances)
}

void FutureInstances::SharedCtor() {
}

FutureInstances::~FutureInstances() {
  // @@protoc_insertion_point(destructor:xviz.FutureInstances)
  SharedDtor();
}

void FutureInstances::SharedDtor() {
}

void FutureInstances::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FutureInstances::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FutureInstances& FutureInstances::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_FutureInstances.base);
  return *internal_default_instance();
}


void FutureInstances::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.FutureInstances)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamps_.Clear();
  primitives_.Clear();
  _internal_metadata_.Clear();
}

bool FutureInstances::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.FutureInstances)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double timestamps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_timestamps())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_timestamps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .xviz.PrimitiveState primitives = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_primitives()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.FutureInstances)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.FutureInstances)
  return false;
#undef DO_
}

void FutureInstances::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.FutureInstances)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double timestamps = 1;
  if (this->timestamps_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _timestamps_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->timestamps().data(), this->timestamps_size(), output);
  }

  // repeated .xviz.PrimitiveState primitives = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->primitives_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->primitives(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xviz.FutureInstances)
}

::google::protobuf::uint8* FutureInstances::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xviz.FutureInstances)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double timestamps = 1;
  if (this->timestamps_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _timestamps_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->timestamps_, target);
  }

  // repeated .xviz.PrimitiveState primitives = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->primitives_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->primitives(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.FutureInstances)
  return target;
}

size_t FutureInstances::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.FutureInstances)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double timestamps = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->timestamps_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _timestamps_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .xviz.PrimitiveState primitives = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->primitives_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->primitives(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureInstances::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.FutureInstances)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureInstances* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureInstances>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.FutureInstances)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.FutureInstances)
    MergeFrom(*source);
  }
}

void FutureInstances::MergeFrom(const FutureInstances& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.FutureInstances)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timestamps_.MergeFrom(from.timestamps_);
  primitives_.MergeFrom(from.primitives_);
}

void FutureInstances::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.FutureInstances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureInstances::CopyFrom(const FutureInstances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.FutureInstances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureInstances::IsInitialized() const {
  return true;
}

void FutureInstances::Swap(FutureInstances* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureInstances::InternalSwap(FutureInstances* other) {
  using std::swap;
  timestamps_.InternalSwap(&other->timestamps_);
  CastToBase(&primitives_)->InternalSwap(CastToBase(&other->primitives_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FutureInstances::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VariableState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariableState::kVariablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariableState::VariableState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_VariableState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.VariableState)
}
VariableState::VariableState(const VariableState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      variables_(from.variables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xviz.VariableState)
}

void VariableState::SharedCtor() {
}

VariableState::~VariableState() {
  // @@protoc_insertion_point(destructor:xviz.VariableState)
  SharedDtor();
}

void VariableState::SharedDtor() {
}

void VariableState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VariableState::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VariableState& VariableState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_VariableState.base);
  return *internal_default_instance();
}


void VariableState::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.VariableState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  _internal_metadata_.Clear();
}

bool VariableState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.VariableState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xviz.Variable variables = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_variables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.VariableState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.VariableState)
  return false;
#undef DO_
}

void VariableState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.VariableState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xviz.Variable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->variables(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xviz.VariableState)
}

::google::protobuf::uint8* VariableState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xviz.VariableState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xviz.Variable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->variables(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.VariableState)
  return target;
}

size_t VariableState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.VariableState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .xviz.Variable variables = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->variables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->variables(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariableState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.VariableState)
  GOOGLE_DCHECK_NE(&from, this);
  const VariableState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VariableState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.VariableState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.VariableState)
    MergeFrom(*source);
  }
}

void VariableState::MergeFrom(const VariableState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.VariableState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
}

void VariableState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.VariableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableState::CopyFrom(const VariableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.VariableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableState::IsInitialized() const {
  return true;
}

void VariableState::Swap(VariableState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VariableState::InternalSwap(VariableState* other) {
  using std::swap;
  CastToBase(&variables_)->InternalSwap(CastToBase(&other->variables_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VariableState::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnnotationState::InitAsDefaultInstance() {
}
void AnnotationState::clear_visuals() {
  visuals_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotationState::kVisualsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnotationState::AnnotationState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_AnnotationState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.AnnotationState)
}
AnnotationState::AnnotationState(const AnnotationState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      visuals_(from.visuals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xviz.AnnotationState)
}

void AnnotationState::SharedCtor() {
}

AnnotationState::~AnnotationState() {
  // @@protoc_insertion_point(destructor:xviz.AnnotationState)
  SharedDtor();
}

void AnnotationState::SharedDtor() {
}

void AnnotationState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AnnotationState::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnnotationState& AnnotationState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_AnnotationState.base);
  return *internal_default_instance();
}


void AnnotationState::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.AnnotationState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visuals_.Clear();
  _internal_metadata_.Clear();
}

bool AnnotationState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.AnnotationState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xviz.Visual visuals = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_visuals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.AnnotationState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.AnnotationState)
  return false;
#undef DO_
}

void AnnotationState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.AnnotationState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xviz.Visual visuals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->visuals_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->visuals(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xviz.AnnotationState)
}

::google::protobuf::uint8* AnnotationState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xviz.AnnotationState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xviz.Visual visuals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->visuals_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->visuals(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.AnnotationState)
  return target;
}

size_t AnnotationState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.AnnotationState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .xviz.Visual visuals = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->visuals_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->visuals(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnotationState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.AnnotationState)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotationState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnotationState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.AnnotationState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.AnnotationState)
    MergeFrom(*source);
  }
}

void AnnotationState::MergeFrom(const AnnotationState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.AnnotationState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  visuals_.MergeFrom(from.visuals_);
}

void AnnotationState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.AnnotationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotationState::CopyFrom(const AnnotationState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.AnnotationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationState::IsInitialized() const {
  return true;
}

void AnnotationState::Swap(AnnotationState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnotationState::InternalSwap(AnnotationState* other) {
  using std::swap;
  CastToBase(&visuals_)->InternalSwap(CastToBase(&other->visuals_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AnnotationState::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Variable::InitAsDefaultInstance() {
  ::xviz::_Variable_default_instance_._instance.get_mutable()->base_ = const_cast< ::xviz::VariableBase*>(
      ::xviz::VariableBase::internal_default_instance());
  ::xviz::_Variable_default_instance_._instance.get_mutable()->values_ = const_cast< ::xviz::Values*>(
      ::xviz::Values::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Variable::kBaseFieldNumber;
const int Variable::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Variable::Variable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_Variable.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Variable)
}
Variable::Variable(const Variable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::xviz::VariableBase(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_values()) {
    values_ = new ::xviz::Values(*from.values_);
  } else {
    values_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xviz.Variable)
}

void Variable::SharedCtor() {
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&values_) -
      reinterpret_cast<char*>(&base_)) + sizeof(values_));
}

Variable::~Variable() {
  // @@protoc_insertion_point(destructor:xviz.Variable)
  SharedDtor();
}

void Variable::SharedDtor() {
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete values_;
}

void Variable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Variable::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Variable& Variable::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_Variable.base);
  return *internal_default_instance();
}


void Variable::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Variable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && values_ != NULL) {
    delete values_;
  }
  values_ = NULL;
  _internal_metadata_.Clear();
}

bool Variable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Variable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xviz.VariableBase base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xviz.Values values = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Variable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Variable)
  return false;
#undef DO_
}

void Variable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Variable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz.VariableBase base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_base(), output);
  }

  // .xviz.Values values = 2;
  if (this->has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_values(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xviz.Variable)
}

::google::protobuf::uint8* Variable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Variable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz.VariableBase base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_base(), deterministic, target);
  }

  // .xviz.Values values = 2;
  if (this->has_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_values(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.Variable)
  return target;
}

size_t Variable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Variable)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .xviz.VariableBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .xviz.Values values = 2;
  if (this->has_values()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *values_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Variable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Variable)
  GOOGLE_DCHECK_NE(&from, this);
  const Variable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Variable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Variable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Variable)
    MergeFrom(*source);
  }
}

void Variable::MergeFrom(const Variable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Variable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    mutable_base()->::xviz::VariableBase::MergeFrom(from.base());
  }
  if (from.has_values()) {
    mutable_values()->::xviz::Values::MergeFrom(from.values());
  }
}

void Variable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Variable::CopyFrom(const Variable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Variable::IsInitialized() const {
  return true;
}

void Variable::Swap(Variable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Variable::InternalSwap(Variable* other) {
  using std::swap;
  swap(base_, other->base_);
  swap(values_, other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Variable::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VariableBase::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariableBase::kObjectIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariableBase::VariableBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_VariableBase.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.VariableBase)
}
VariableBase::VariableBase(const VariableBase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  // @@protoc_insertion_point(copy_constructor:xviz.VariableBase)
}

void VariableBase::SharedCtor() {
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VariableBase::~VariableBase() {
  // @@protoc_insertion_point(destructor:xviz.VariableBase)
  SharedDtor();
}

void VariableBase::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VariableBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VariableBase::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VariableBase& VariableBase::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_VariableBase.base);
  return *internal_default_instance();
}


void VariableBase::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.VariableBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool VariableBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.VariableBase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string object_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.VariableBase.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.VariableBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.VariableBase)
  return false;
#undef DO_
}

void VariableBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.VariableBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.VariableBase.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->object_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xviz.VariableBase)
}

::google::protobuf::uint8* VariableBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xviz.VariableBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.VariableBase.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.VariableBase)
  return target;
}

size_t VariableBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.VariableBase)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string object_id = 1;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariableBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.VariableBase)
  GOOGLE_DCHECK_NE(&from, this);
  const VariableBase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VariableBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.VariableBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.VariableBase)
    MergeFrom(*source);
  }
}

void VariableBase::MergeFrom(const VariableBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.VariableBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
}

void VariableBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.VariableBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableBase::CopyFrom(const VariableBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.VariableBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableBase::IsInitialized() const {
  return true;
}

void VariableBase::Swap(VariableBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VariableBase::InternalSwap(VariableBase* other) {
  using std::swap;
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VariableBase::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Values::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Values::kDoublesFieldNumber;
const int Values::kInt32SFieldNumber;
const int Values::kBoolsFieldNumber;
const int Values::kStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Values::Values()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_Values.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Values)
}
Values::Values(const Values& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      doubles_(from.doubles_),
      int32s_(from.int32s_),
      bools_(from.bools_),
      strings_(from.strings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xviz.Values)
}

void Values::SharedCtor() {
}

Values::~Values() {
  // @@protoc_insertion_point(destructor:xviz.Values)
  SharedDtor();
}

void Values::SharedDtor() {
}

void Values::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Values::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Values& Values::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_Values.base);
  return *internal_default_instance();
}


void Values::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Values)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doubles_.Clear();
  int32s_.Clear();
  bools_.Clear();
  strings_.Clear();
  _internal_metadata_.Clear();
}

bool Values::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Values)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double doubles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_doubles())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_doubles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 int32s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32s())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_int32s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool bools = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_bools())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 34u, input, this->mutable_bools())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string strings = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strings()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strings(this->strings_size() - 1).data(),
            static_cast<int>(this->strings(this->strings_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.Values.strings"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Values)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Values)
  return false;
#undef DO_
}

void Values::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Values)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double doubles = 2;
  if (this->doubles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _doubles_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->doubles().data(), this->doubles_size(), output);
  }

  // repeated int32 int32s = 3;
  if (this->int32s_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _int32s_cached_byte_size_));
  }
  for (int i = 0, n = this->int32s_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->int32s(i), output);
  }

  // repeated bool bools = 4;
  if (this->bools_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _bools_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->bools().data(), this->bools_size(), output);
  }

  // repeated string strings = 5;
  for (int i = 0, n = this->strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strings(i).data(), static_cast<int>(this->strings(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Values.strings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strings(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xviz.Values)
}

::google::protobuf::uint8* Values::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Values)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double doubles = 2;
  if (this->doubles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _doubles_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->doubles_, target);
  }

  // repeated int32 int32s = 3;
  if (this->int32s_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _int32s_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->int32s_, target);
  }

  // repeated bool bools = 4;
  if (this->bools_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _bools_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->bools_, target);
  }

  // repeated string strings = 5;
  for (int i = 0, n = this->strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strings(i).data(), static_cast<int>(this->strings(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Values.strings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->strings(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.Values)
  return target;
}

size_t Values::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Values)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double doubles = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->doubles_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _doubles_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 int32s = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->int32s_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int32s_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool bools = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->bools_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bools_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string strings = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->strings_size());
  for (int i = 0, n = this->strings_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strings(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Values::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Values)
  GOOGLE_DCHECK_NE(&from, this);
  const Values* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Values>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Values)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Values)
    MergeFrom(*source);
  }
}

void Values::MergeFrom(const Values& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Values)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  doubles_.MergeFrom(from.doubles_);
  int32s_.MergeFrom(from.int32s_);
  bools_.MergeFrom(from.bools_);
  strings_.MergeFrom(from.strings_);
}

void Values::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Values)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Values::CopyFrom(const Values& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Values)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Values::IsInitialized() const {
  return true;
}

void Values::Swap(Values* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Values::InternalSwap(Values* other) {
  using std::swap;
  doubles_.InternalSwap(&other->doubles_);
  int32s_.InternalSwap(&other->int32s_);
  bools_.InternalSwap(&other->bools_);
  strings_.InternalSwap(CastToBase(&other->strings_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Values::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Link::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Link::kTargetPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Link::Link()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_core_2eproto::scc_info_Link.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Link)
}
Link::Link(const Link& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_pose_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.target_pose().size() > 0) {
    target_pose_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_pose_);
  }
  // @@protoc_insertion_point(copy_constructor:xviz.Link)
}

void Link::SharedCtor() {
  target_pose_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:xviz.Link)
  SharedDtor();
}

void Link::SharedDtor() {
  target_pose_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Link::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Link::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Link& Link::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_core_2eproto::scc_info_Link.base);
  return *internal_default_instance();
}


void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_pose_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.Link)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string target_pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_pose()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target_pose().data(), static_cast<int>(this->target_pose().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.Link.target_pose"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.Link)
  return false;
#undef DO_
}

void Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target_pose = 1;
  if (this->target_pose().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_pose().data(), static_cast<int>(this->target_pose().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Link.target_pose");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->target_pose(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:xviz.Link)
}

::google::protobuf::uint8* Link::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target_pose = 1;
  if (this->target_pose().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_pose().data(), static_cast<int>(this->target_pose().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.Link.target_pose");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target_pose(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Link)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string target_pose = 1;
  if (this->target_pose().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target_pose());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Link::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Link)
  GOOGLE_DCHECK_NE(&from, this);
  const Link* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Link>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Link)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Link)
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Link)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_pose().size() > 0) {

    target_pose_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_pose_);
  }
}

void Link::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  return true;
}

void Link::Swap(Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Link::InternalSwap(Link* other) {
  using std::swap;
  target_pose_.Swap(&other->target_pose_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Link::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xviz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::StreamSet_PosesEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::StreamSet_PosesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::StreamSet_PosesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::StreamSet_PrimitivesEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::StreamSet_PrimitivesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::StreamSet_PrimitivesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::StreamSet_FutureInstancesEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::StreamSet_FutureInstancesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::StreamSet_FutureInstancesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::StreamSet_VariablesEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::StreamSet_VariablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::StreamSet_VariablesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::StreamSet_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::StreamSet_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::StreamSet_AnnotationsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::StreamSet_UiPrimitivesEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::StreamSet_UiPrimitivesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::StreamSet_UiPrimitivesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::StreamSet_LinksEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::StreamSet_LinksEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::StreamSet_LinksEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::StreamSet* Arena::CreateMaybeMessage< ::xviz::StreamSet >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::StreamSet >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::Pose* Arena::CreateMaybeMessage< ::xviz::Pose >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::Pose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::MapOrigin* Arena::CreateMaybeMessage< ::xviz::MapOrigin >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::MapOrigin >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::PrimitiveState* Arena::CreateMaybeMessage< ::xviz::PrimitiveState >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::PrimitiveState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::UIPrimitiveState* Arena::CreateMaybeMessage< ::xviz::UIPrimitiveState >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::UIPrimitiveState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::TimeSeriesState* Arena::CreateMaybeMessage< ::xviz::TimeSeriesState >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::TimeSeriesState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::FutureInstances* Arena::CreateMaybeMessage< ::xviz::FutureInstances >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::FutureInstances >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::VariableState* Arena::CreateMaybeMessage< ::xviz::VariableState >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::VariableState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::AnnotationState* Arena::CreateMaybeMessage< ::xviz::AnnotationState >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::AnnotationState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::Variable* Arena::CreateMaybeMessage< ::xviz::Variable >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::Variable >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::VariableBase* Arena::CreateMaybeMessage< ::xviz::VariableBase >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::VariableBase >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::Values* Arena::CreateMaybeMessage< ::xviz::Values >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::Values >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::xviz::Link* Arena::CreateMaybeMessage< ::xviz::Link >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::Link >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
