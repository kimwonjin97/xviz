// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xviz/v2/session.proto

#include "xviz/v2/session.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xviz_2fv2_2fsession_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraInfo_xviz_2fv2_2fsession_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xviz_2fv2_2fsession_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogInfo_xviz_2fv2_2fsession_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xviz_2fv2_2fsession_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metadata_CamerasEntry_DoNotUse_xviz_2fv2_2fsession_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xviz_2fv2_2fsession_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Metadata_StreamAliasesEntry_DoNotUse_xviz_2fv2_2fsession_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xviz_2fv2_2fsession_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metadata_StreamsEntry_DoNotUse_xviz_2fv2_2fsession_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xviz_2fv2_2fsession_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metadata_UiConfigEntry_DoNotUse_xviz_2fv2_2fsession_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xviz_2fv2_2fsession_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamMetadata_xviz_2fv2_2fsession_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xviz_2fv2_2fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_StreamSet_xviz_2fv2_2fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xviz_2fv2_2fstyle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StyleClass_xviz_2fv2_2fstyle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xviz_2fv2_2fstyle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StyleStreamValue_xviz_2fv2_2fstyle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_xviz_2fv2_2fsession_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UIPanelInfo_xviz_2fv2_2fsession_2eproto;
namespace xviz {
namespace v2 {
class StartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Start> _instance;
} _Start_default_instance_;
class TransformLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransformLog> _instance;
} _TransformLog_default_instance_;
class StateUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateUpdate> _instance;
} _StateUpdate_default_instance_;
class TransformLogDoneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransformLogDone> _instance;
} _TransformLogDone_default_instance_;
class TransformPointInTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransformPointInTime> _instance;
} _TransformPointInTime_default_instance_;
class ReconfigureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Reconfigure> _instance;
} _Reconfigure_default_instance_;
class Metadata_StreamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metadata_StreamsEntry_DoNotUse> _instance;
} _Metadata_StreamsEntry_DoNotUse_default_instance_;
class Metadata_CamerasEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metadata_CamerasEntry_DoNotUse> _instance;
} _Metadata_CamerasEntry_DoNotUse_default_instance_;
class Metadata_StreamAliasesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metadata_StreamAliasesEntry_DoNotUse> _instance;
} _Metadata_StreamAliasesEntry_DoNotUse_default_instance_;
class Metadata_UiConfigEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metadata_UiConfigEntry_DoNotUse> _instance;
} _Metadata_UiConfigEntry_DoNotUse_default_instance_;
class MetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metadata> _instance;
} _Metadata_default_instance_;
class ErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Error> _instance;
} _Error_default_instance_;
class StreamMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamMetadata> _instance;
} _StreamMetadata_default_instance_;
class CameraInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraInfo> _instance;
} _CameraInfo_default_instance_;
class UIPanelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UIPanelInfo> _instance;
} _UIPanelInfo_default_instance_;
class LogInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogInfo> _instance;
} _LogInfo_default_instance_;
}  // namespace v2
}  // namespace xviz
static void InitDefaultsscc_info_CameraInfo_xviz_2fv2_2fsession_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::v2::_CameraInfo_default_instance_;
    new (ptr) ::xviz::v2::CameraInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::v2::CameraInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraInfo_xviz_2fv2_2fsession_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CameraInfo_xviz_2fv2_2fsession_2eproto}, {}};

static void InitDefaultsscc_info_Error_xviz_2fv2_2fsession_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::v2::_Error_default_instance_;
    new (ptr) ::xviz::v2::Error();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::v2::Error::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_xviz_2fv2_2fsession_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Error_xviz_2fv2_2fsession_2eproto}, {}};

static void InitDefaultsscc_info_LogInfo_xviz_2fv2_2fsession_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::v2::_LogInfo_default_instance_;
    new (ptr) ::xviz::v2::LogInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::v2::LogInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogInfo_xviz_2fv2_2fsession_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogInfo_xviz_2fv2_2fsession_2eproto}, {}};

static void InitDefaultsscc_info_Metadata_xviz_2fv2_2fsession_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::v2::_Metadata_default_instance_;
    new (ptr) ::xviz::v2::Metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::v2::Metadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Metadata_xviz_2fv2_2fsession_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Metadata_xviz_2fv2_2fsession_2eproto}, {
      &scc_info_Metadata_StreamsEntry_DoNotUse_xviz_2fv2_2fsession_2eproto.base,
      &scc_info_Metadata_CamerasEntry_DoNotUse_xviz_2fv2_2fsession_2eproto.base,
      &scc_info_Metadata_StreamAliasesEntry_DoNotUse_xviz_2fv2_2fsession_2eproto.base,
      &scc_info_Metadata_UiConfigEntry_DoNotUse_xviz_2fv2_2fsession_2eproto.base,
      &scc_info_LogInfo_xviz_2fv2_2fsession_2eproto.base,}};

static void InitDefaultsscc_info_Metadata_CamerasEntry_DoNotUse_xviz_2fv2_2fsession_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::v2::_Metadata_CamerasEntry_DoNotUse_default_instance_;
    new (ptr) ::xviz::v2::Metadata_CamerasEntry_DoNotUse();
  }
  ::xviz::v2::Metadata_CamerasEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metadata_CamerasEntry_DoNotUse_xviz_2fv2_2fsession_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Metadata_CamerasEntry_DoNotUse_xviz_2fv2_2fsession_2eproto}, {
      &scc_info_CameraInfo_xviz_2fv2_2fsession_2eproto.base,}};

static void InitDefaultsscc_info_Metadata_StreamAliasesEntry_DoNotUse_xviz_2fv2_2fsession_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::v2::_Metadata_StreamAliasesEntry_DoNotUse_default_instance_;
    new (ptr) ::xviz::v2::Metadata_StreamAliasesEntry_DoNotUse();
  }
  ::xviz::v2::Metadata_StreamAliasesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Metadata_StreamAliasesEntry_DoNotUse_xviz_2fv2_2fsession_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Metadata_StreamAliasesEntry_DoNotUse_xviz_2fv2_2fsession_2eproto}, {}};

static void InitDefaultsscc_info_Metadata_StreamsEntry_DoNotUse_xviz_2fv2_2fsession_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::v2::_Metadata_StreamsEntry_DoNotUse_default_instance_;
    new (ptr) ::xviz::v2::Metadata_StreamsEntry_DoNotUse();
  }
  ::xviz::v2::Metadata_StreamsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metadata_StreamsEntry_DoNotUse_xviz_2fv2_2fsession_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Metadata_StreamsEntry_DoNotUse_xviz_2fv2_2fsession_2eproto}, {
      &scc_info_StreamMetadata_xviz_2fv2_2fsession_2eproto.base,}};

static void InitDefaultsscc_info_Metadata_UiConfigEntry_DoNotUse_xviz_2fv2_2fsession_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::v2::_Metadata_UiConfigEntry_DoNotUse_default_instance_;
    new (ptr) ::xviz::v2::Metadata_UiConfigEntry_DoNotUse();
  }
  ::xviz::v2::Metadata_UiConfigEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metadata_UiConfigEntry_DoNotUse_xviz_2fv2_2fsession_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Metadata_UiConfigEntry_DoNotUse_xviz_2fv2_2fsession_2eproto}, {
      &scc_info_UIPanelInfo_xviz_2fv2_2fsession_2eproto.base,}};

static void InitDefaultsscc_info_Reconfigure_xviz_2fv2_2fsession_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::v2::_Reconfigure_default_instance_;
    new (ptr) ::xviz::v2::Reconfigure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::v2::Reconfigure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Reconfigure_xviz_2fv2_2fsession_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Reconfigure_xviz_2fv2_2fsession_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_Start_xviz_2fv2_2fsession_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::v2::_Start_default_instance_;
    new (ptr) ::xviz::v2::Start();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::v2::Start::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Start_xviz_2fv2_2fsession_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Start_xviz_2fv2_2fsession_2eproto}, {}};

static void InitDefaultsscc_info_StateUpdate_xviz_2fv2_2fsession_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::v2::_StateUpdate_default_instance_;
    new (ptr) ::xviz::v2::StateUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::v2::StateUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateUpdate_xviz_2fv2_2fsession_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StateUpdate_xviz_2fv2_2fsession_2eproto}, {
      &scc_info_StreamSet_xviz_2fv2_2fcore_2eproto.base,}};

static void InitDefaultsscc_info_StreamMetadata_xviz_2fv2_2fsession_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::v2::_StreamMetadata_default_instance_;
    new (ptr) ::xviz::v2::StreamMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::v2::StreamMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamMetadata_xviz_2fv2_2fsession_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamMetadata_xviz_2fv2_2fsession_2eproto}, {
      &scc_info_StyleStreamValue_xviz_2fv2_2fstyle_2eproto.base,
      &scc_info_StyleClass_xviz_2fv2_2fstyle_2eproto.base,}};

static void InitDefaultsscc_info_TransformLog_xviz_2fv2_2fsession_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::v2::_TransformLog_default_instance_;
    new (ptr) ::xviz::v2::TransformLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::v2::TransformLog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransformLog_xviz_2fv2_2fsession_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransformLog_xviz_2fv2_2fsession_2eproto}, {}};

static void InitDefaultsscc_info_TransformLogDone_xviz_2fv2_2fsession_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::v2::_TransformLogDone_default_instance_;
    new (ptr) ::xviz::v2::TransformLogDone();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::v2::TransformLogDone::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransformLogDone_xviz_2fv2_2fsession_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransformLogDone_xviz_2fv2_2fsession_2eproto}, {}};

static void InitDefaultsscc_info_TransformPointInTime_xviz_2fv2_2fsession_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::v2::_TransformPointInTime_default_instance_;
    new (ptr) ::xviz::v2::TransformPointInTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::v2::TransformPointInTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransformPointInTime_xviz_2fv2_2fsession_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransformPointInTime_xviz_2fv2_2fsession_2eproto}, {}};

static void InitDefaultsscc_info_UIPanelInfo_xviz_2fv2_2fsession_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::v2::_UIPanelInfo_default_instance_;
    new (ptr) ::xviz::v2::UIPanelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::v2::UIPanelInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UIPanelInfo_xviz_2fv2_2fsession_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UIPanelInfo_xviz_2fv2_2fsession_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_xviz_2fv2_2fsession_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_xviz_2fv2_2fsession_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_xviz_2fv2_2fsession_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_xviz_2fv2_2fsession_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Start, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Start, version_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Start, profile_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Start, session_type_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Start, message_format_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Start, log_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::TransformLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::TransformLog, id_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::TransformLog, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::TransformLog, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::TransformLog, desired_streams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::StateUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::StateUpdate, update_type_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::StateUpdate, updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::TransformLogDone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::TransformLogDone, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::TransformPointInTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::TransformPointInTime, id_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::TransformPointInTime, query_timestamp_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::TransformPointInTime, desired_streams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Reconfigure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Reconfigure, update_type_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Reconfigure, config_update_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata_StreamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata_StreamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata_StreamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata_StreamsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata_CamerasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata_CamerasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata_CamerasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata_CamerasEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata_StreamAliasesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata_StreamAliasesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata_StreamAliasesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata_StreamAliasesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata_UiConfigEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata_UiConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata_UiConfigEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata_UiConfigEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata, version_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata, streams_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata, cameras_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata, stream_aliases_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata, ui_config_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Metadata, log_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::Error, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::StreamMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::StreamMetadata, source_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::StreamMetadata, units_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::StreamMetadata, category_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::StreamMetadata, scalar_type_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::StreamMetadata, primitive_type_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::StreamMetadata, ui_primitive_type_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::StreamMetadata, annotation_type_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::StreamMetadata, stream_style_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::StreamMetadata, style_classes_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::StreamMetadata, coordinate_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::StreamMetadata, transform_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::StreamMetadata, transform_callback_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::CameraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::CameraInfo, human_name_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::CameraInfo, source_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::CameraInfo, vehicle_position_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::CameraInfo, vehicle_orientation_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::CameraInfo, pixel_width_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::CameraInfo, pixel_height_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::CameraInfo, rectification_projection_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::CameraInfo, gl_projection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::UIPanelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::UIPanelInfo, name_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::UIPanelInfo, needed_streams_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::UIPanelInfo, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::LogInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::v2::LogInfo, start_time_),
  PROTOBUF_FIELD_OFFSET(::xviz::v2::LogInfo, end_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xviz::v2::Start)},
  { 10, -1, sizeof(::xviz::v2::TransformLog)},
  { 19, -1, sizeof(::xviz::v2::StateUpdate)},
  { 26, -1, sizeof(::xviz::v2::TransformLogDone)},
  { 32, -1, sizeof(::xviz::v2::TransformPointInTime)},
  { 40, -1, sizeof(::xviz::v2::Reconfigure)},
  { 47, 54, sizeof(::xviz::v2::Metadata_StreamsEntry_DoNotUse)},
  { 56, 63, sizeof(::xviz::v2::Metadata_CamerasEntry_DoNotUse)},
  { 65, 72, sizeof(::xviz::v2::Metadata_StreamAliasesEntry_DoNotUse)},
  { 74, 81, sizeof(::xviz::v2::Metadata_UiConfigEntry_DoNotUse)},
  { 83, -1, sizeof(::xviz::v2::Metadata)},
  { 94, -1, sizeof(::xviz::v2::Error)},
  { 100, -1, sizeof(::xviz::v2::StreamMetadata)},
  { 117, -1, sizeof(::xviz::v2::CameraInfo)},
  { 130, -1, sizeof(::xviz::v2::UIPanelInfo)},
  { 138, -1, sizeof(::xviz::v2::LogInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::v2::_Start_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::v2::_TransformLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::v2::_StateUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::v2::_TransformLogDone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::v2::_TransformPointInTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::v2::_Reconfigure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::v2::_Metadata_StreamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::v2::_Metadata_CamerasEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::v2::_Metadata_StreamAliasesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::v2::_Metadata_UiConfigEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::v2::_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::v2::_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::v2::_StreamMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::v2::_CameraInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::v2::_UIPanelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::v2::_LogInfo_default_instance_),
};

const char descriptor_table_protodef_xviz_2fv2_2fsession_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025xviz/v2/session.proto\022\007xviz.v2\032\034google"
  "/protobuf/struct.proto\032\022xviz/v2/core.pro"
  "to\032\025xviz/v2/options.proto\032\023xviz/v2/style"
  ".proto\"\364\001\n\005Start\022\017\n\007version\030\001 \001(\t\022\017\n\007pro"
  "file\030\002 \001(\t\022*\n\014session_type\030\003 \001(\0162\024.xviz."
  "v2.SessionType\0224\n\016message_format\030\004 \001(\0162\034"
  ".xviz.v2.Start.MessageFormat\022\013\n\003log\030\005 \001("
  "\t\"G\n\rMessageFormat\022 \n\034START_MESSAGE_FORM"
  "AT_INVALID\020\000\022\010\n\004JSON\020\001\022\n\n\006BINARY\020\002:\021\302\273\032\r"
  "session/start\"~\n\014TransformLog\022\n\n\002id\030\001 \001("
  "\t\022\027\n\017start_timestamp\030\002 \001(\001\022\025\n\rend_timest"
  "amp\030\003 \001(\001\022\027\n\017desired_streams\030\004 \003(\t:\031\302\273\032\025"
  "session/transform_log\"\371\001\n\013StateUpdate\0224\n"
  "\013update_type\030\001 \001(\0162\037.xviz.v2.StateUpdate"
  ".UpdateType\022#\n\007updates\030\002 \003(\0132\022.xviz.v2.S"
  "treamSet\"u\n\nUpdateType\022$\n STATE_UPDATE_U"
  "PDATE_TYPE_INVALID\020\000\022\014\n\010SNAPSHOT\020\001\022\017\n\013IN"
  "CREMENTAL\020\002\022\022\n\016COMPLETE_STATE\020\003\022\016\n\nPERSI"
  "STENT\020\004:\030\302\273\032\024session/state_update\">\n\020Tra"
  "nsformLogDone\022\n\n\002id\030\001 \001(\t:\036\302\273\032\032session/t"
  "ransform_log_done\"y\n\024TransformPointInTim"
  "e\022\n\n\002id\030\001 \001(\t\022\027\n\017query_timestamp\030\002 \001(\001\022\027"
  "\n\017desired_streams\030\003 \003(\t:#\302\273\032\037session/tra"
  "nsform_point_in_time\"\324\001\n\013Reconfigure\0224\n\013"
  "update_type\030\001 \001(\0162\037.xviz.v2.Reconfigure."
  "UpdateType\022.\n\rconfig_update\030\002 \001(\0132\027.goog"
  "le.protobuf.Struct\"F\n\nUpdateType\022#\n\037RECO"
  "NFIGURE_UPDATE_TYPE_INVALID\020\000\022\t\n\005DELTA\020\001"
  "\022\010\n\004FULL\020\002:\027\302\273\032\023session/reconfigure\"\264\004\n\010"
  "Metadata\022\017\n\007version\030\001 \001(\t\022/\n\007streams\030\002 \003"
  "(\0132\036.xviz.v2.Metadata.StreamsEntry\022/\n\007ca"
  "meras\030\003 \003(\0132\036.xviz.v2.Metadata.CamerasEn"
  "try\022<\n\016stream_aliases\030\004 \003(\0132$.xviz.v2.Me"
  "tadata.StreamAliasesEntry\0222\n\tui_config\030\005"
  " \003(\0132\037.xviz.v2.Metadata.UiConfigEntry\022\"\n"
  "\010log_info\030\006 \001(\0132\020.xviz.v2.LogInfo\032G\n\014Str"
  "eamsEntry\022\013\n\003key\030\001 \001(\t\022&\n\005value\030\002 \001(\0132\027."
  "xviz.v2.StreamMetadata:\0028\001\032C\n\014CamerasEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\"\n\005value\030\002 \001(\0132\023.xviz.v2"
  ".CameraInfo:\0028\001\0324\n\022StreamAliasesEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032E\n\rUiConfi"
  "gEntry\022\013\n\003key\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.xvi"
  "z.v2.UIPanelInfo:\0028\001:\024\302\273\032\020session/metada"
  "ta\"+\n\005Error\022\017\n\007message\030\001 \001(\t:\021\302\273\032\rsessio"
  "n/error\"\370\t\n\016StreamMetadata\022\016\n\006source\030\001 \001"
  "(\t\022\r\n\005units\030\002 \001(\t\0222\n\010category\030\003 \001(\0162 .xv"
  "iz.v2.StreamMetadata.Category\0227\n\013scalar_"
  "type\030\004 \001(\0162\".xviz.v2.StreamMetadata.Scal"
  "arType\022=\n\016primitive_type\030\005 \001(\0162%.xviz.v2"
  ".StreamMetadata.PrimitiveType\022B\n\021ui_prim"
  "itive_type\030\006 \001(\0162\'.xviz.v2.StreamMetadat"
  "a.UIPrimitiveType\022\?\n\017annotation_type\030\007 \001"
  "(\0162&.xviz.v2.StreamMetadata.AnnotationTy"
  "pe\022/\n\014stream_style\030\010 \001(\0132\031.xviz.v2.Style"
  "StreamValue\022*\n\rstyle_classes\030\t \003(\0132\023.xvi"
  "z.v2.StyleClass\022:\n\ncoordinate\030\n \001(\0162&.xv"
  "iz.v2.StreamMetadata.CoordinateType\022\021\n\tt"
  "ransform\030\013 \003(\001\022\032\n\022transform_callback\030\014 \001"
  "(\t\"\237\001\n\010Category\022$\n STREAM_METADATA_CATEG"
  "ORY_INVALID\020\000\022\r\n\tPRIMITIVE\020\001\022\017\n\013TIME_SER"
  "IES\020\002\022\014\n\010VARIABLE\020\003\022\016\n\nANNOTATION\020\004\022\023\n\017F"
  "UTURE_INSTANCE\020\005\022\010\n\004POSE\020\006\022\020\n\014UI_PRIMITI"
  "VE\020\007\"a\n\nScalarType\022\'\n#STREAM_METADATA_SC"
  "ALAR_TYPE_INVALID\020\000\022\t\n\005FLOAT\020\001\022\t\n\005INT32\020"
  "\002\022\n\n\006STRING\020\003\022\010\n\004BOOL\020\004\"\217\001\n\rPrimitiveTyp"
  "e\022*\n&STREAM_METADATA_PRIMITIVE_TYPE_INVA"
  "LID\020\000\022\n\n\006CIRCLE\020\001\022\t\n\005IMAGE\020\002\022\t\n\005POINT\020\003\022"
  "\013\n\007POLYGON\020\004\022\014\n\010POLYLINE\020\005\022\013\n\007STADIUM\020\006\022"
  "\010\n\004TEXT\020\007\"O\n\017UIPrimitiveType\022-\n)STREAM_M"
  "ETADATA_UI_PRIMITIVE_TYPE_INVALID\020\000\022\r\n\tT"
  "REETABLE\020\001\"I\n\016AnnotationType\022+\n\'STREAM_M"
  "ETADATA_ANNOTATION_TYPE_INVALID\020\000\022\n\n\006VIS"
  "UAL\020\001\"~\n\016CoordinateType\022+\n\'STREAM_METADA"
  "TA_COORDINATE_TYPE_INVALID\020\000\022\016\n\nGEOGRAPH"
  "IC\020\001\022\014\n\010IDENTITY\020\002\022\013\n\007DYNAMIC\020\003\022\024\n\020VEHIC"
  "LE_RELATIVE\020\004:\033\302\273\032\027session/stream_metada"
  "ta\"\344\001\n\nCameraInfo\022\022\n\nhuman_name\030\001 \001(\t\022\016\n"
  "\006source\030\002 \001(\t\022\030\n\020vehicle_position\030\003 \003(\001\022"
  "\033\n\023vehicle_orientation\030\004 \003(\001\022\023\n\013pixel_wi"
  "dth\030\005 \001(\001\022\024\n\014pixel_height\030\006 \001(\001\022 \n\030recti"
  "fication_projection\030\007 \003(\001\022\025\n\rgl_projecti"
  "on\030\010 \003(\001:\027\302\273\032\023session/camera_info\"w\n\013UIP"
  "anelInfo\022\014\n\004name\030\001 \001(\t\022\026\n\016needed_streams"
  "\030\002 \003(\t\022\'\n\006config\030\003 \001(\0132\027.google.protobuf"
  ".Struct:\031\302\273\032\025session/ui_panel_info\"E\n\007Lo"
  "gInfo\022\022\n\nstart_time\030\001 \001(\001\022\020\n\010end_time\030\002 "
  "\001(\001:\024\302\273\032\020session/log_info*N\n\013SessionType"
  "\022\030\n\024SESSION_TYPE_INVALID\020\000\022\010\n\004LIVE\020\001\022\007\n\003"
  "LOG\020\002\022\022\n\016UNBUFFERED_LOG\020\003B>\n\013com.xviz.v2"
  "B\014SessionProtoP\001Z\004v2pb\242\002\004XVIZ\252\002\007xviz.V2\312"
  "\002\007Xviz\\V2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_xviz_2fv2_2fsession_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_xviz_2fv2_2fcore_2eproto,
  &::descriptor_table_xviz_2fv2_2foptions_2eproto,
  &::descriptor_table_xviz_2fv2_2fstyle_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_xviz_2fv2_2fsession_2eproto_sccs[16] = {
  &scc_info_CameraInfo_xviz_2fv2_2fsession_2eproto.base,
  &scc_info_Error_xviz_2fv2_2fsession_2eproto.base,
  &scc_info_LogInfo_xviz_2fv2_2fsession_2eproto.base,
  &scc_info_Metadata_xviz_2fv2_2fsession_2eproto.base,
  &scc_info_Metadata_CamerasEntry_DoNotUse_xviz_2fv2_2fsession_2eproto.base,
  &scc_info_Metadata_StreamAliasesEntry_DoNotUse_xviz_2fv2_2fsession_2eproto.base,
  &scc_info_Metadata_StreamsEntry_DoNotUse_xviz_2fv2_2fsession_2eproto.base,
  &scc_info_Metadata_UiConfigEntry_DoNotUse_xviz_2fv2_2fsession_2eproto.base,
  &scc_info_Reconfigure_xviz_2fv2_2fsession_2eproto.base,
  &scc_info_Start_xviz_2fv2_2fsession_2eproto.base,
  &scc_info_StateUpdate_xviz_2fv2_2fsession_2eproto.base,
  &scc_info_StreamMetadata_xviz_2fv2_2fsession_2eproto.base,
  &scc_info_TransformLog_xviz_2fv2_2fsession_2eproto.base,
  &scc_info_TransformLogDone_xviz_2fv2_2fsession_2eproto.base,
  &scc_info_TransformPointInTime_xviz_2fv2_2fsession_2eproto.base,
  &scc_info_UIPanelInfo_xviz_2fv2_2fsession_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_xviz_2fv2_2fsession_2eproto_once;
static bool descriptor_table_xviz_2fv2_2fsession_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xviz_2fv2_2fsession_2eproto = {
  &descriptor_table_xviz_2fv2_2fsession_2eproto_initialized, descriptor_table_protodef_xviz_2fv2_2fsession_2eproto, "xviz/v2/session.proto", 3617,
  &descriptor_table_xviz_2fv2_2fsession_2eproto_once, descriptor_table_xviz_2fv2_2fsession_2eproto_sccs, descriptor_table_xviz_2fv2_2fsession_2eproto_deps, 16, 4,
  schemas, file_default_instances, TableStruct_xviz_2fv2_2fsession_2eproto::offsets,
  file_level_metadata_xviz_2fv2_2fsession_2eproto, 16, file_level_enum_descriptors_xviz_2fv2_2fsession_2eproto, file_level_service_descriptors_xviz_2fv2_2fsession_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_xviz_2fv2_2fsession_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_xviz_2fv2_2fsession_2eproto), true);
namespace xviz {
namespace v2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Start_MessageFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xviz_2fv2_2fsession_2eproto);
  return file_level_enum_descriptors_xviz_2fv2_2fsession_2eproto[0];
}
bool Start_MessageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Start_MessageFormat Start::START_MESSAGE_FORMAT_INVALID;
constexpr Start_MessageFormat Start::JSON;
constexpr Start_MessageFormat Start::BINARY;
constexpr Start_MessageFormat Start::MessageFormat_MIN;
constexpr Start_MessageFormat Start::MessageFormat_MAX;
constexpr int Start::MessageFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateUpdate_UpdateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xviz_2fv2_2fsession_2eproto);
  return file_level_enum_descriptors_xviz_2fv2_2fsession_2eproto[1];
}
bool StateUpdate_UpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StateUpdate_UpdateType StateUpdate::STATE_UPDATE_UPDATE_TYPE_INVALID;
constexpr StateUpdate_UpdateType StateUpdate::SNAPSHOT;
constexpr StateUpdate_UpdateType StateUpdate::INCREMENTAL;
constexpr StateUpdate_UpdateType StateUpdate::COMPLETE_STATE;
constexpr StateUpdate_UpdateType StateUpdate::PERSISTENT;
constexpr StateUpdate_UpdateType StateUpdate::UpdateType_MIN;
constexpr StateUpdate_UpdateType StateUpdate::UpdateType_MAX;
constexpr int StateUpdate::UpdateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reconfigure_UpdateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xviz_2fv2_2fsession_2eproto);
  return file_level_enum_descriptors_xviz_2fv2_2fsession_2eproto[2];
}
bool Reconfigure_UpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Reconfigure_UpdateType Reconfigure::RECONFIGURE_UPDATE_TYPE_INVALID;
constexpr Reconfigure_UpdateType Reconfigure::DELTA;
constexpr Reconfigure_UpdateType Reconfigure::FULL;
constexpr Reconfigure_UpdateType Reconfigure::UpdateType_MIN;
constexpr Reconfigure_UpdateType Reconfigure::UpdateType_MAX;
constexpr int Reconfigure::UpdateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMetadata_Category_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xviz_2fv2_2fsession_2eproto);
  return file_level_enum_descriptors_xviz_2fv2_2fsession_2eproto[3];
}
bool StreamMetadata_Category_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StreamMetadata_Category StreamMetadata::STREAM_METADATA_CATEGORY_INVALID;
constexpr StreamMetadata_Category StreamMetadata::PRIMITIVE;
constexpr StreamMetadata_Category StreamMetadata::TIME_SERIES;
constexpr StreamMetadata_Category StreamMetadata::VARIABLE;
constexpr StreamMetadata_Category StreamMetadata::ANNOTATION;
constexpr StreamMetadata_Category StreamMetadata::FUTURE_INSTANCE;
constexpr StreamMetadata_Category StreamMetadata::POSE;
constexpr StreamMetadata_Category StreamMetadata::UI_PRIMITIVE;
constexpr StreamMetadata_Category StreamMetadata::Category_MIN;
constexpr StreamMetadata_Category StreamMetadata::Category_MAX;
constexpr int StreamMetadata::Category_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMetadata_ScalarType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xviz_2fv2_2fsession_2eproto);
  return file_level_enum_descriptors_xviz_2fv2_2fsession_2eproto[4];
}
bool StreamMetadata_ScalarType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StreamMetadata_ScalarType StreamMetadata::STREAM_METADATA_SCALAR_TYPE_INVALID;
constexpr StreamMetadata_ScalarType StreamMetadata::FLOAT;
constexpr StreamMetadata_ScalarType StreamMetadata::INT32;
constexpr StreamMetadata_ScalarType StreamMetadata::STRING;
constexpr StreamMetadata_ScalarType StreamMetadata::BOOL;
constexpr StreamMetadata_ScalarType StreamMetadata::ScalarType_MIN;
constexpr StreamMetadata_ScalarType StreamMetadata::ScalarType_MAX;
constexpr int StreamMetadata::ScalarType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMetadata_PrimitiveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xviz_2fv2_2fsession_2eproto);
  return file_level_enum_descriptors_xviz_2fv2_2fsession_2eproto[5];
}
bool StreamMetadata_PrimitiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StreamMetadata_PrimitiveType StreamMetadata::STREAM_METADATA_PRIMITIVE_TYPE_INVALID;
constexpr StreamMetadata_PrimitiveType StreamMetadata::CIRCLE;
constexpr StreamMetadata_PrimitiveType StreamMetadata::IMAGE;
constexpr StreamMetadata_PrimitiveType StreamMetadata::POINT;
constexpr StreamMetadata_PrimitiveType StreamMetadata::POLYGON;
constexpr StreamMetadata_PrimitiveType StreamMetadata::POLYLINE;
constexpr StreamMetadata_PrimitiveType StreamMetadata::STADIUM;
constexpr StreamMetadata_PrimitiveType StreamMetadata::TEXT;
constexpr StreamMetadata_PrimitiveType StreamMetadata::PrimitiveType_MIN;
constexpr StreamMetadata_PrimitiveType StreamMetadata::PrimitiveType_MAX;
constexpr int StreamMetadata::PrimitiveType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMetadata_UIPrimitiveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xviz_2fv2_2fsession_2eproto);
  return file_level_enum_descriptors_xviz_2fv2_2fsession_2eproto[6];
}
bool StreamMetadata_UIPrimitiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StreamMetadata_UIPrimitiveType StreamMetadata::STREAM_METADATA_UI_PRIMITIVE_TYPE_INVALID;
constexpr StreamMetadata_UIPrimitiveType StreamMetadata::TREETABLE;
constexpr StreamMetadata_UIPrimitiveType StreamMetadata::UIPrimitiveType_MIN;
constexpr StreamMetadata_UIPrimitiveType StreamMetadata::UIPrimitiveType_MAX;
constexpr int StreamMetadata::UIPrimitiveType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMetadata_AnnotationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xviz_2fv2_2fsession_2eproto);
  return file_level_enum_descriptors_xviz_2fv2_2fsession_2eproto[7];
}
bool StreamMetadata_AnnotationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StreamMetadata_AnnotationType StreamMetadata::STREAM_METADATA_ANNOTATION_TYPE_INVALID;
constexpr StreamMetadata_AnnotationType StreamMetadata::VISUAL;
constexpr StreamMetadata_AnnotationType StreamMetadata::AnnotationType_MIN;
constexpr StreamMetadata_AnnotationType StreamMetadata::AnnotationType_MAX;
constexpr int StreamMetadata::AnnotationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMetadata_CoordinateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xviz_2fv2_2fsession_2eproto);
  return file_level_enum_descriptors_xviz_2fv2_2fsession_2eproto[8];
}
bool StreamMetadata_CoordinateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StreamMetadata_CoordinateType StreamMetadata::STREAM_METADATA_COORDINATE_TYPE_INVALID;
constexpr StreamMetadata_CoordinateType StreamMetadata::GEOGRAPHIC;
constexpr StreamMetadata_CoordinateType StreamMetadata::IDENTITY;
constexpr StreamMetadata_CoordinateType StreamMetadata::DYNAMIC;
constexpr StreamMetadata_CoordinateType StreamMetadata::VEHICLE_RELATIVE;
constexpr StreamMetadata_CoordinateType StreamMetadata::CoordinateType_MIN;
constexpr StreamMetadata_CoordinateType StreamMetadata::CoordinateType_MAX;
constexpr int StreamMetadata::CoordinateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xviz_2fv2_2fsession_2eproto);
  return file_level_enum_descriptors_xviz_2fv2_2fsession_2eproto[9];
}
bool SessionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Start::InitAsDefaultInstance() {
}
class Start::_Internal {
 public:
};

Start::Start()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.v2.Start)
}
Start::Start(const Start& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  profile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_profile().empty()) {
    profile_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profile_);
  }
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log().empty()) {
    log_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  ::memcpy(&session_type_, &from.session_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_format_) -
    reinterpret_cast<char*>(&session_type_)) + sizeof(message_format_));
  // @@protoc_insertion_point(copy_constructor:xviz.v2.Start)
}

void Start::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Start_xviz_2fv2_2fsession_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_format_) -
      reinterpret_cast<char*>(&session_type_)) + sizeof(message_format_));
}

Start::~Start() {
  // @@protoc_insertion_point(destructor:xviz.v2.Start)
  SharedDtor();
}

void Start::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Start::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Start& Start::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Start_xviz_2fv2_2fsession_2eproto.base);
  return *internal_default_instance();
}


void Start::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.v2.Start)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profile_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_format_) -
      reinterpret_cast<char*>(&session_type_)) + sizeof(message_format_));
  _internal_metadata_.Clear();
}

const char* Start::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.Start.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string profile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_profile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.Start.profile"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xviz.v2.SessionType session_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::xviz::v2::SessionType>(val));
        } else goto handle_unusual;
        continue;
      // .xviz.v2.Start.MessageFormat message_format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_message_format(static_cast<::xviz::v2::Start_MessageFormat>(val));
        } else goto handle_unusual;
        continue;
      // string log = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.Start.log"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Start::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.v2.Start)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.Start.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string profile = 2;
  if (this->profile().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profile().data(), static_cast<int>(this->_internal_profile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.Start.profile");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_profile(), target);
  }

  // .xviz.v2.SessionType session_type = 3;
  if (this->session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_session_type(), target);
  }

  // .xviz.v2.Start.MessageFormat message_format = 4;
  if (this->message_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_message_format(), target);
  }

  // string log = 5;
  if (this->log().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log().data(), static_cast<int>(this->_internal_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.Start.log");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_log(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.v2.Start)
  return target;
}

size_t Start::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.v2.Start)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string profile = 2;
  if (this->profile().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profile());
  }

  // string log = 5;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  // .xviz.v2.SessionType session_type = 3;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // .xviz.v2.Start.MessageFormat message_format = 4;
  if (this->message_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_message_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Start::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.v2.Start)
  GOOGLE_DCHECK_NE(&from, this);
  const Start* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Start>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.v2.Start)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.v2.Start)
    MergeFrom(*source);
  }
}

void Start::MergeFrom(const Start& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.v2.Start)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.profile().size() > 0) {

    profile_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profile_);
  }
  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from.message_format() != 0) {
    _internal_set_message_format(from._internal_message_format());
  }
}

void Start::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.v2.Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Start::CopyFrom(const Start& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.v2.Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Start::IsInitialized() const {
  return true;
}

void Start::InternalSwap(Start* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  profile_.Swap(&other->profile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  log_.Swap(&other->log_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_type_, other->session_type_);
  swap(message_format_, other->message_format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Start::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransformLog::InitAsDefaultInstance() {
}
class TransformLog::_Internal {
 public:
};

TransformLog::TransformLog()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.v2.TransformLog)
}
TransformLog::TransformLog(const TransformLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      desired_streams_(from.desired_streams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_timestamp_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
  // @@protoc_insertion_point(copy_constructor:xviz.v2.TransformLog)
}

void TransformLog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransformLog_xviz_2fv2_2fsession_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_timestamp_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
}

TransformLog::~TransformLog() {
  // @@protoc_insertion_point(destructor:xviz.v2.TransformLog)
  SharedDtor();
}

void TransformLog::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransformLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformLog& TransformLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransformLog_xviz_2fv2_2fsession_2eproto.base);
  return *internal_default_instance();
}


void TransformLog::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.v2.TransformLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  desired_streams_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_timestamp_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
  _internal_metadata_.Clear();
}

const char* TransformLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.TransformLog.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double start_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double end_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string desired_streams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_desired_streams();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.TransformLog.desired_streams"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransformLog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.v2.TransformLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.TransformLog.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // double start_timestamp = 2;
  if (!(this->start_timestamp() <= 0 && this->start_timestamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_timestamp(), target);
  }

  // double end_timestamp = 3;
  if (!(this->end_timestamp() <= 0 && this->end_timestamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_end_timestamp(), target);
  }

  // repeated string desired_streams = 4;
  for (int i = 0, n = this->_internal_desired_streams_size(); i < n; i++) {
    const auto& s = this->_internal_desired_streams(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.TransformLog.desired_streams");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.v2.TransformLog)
  return target;
}

size_t TransformLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.v2.TransformLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string desired_streams = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(desired_streams_.size());
  for (int i = 0, n = desired_streams_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      desired_streams_.Get(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // double start_timestamp = 2;
  if (!(this->start_timestamp() <= 0 && this->start_timestamp() >= 0)) {
    total_size += 1 + 8;
  }

  // double end_timestamp = 3;
  if (!(this->end_timestamp() <= 0 && this->end_timestamp() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.v2.TransformLog)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransformLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.v2.TransformLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.v2.TransformLog)
    MergeFrom(*source);
  }
}

void TransformLog::MergeFrom(const TransformLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.v2.TransformLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  desired_streams_.MergeFrom(from.desired_streams_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (!(from.start_timestamp() <= 0 && from.start_timestamp() >= 0)) {
    _internal_set_start_timestamp(from._internal_start_timestamp());
  }
  if (!(from.end_timestamp() <= 0 && from.end_timestamp() >= 0)) {
    _internal_set_end_timestamp(from._internal_end_timestamp());
  }
}

void TransformLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.v2.TransformLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformLog::CopyFrom(const TransformLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.v2.TransformLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformLog::IsInitialized() const {
  return true;
}

void TransformLog::InternalSwap(TransformLog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  desired_streams_.InternalSwap(&other->desired_streams_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_timestamp_, other->start_timestamp_);
  swap(end_timestamp_, other->end_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformLog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateUpdate::InitAsDefaultInstance() {
}
class StateUpdate::_Internal {
 public:
};

void StateUpdate::clear_updates() {
  updates_.Clear();
}
StateUpdate::StateUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.v2.StateUpdate)
}
StateUpdate::StateUpdate(const StateUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_type_ = from.update_type_;
  // @@protoc_insertion_point(copy_constructor:xviz.v2.StateUpdate)
}

void StateUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateUpdate_xviz_2fv2_2fsession_2eproto.base);
  update_type_ = 0;
}

StateUpdate::~StateUpdate() {
  // @@protoc_insertion_point(destructor:xviz.v2.StateUpdate)
  SharedDtor();
}

void StateUpdate::SharedDtor() {
}

void StateUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateUpdate& StateUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateUpdate_xviz_2fv2_2fsession_2eproto.base);
  return *internal_default_instance();
}


void StateUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.v2.StateUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  update_type_ = 0;
  _internal_metadata_.Clear();
}

const char* StateUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .xviz.v2.StateUpdate.UpdateType update_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_update_type(static_cast<::xviz::v2::StateUpdate_UpdateType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .xviz.v2.StreamSet updates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.v2.StateUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz.v2.StateUpdate.UpdateType update_type = 1;
  if (this->update_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_update_type(), target);
  }

  // repeated .xviz.v2.StreamSet updates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.v2.StateUpdate)
  return target;
}

size_t StateUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.v2.StateUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xviz.v2.StreamSet updates = 2;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xviz.v2.StateUpdate.UpdateType update_type = 1;
  if (this->update_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_update_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.v2.StateUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const StateUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.v2.StateUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.v2.StateUpdate)
    MergeFrom(*source);
  }
}

void StateUpdate::MergeFrom(const StateUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.v2.StateUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
  if (from.update_type() != 0) {
    _internal_set_update_type(from._internal_update_type());
  }
}

void StateUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.v2.StateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateUpdate::CopyFrom(const StateUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.v2.StateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateUpdate::IsInitialized() const {
  return true;
}

void StateUpdate::InternalSwap(StateUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  updates_.InternalSwap(&other->updates_);
  swap(update_type_, other->update_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransformLogDone::InitAsDefaultInstance() {
}
class TransformLogDone::_Internal {
 public:
};

TransformLogDone::TransformLogDone()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.v2.TransformLogDone)
}
TransformLogDone::TransformLogDone(const TransformLogDone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:xviz.v2.TransformLogDone)
}

void TransformLogDone::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransformLogDone_xviz_2fv2_2fsession_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransformLogDone::~TransformLogDone() {
  // @@protoc_insertion_point(destructor:xviz.v2.TransformLogDone)
  SharedDtor();
}

void TransformLogDone::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransformLogDone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformLogDone& TransformLogDone::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransformLogDone_xviz_2fv2_2fsession_2eproto.base);
  return *internal_default_instance();
}


void TransformLogDone::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.v2.TransformLogDone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TransformLogDone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.TransformLogDone.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransformLogDone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.v2.TransformLogDone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.TransformLogDone.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.v2.TransformLogDone)
  return target;
}

size_t TransformLogDone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.v2.TransformLogDone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformLogDone::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.v2.TransformLogDone)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformLogDone* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransformLogDone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.v2.TransformLogDone)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.v2.TransformLogDone)
    MergeFrom(*source);
  }
}

void TransformLogDone::MergeFrom(const TransformLogDone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.v2.TransformLogDone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void TransformLogDone::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.v2.TransformLogDone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformLogDone::CopyFrom(const TransformLogDone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.v2.TransformLogDone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformLogDone::IsInitialized() const {
  return true;
}

void TransformLogDone::InternalSwap(TransformLogDone* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformLogDone::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransformPointInTime::InitAsDefaultInstance() {
}
class TransformPointInTime::_Internal {
 public:
};

TransformPointInTime::TransformPointInTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.v2.TransformPointInTime)
}
TransformPointInTime::TransformPointInTime(const TransformPointInTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      desired_streams_(from.desired_streams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  query_timestamp_ = from.query_timestamp_;
  // @@protoc_insertion_point(copy_constructor:xviz.v2.TransformPointInTime)
}

void TransformPointInTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransformPointInTime_xviz_2fv2_2fsession_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_timestamp_ = 0;
}

TransformPointInTime::~TransformPointInTime() {
  // @@protoc_insertion_point(destructor:xviz.v2.TransformPointInTime)
  SharedDtor();
}

void TransformPointInTime::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransformPointInTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformPointInTime& TransformPointInTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransformPointInTime_xviz_2fv2_2fsession_2eproto.base);
  return *internal_default_instance();
}


void TransformPointInTime::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.v2.TransformPointInTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  desired_streams_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_timestamp_ = 0;
  _internal_metadata_.Clear();
}

const char* TransformPointInTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.TransformPointInTime.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double query_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          query_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string desired_streams = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_desired_streams();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.TransformPointInTime.desired_streams"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransformPointInTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.v2.TransformPointInTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.TransformPointInTime.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // double query_timestamp = 2;
  if (!(this->query_timestamp() <= 0 && this->query_timestamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_query_timestamp(), target);
  }

  // repeated string desired_streams = 3;
  for (int i = 0, n = this->_internal_desired_streams_size(); i < n; i++) {
    const auto& s = this->_internal_desired_streams(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.TransformPointInTime.desired_streams");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.v2.TransformPointInTime)
  return target;
}

size_t TransformPointInTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.v2.TransformPointInTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string desired_streams = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(desired_streams_.size());
  for (int i = 0, n = desired_streams_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      desired_streams_.Get(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // double query_timestamp = 2;
  if (!(this->query_timestamp() <= 0 && this->query_timestamp() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformPointInTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.v2.TransformPointInTime)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformPointInTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransformPointInTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.v2.TransformPointInTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.v2.TransformPointInTime)
    MergeFrom(*source);
  }
}

void TransformPointInTime::MergeFrom(const TransformPointInTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.v2.TransformPointInTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  desired_streams_.MergeFrom(from.desired_streams_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (!(from.query_timestamp() <= 0 && from.query_timestamp() >= 0)) {
    _internal_set_query_timestamp(from._internal_query_timestamp());
  }
}

void TransformPointInTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.v2.TransformPointInTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformPointInTime::CopyFrom(const TransformPointInTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.v2.TransformPointInTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformPointInTime::IsInitialized() const {
  return true;
}

void TransformPointInTime::InternalSwap(TransformPointInTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  desired_streams_.InternalSwap(&other->desired_streams_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(query_timestamp_, other->query_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformPointInTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Reconfigure::InitAsDefaultInstance() {
  ::xviz::v2::_Reconfigure_default_instance_._instance.get_mutable()->config_update_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class Reconfigure::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& config_update(const Reconfigure* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
Reconfigure::_Internal::config_update(const Reconfigure* msg) {
  return *msg->config_update_;
}
void Reconfigure::clear_config_update() {
  if (GetArenaNoVirtual() == nullptr && config_update_ != nullptr) {
    delete config_update_;
  }
  config_update_ = nullptr;
}
Reconfigure::Reconfigure()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.v2.Reconfigure)
}
Reconfigure::Reconfigure(const Reconfigure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_config_update()) {
    config_update_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.config_update_);
  } else {
    config_update_ = nullptr;
  }
  update_type_ = from.update_type_;
  // @@protoc_insertion_point(copy_constructor:xviz.v2.Reconfigure)
}

void Reconfigure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Reconfigure_xviz_2fv2_2fsession_2eproto.base);
  ::memset(&config_update_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_type_) -
      reinterpret_cast<char*>(&config_update_)) + sizeof(update_type_));
}

Reconfigure::~Reconfigure() {
  // @@protoc_insertion_point(destructor:xviz.v2.Reconfigure)
  SharedDtor();
}

void Reconfigure::SharedDtor() {
  if (this != internal_default_instance()) delete config_update_;
}

void Reconfigure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reconfigure& Reconfigure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Reconfigure_xviz_2fv2_2fsession_2eproto.base);
  return *internal_default_instance();
}


void Reconfigure::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.v2.Reconfigure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && config_update_ != nullptr) {
    delete config_update_;
  }
  config_update_ = nullptr;
  update_type_ = 0;
  _internal_metadata_.Clear();
}

const char* Reconfigure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .xviz.v2.Reconfigure.UpdateType update_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_update_type(static_cast<::xviz::v2::Reconfigure_UpdateType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct config_update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reconfigure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.v2.Reconfigure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xviz.v2.Reconfigure.UpdateType update_type = 1;
  if (this->update_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_update_type(), target);
  }

  // .google.protobuf.Struct config_update = 2;
  if (this->has_config_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config_update(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.v2.Reconfigure)
  return target;
}

size_t Reconfigure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.v2.Reconfigure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct config_update = 2;
  if (this->has_config_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_update_);
  }

  // .xviz.v2.Reconfigure.UpdateType update_type = 1;
  if (this->update_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_update_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reconfigure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.v2.Reconfigure)
  GOOGLE_DCHECK_NE(&from, this);
  const Reconfigure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reconfigure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.v2.Reconfigure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.v2.Reconfigure)
    MergeFrom(*source);
  }
}

void Reconfigure::MergeFrom(const Reconfigure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.v2.Reconfigure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config_update()) {
    _internal_mutable_config_update()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_config_update());
  }
  if (from.update_type() != 0) {
    _internal_set_update_type(from._internal_update_type());
  }
}

void Reconfigure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.v2.Reconfigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reconfigure::CopyFrom(const Reconfigure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.v2.Reconfigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reconfigure::IsInitialized() const {
  return true;
}

void Reconfigure::InternalSwap(Reconfigure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(config_update_, other->config_update_);
  swap(update_type_, other->update_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Reconfigure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Metadata_StreamsEntry_DoNotUse::Metadata_StreamsEntry_DoNotUse() {}
Metadata_StreamsEntry_DoNotUse::Metadata_StreamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Metadata_StreamsEntry_DoNotUse::MergeFrom(const Metadata_StreamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Metadata_StreamsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Metadata_StreamsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Metadata_CamerasEntry_DoNotUse::Metadata_CamerasEntry_DoNotUse() {}
Metadata_CamerasEntry_DoNotUse::Metadata_CamerasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Metadata_CamerasEntry_DoNotUse::MergeFrom(const Metadata_CamerasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Metadata_CamerasEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Metadata_CamerasEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Metadata_StreamAliasesEntry_DoNotUse::Metadata_StreamAliasesEntry_DoNotUse() {}
Metadata_StreamAliasesEntry_DoNotUse::Metadata_StreamAliasesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Metadata_StreamAliasesEntry_DoNotUse::MergeFrom(const Metadata_StreamAliasesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Metadata_StreamAliasesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Metadata_StreamAliasesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Metadata_UiConfigEntry_DoNotUse::Metadata_UiConfigEntry_DoNotUse() {}
Metadata_UiConfigEntry_DoNotUse::Metadata_UiConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Metadata_UiConfigEntry_DoNotUse::MergeFrom(const Metadata_UiConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Metadata_UiConfigEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Metadata_UiConfigEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Metadata::InitAsDefaultInstance() {
  ::xviz::v2::_Metadata_default_instance_._instance.get_mutable()->log_info_ = const_cast< ::xviz::v2::LogInfo*>(
      ::xviz::v2::LogInfo::internal_default_instance());
}
class Metadata::_Internal {
 public:
  static const ::xviz::v2::LogInfo& log_info(const Metadata* msg);
};

const ::xviz::v2::LogInfo&
Metadata::_Internal::log_info(const Metadata* msg) {
  return *msg->log_info_;
}
Metadata::Metadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.v2.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  streams_.MergeFrom(from.streams_);
  cameras_.MergeFrom(from.cameras_);
  stream_aliases_.MergeFrom(from.stream_aliases_);
  ui_config_.MergeFrom(from.ui_config_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from._internal_has_log_info()) {
    log_info_ = new ::xviz::v2::LogInfo(*from.log_info_);
  } else {
    log_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:xviz.v2.Metadata)
}

void Metadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Metadata_xviz_2fv2_2fsession_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_info_ = nullptr;
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:xviz.v2.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete log_info_;
}

void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Metadata& Metadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Metadata_xviz_2fv2_2fsession_2eproto.base);
  return *internal_default_instance();
}


void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.v2.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  streams_.Clear();
  cameras_.Clear();
  stream_aliases_.Clear();
  ui_config_.Clear();
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && log_info_ != nullptr) {
    delete log_info_;
  }
  log_info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.Metadata.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .xviz.v2.StreamMetadata> streams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&streams_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .xviz.v2.CameraInfo> cameras = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&cameras_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> stream_aliases = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&stream_aliases_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .xviz.v2.UIPanelInfo> ui_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&ui_config_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .xviz.v2.LogInfo log_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.v2.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.Metadata.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // map<string, .xviz.v2.StreamMetadata> streams = 2;
  if (!this->_internal_streams().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::StreamMetadata >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.v2.Metadata.StreamsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_streams().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_streams().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::StreamMetadata >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::StreamMetadata >::const_iterator
          it = this->_internal_streams().begin();
          it != this->_internal_streams().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Metadata_StreamsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::StreamMetadata >::const_iterator
          it = this->_internal_streams().begin();
          it != this->_internal_streams().end(); ++it) {
        target = Metadata_StreamsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .xviz.v2.CameraInfo> cameras = 3;
  if (!this->_internal_cameras().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::CameraInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.v2.Metadata.CamerasEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_cameras().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_cameras().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::CameraInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::CameraInfo >::const_iterator
          it = this->_internal_cameras().begin();
          it != this->_internal_cameras().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Metadata_CamerasEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::CameraInfo >::const_iterator
          it = this->_internal_cameras().begin();
          it != this->_internal_cameras().end(); ++it) {
        target = Metadata_CamerasEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> stream_aliases = 4;
  if (!this->_internal_stream_aliases().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.v2.Metadata.StreamAliasesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.v2.Metadata.StreamAliasesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_stream_aliases().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_stream_aliases().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_stream_aliases().begin();
          it != this->_internal_stream_aliases().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Metadata_StreamAliasesEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_stream_aliases().begin();
          it != this->_internal_stream_aliases().end(); ++it) {
        target = Metadata_StreamAliasesEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .xviz.v2.UIPanelInfo> ui_config = 5;
  if (!this->_internal_ui_config().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::UIPanelInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xviz.v2.Metadata.UiConfigEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_ui_config().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_ui_config().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::UIPanelInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::UIPanelInfo >::const_iterator
          it = this->_internal_ui_config().begin();
          it != this->_internal_ui_config().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Metadata_UiConfigEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::UIPanelInfo >::const_iterator
          it = this->_internal_ui_config().begin();
          it != this->_internal_ui_config().end(); ++it) {
        target = Metadata_UiConfigEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .xviz.v2.LogInfo log_info = 6;
  if (this->has_log_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::log_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.v2.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.v2.Metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .xviz.v2.StreamMetadata> streams = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_streams_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::StreamMetadata >::const_iterator
      it = this->_internal_streams().begin();
      it != this->_internal_streams().end(); ++it) {
    total_size += Metadata_StreamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .xviz.v2.CameraInfo> cameras = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cameras_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::CameraInfo >::const_iterator
      it = this->_internal_cameras().begin();
      it != this->_internal_cameras().end(); ++it) {
    total_size += Metadata_CamerasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> stream_aliases = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stream_aliases_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_stream_aliases().begin();
      it != this->_internal_stream_aliases().end(); ++it) {
    total_size += Metadata_StreamAliasesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .xviz.v2.UIPanelInfo> ui_config = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ui_config_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::UIPanelInfo >::const_iterator
      it = this->_internal_ui_config().begin();
      it != this->_internal_ui_config().end(); ++it) {
    total_size += Metadata_UiConfigEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .xviz.v2.LogInfo log_info = 6;
  if (this->has_log_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.v2.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  const Metadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Metadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.v2.Metadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.v2.Metadata)
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.v2.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  streams_.MergeFrom(from.streams_);
  cameras_.MergeFrom(from.cameras_);
  stream_aliases_.MergeFrom(from.stream_aliases_);
  ui_config_.MergeFrom(from.ui_config_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_log_info()) {
    _internal_mutable_log_info()->::xviz::v2::LogInfo::MergeFrom(from._internal_log_info());
  }
}

void Metadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.v2.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.v2.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  streams_.Swap(&other->streams_);
  cameras_.Swap(&other->cameras_);
  stream_aliases_.Swap(&other->stream_aliases_);
  ui_config_.Swap(&other->ui_config_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(log_info_, other->log_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Error::InitAsDefaultInstance() {
}
class Error::_Internal {
 public:
};

Error::Error()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.v2.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:xviz.v2.Error)
}

void Error::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Error_xviz_2fv2_2fsession_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:xviz.v2.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Error& Error::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Error_xviz_2fv2_2fsession_2eproto.base);
  return *internal_default_instance();
}


void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.v2.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.Error.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Error::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.v2.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.Error.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.v2.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.v2.Error)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.v2.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Error>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.v2.Error)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.v2.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.v2.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Error::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.v2.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.v2.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamMetadata::InitAsDefaultInstance() {
  ::xviz::v2::_StreamMetadata_default_instance_._instance.get_mutable()->stream_style_ = const_cast< ::xviz::v2::StyleStreamValue*>(
      ::xviz::v2::StyleStreamValue::internal_default_instance());
}
class StreamMetadata::_Internal {
 public:
  static const ::xviz::v2::StyleStreamValue& stream_style(const StreamMetadata* msg);
};

const ::xviz::v2::StyleStreamValue&
StreamMetadata::_Internal::stream_style(const StreamMetadata* msg) {
  return *msg->stream_style_;
}
void StreamMetadata::clear_stream_style() {
  if (GetArenaNoVirtual() == nullptr && stream_style_ != nullptr) {
    delete stream_style_;
  }
  stream_style_ = nullptr;
}
void StreamMetadata::clear_style_classes() {
  style_classes_.Clear();
}
StreamMetadata::StreamMetadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.v2.StreamMetadata)
}
StreamMetadata::StreamMetadata(const StreamMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      style_classes_(from.style_classes_),
      transform_(from.transform_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_units().empty()) {
    units_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.units_);
  }
  transform_callback_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transform_callback().empty()) {
    transform_callback_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transform_callback_);
  }
  if (from._internal_has_stream_style()) {
    stream_style_ = new ::xviz::v2::StyleStreamValue(*from.stream_style_);
  } else {
    stream_style_ = nullptr;
  }
  ::memcpy(&category_, &from.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&coordinate_) -
    reinterpret_cast<char*>(&category_)) + sizeof(coordinate_));
  // @@protoc_insertion_point(copy_constructor:xviz.v2.StreamMetadata)
}

void StreamMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamMetadata_xviz_2fv2_2fsession_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transform_callback_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stream_style_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coordinate_) -
      reinterpret_cast<char*>(&stream_style_)) + sizeof(coordinate_));
}

StreamMetadata::~StreamMetadata() {
  // @@protoc_insertion_point(destructor:xviz.v2.StreamMetadata)
  SharedDtor();
}

void StreamMetadata::SharedDtor() {
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  units_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transform_callback_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stream_style_;
}

void StreamMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamMetadata& StreamMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamMetadata_xviz_2fv2_2fsession_2eproto.base);
  return *internal_default_instance();
}


void StreamMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.v2.StreamMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  style_classes_.Clear();
  transform_.Clear();
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  units_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transform_callback_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && stream_style_ != nullptr) {
    delete stream_style_;
  }
  stream_style_ = nullptr;
  ::memset(&category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coordinate_) -
      reinterpret_cast<char*>(&category_)) + sizeof(coordinate_));
  _internal_metadata_.Clear();
}

const char* StreamMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.StreamMetadata.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_units();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.StreamMetadata.units"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xviz.v2.StreamMetadata.Category category = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_category(static_cast<::xviz::v2::StreamMetadata_Category>(val));
        } else goto handle_unusual;
        continue;
      // .xviz.v2.StreamMetadata.ScalarType scalar_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_scalar_type(static_cast<::xviz::v2::StreamMetadata_ScalarType>(val));
        } else goto handle_unusual;
        continue;
      // .xviz.v2.StreamMetadata.PrimitiveType primitive_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_primitive_type(static_cast<::xviz::v2::StreamMetadata_PrimitiveType>(val));
        } else goto handle_unusual;
        continue;
      // .xviz.v2.StreamMetadata.UIPrimitiveType ui_primitive_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_ui_primitive_type(static_cast<::xviz::v2::StreamMetadata_UIPrimitiveType>(val));
        } else goto handle_unusual;
        continue;
      // .xviz.v2.StreamMetadata.AnnotationType annotation_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_annotation_type(static_cast<::xviz::v2::StreamMetadata_AnnotationType>(val));
        } else goto handle_unusual;
        continue;
      // .xviz.v2.StyleStreamValue stream_style = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .xviz.v2.StyleClass style_classes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_classes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .xviz.v2.StreamMetadata.CoordinateType coordinate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_coordinate(static_cast<::xviz::v2::StreamMetadata_CoordinateType>(val));
        } else goto handle_unusual;
        continue;
      // repeated double transform = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_transform(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89) {
          _internal_add_transform(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string transform_callback = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_transform_callback();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.StreamMetadata.transform_callback"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.v2.StreamMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source = 1;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.StreamMetadata.source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // string units = 2;
  if (this->units().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_units().data(), static_cast<int>(this->_internal_units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.StreamMetadata.units");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_units(), target);
  }

  // .xviz.v2.StreamMetadata.Category category = 3;
  if (this->category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_category(), target);
  }

  // .xviz.v2.StreamMetadata.ScalarType scalar_type = 4;
  if (this->scalar_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_scalar_type(), target);
  }

  // .xviz.v2.StreamMetadata.PrimitiveType primitive_type = 5;
  if (this->primitive_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_primitive_type(), target);
  }

  // .xviz.v2.StreamMetadata.UIPrimitiveType ui_primitive_type = 6;
  if (this->ui_primitive_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_ui_primitive_type(), target);
  }

  // .xviz.v2.StreamMetadata.AnnotationType annotation_type = 7;
  if (this->annotation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_annotation_type(), target);
  }

  // .xviz.v2.StyleStreamValue stream_style = 8;
  if (this->has_stream_style()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::stream_style(this), target, stream);
  }

  // repeated .xviz.v2.StyleClass style_classes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_style_classes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_style_classes(i), target, stream);
  }

  // .xviz.v2.StreamMetadata.CoordinateType coordinate = 10;
  if (this->coordinate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_coordinate(), target);
  }

  // repeated double transform = 11;
  if (this->_internal_transform_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_transform(), target);
  }

  // string transform_callback = 12;
  if (this->transform_callback().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transform_callback().data(), static_cast<int>(this->_internal_transform_callback().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.StreamMetadata.transform_callback");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_transform_callback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.v2.StreamMetadata)
  return target;
}

size_t StreamMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.v2.StreamMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xviz.v2.StyleClass style_classes = 9;
  total_size += 1UL * this->_internal_style_classes_size();
  for (const auto& msg : this->style_classes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double transform = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_transform_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _transform_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string source = 1;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string units = 2;
  if (this->units().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_units());
  }

  // string transform_callback = 12;
  if (this->transform_callback().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transform_callback());
  }

  // .xviz.v2.StyleStreamValue stream_style = 8;
  if (this->has_stream_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_style_);
  }

  // .xviz.v2.StreamMetadata.Category category = 3;
  if (this->category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_category());
  }

  // .xviz.v2.StreamMetadata.ScalarType scalar_type = 4;
  if (this->scalar_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scalar_type());
  }

  // .xviz.v2.StreamMetadata.PrimitiveType primitive_type = 5;
  if (this->primitive_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_primitive_type());
  }

  // .xviz.v2.StreamMetadata.UIPrimitiveType ui_primitive_type = 6;
  if (this->ui_primitive_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ui_primitive_type());
  }

  // .xviz.v2.StreamMetadata.AnnotationType annotation_type = 7;
  if (this->annotation_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_annotation_type());
  }

  // .xviz.v2.StreamMetadata.CoordinateType coordinate = 10;
  if (this->coordinate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_coordinate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.v2.StreamMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.v2.StreamMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.v2.StreamMetadata)
    MergeFrom(*source);
  }
}

void StreamMetadata::MergeFrom(const StreamMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.v2.StreamMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  style_classes_.MergeFrom(from.style_classes_);
  transform_.MergeFrom(from.transform_);
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.units().size() > 0) {

    units_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.units_);
  }
  if (from.transform_callback().size() > 0) {

    transform_callback_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transform_callback_);
  }
  if (from.has_stream_style()) {
    _internal_mutable_stream_style()->::xviz::v2::StyleStreamValue::MergeFrom(from._internal_stream_style());
  }
  if (from.category() != 0) {
    _internal_set_category(from._internal_category());
  }
  if (from.scalar_type() != 0) {
    _internal_set_scalar_type(from._internal_scalar_type());
  }
  if (from.primitive_type() != 0) {
    _internal_set_primitive_type(from._internal_primitive_type());
  }
  if (from.ui_primitive_type() != 0) {
    _internal_set_ui_primitive_type(from._internal_ui_primitive_type());
  }
  if (from.annotation_type() != 0) {
    _internal_set_annotation_type(from._internal_annotation_type());
  }
  if (from.coordinate() != 0) {
    _internal_set_coordinate(from._internal_coordinate());
  }
}

void StreamMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.v2.StreamMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMetadata::CopyFrom(const StreamMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.v2.StreamMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMetadata::IsInitialized() const {
  return true;
}

void StreamMetadata::InternalSwap(StreamMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  style_classes_.InternalSwap(&other->style_classes_);
  transform_.InternalSwap(&other->transform_);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  units_.Swap(&other->units_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transform_callback_.Swap(&other->transform_callback_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stream_style_, other->stream_style_);
  swap(category_, other->category_);
  swap(scalar_type_, other->scalar_type_);
  swap(primitive_type_, other->primitive_type_);
  swap(ui_primitive_type_, other->ui_primitive_type_);
  swap(annotation_type_, other->annotation_type_);
  swap(coordinate_, other->coordinate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraInfo::InitAsDefaultInstance() {
}
class CameraInfo::_Internal {
 public:
};

CameraInfo::CameraInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.v2.CameraInfo)
}
CameraInfo::CameraInfo(const CameraInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vehicle_position_(from.vehicle_position_),
      vehicle_orientation_(from.vehicle_orientation_),
      rectification_projection_(from.rectification_projection_),
      gl_projection_(from.gl_projection_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  human_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_human_name().empty()) {
    human_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.human_name_);
  }
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  ::memcpy(&pixel_width_, &from.pixel_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&pixel_height_) -
    reinterpret_cast<char*>(&pixel_width_)) + sizeof(pixel_height_));
  // @@protoc_insertion_point(copy_constructor:xviz.v2.CameraInfo)
}

void CameraInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraInfo_xviz_2fv2_2fsession_2eproto.base);
  human_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pixel_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_height_) -
      reinterpret_cast<char*>(&pixel_width_)) + sizeof(pixel_height_));
}

CameraInfo::~CameraInfo() {
  // @@protoc_insertion_point(destructor:xviz.v2.CameraInfo)
  SharedDtor();
}

void CameraInfo::SharedDtor() {
  human_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CameraInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraInfo& CameraInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraInfo_xviz_2fv2_2fsession_2eproto.base);
  return *internal_default_instance();
}


void CameraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.v2.CameraInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehicle_position_.Clear();
  vehicle_orientation_.Clear();
  rectification_projection_.Clear();
  gl_projection_.Clear();
  human_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pixel_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_height_) -
      reinterpret_cast<char*>(&pixel_width_)) + sizeof(pixel_height_));
  _internal_metadata_.Clear();
}

const char* CameraInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string human_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_human_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.CameraInfo.human_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.CameraInfo.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double vehicle_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_vehicle_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_vehicle_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double vehicle_orientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_vehicle_orientation(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_vehicle_orientation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pixel_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          pixel_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pixel_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          pixel_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double rectification_projection = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_rectification_projection(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          _internal_add_rectification_projection(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double gl_projection = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_gl_projection(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65) {
          _internal_add_gl_projection(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.v2.CameraInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string human_name = 1;
  if (this->human_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_human_name().data(), static_cast<int>(this->_internal_human_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.CameraInfo.human_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_human_name(), target);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.CameraInfo.source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source(), target);
  }

  // repeated double vehicle_position = 3;
  if (this->_internal_vehicle_position_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_vehicle_position(), target);
  }

  // repeated double vehicle_orientation = 4;
  if (this->_internal_vehicle_orientation_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_vehicle_orientation(), target);
  }

  // double pixel_width = 5;
  if (!(this->pixel_width() <= 0 && this->pixel_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_pixel_width(), target);
  }

  // double pixel_height = 6;
  if (!(this->pixel_height() <= 0 && this->pixel_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_pixel_height(), target);
  }

  // repeated double rectification_projection = 7;
  if (this->_internal_rectification_projection_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_rectification_projection(), target);
  }

  // repeated double gl_projection = 8;
  if (this->_internal_gl_projection_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_gl_projection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.v2.CameraInfo)
  return target;
}

size_t CameraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.v2.CameraInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double vehicle_position = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vehicle_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vehicle_position_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double vehicle_orientation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vehicle_orientation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vehicle_orientation_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double rectification_projection = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rectification_projection_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rectification_projection_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double gl_projection = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_gl_projection_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gl_projection_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string human_name = 1;
  if (this->human_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_human_name());
  }

  // string source = 2;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // double pixel_width = 5;
  if (!(this->pixel_width() <= 0 && this->pixel_width() >= 0)) {
    total_size += 1 + 8;
  }

  // double pixel_height = 6;
  if (!(this->pixel_height() <= 0 && this->pixel_height() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.v2.CameraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.v2.CameraInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.v2.CameraInfo)
    MergeFrom(*source);
  }
}

void CameraInfo::MergeFrom(const CameraInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.v2.CameraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vehicle_position_.MergeFrom(from.vehicle_position_);
  vehicle_orientation_.MergeFrom(from.vehicle_orientation_);
  rectification_projection_.MergeFrom(from.rectification_projection_);
  gl_projection_.MergeFrom(from.gl_projection_);
  if (from.human_name().size() > 0) {

    human_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.human_name_);
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (!(from.pixel_width() <= 0 && from.pixel_width() >= 0)) {
    _internal_set_pixel_width(from._internal_pixel_width());
  }
  if (!(from.pixel_height() <= 0 && from.pixel_height() >= 0)) {
    _internal_set_pixel_height(from._internal_pixel_height());
  }
}

void CameraInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.v2.CameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraInfo::CopyFrom(const CameraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.v2.CameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraInfo::IsInitialized() const {
  return true;
}

void CameraInfo::InternalSwap(CameraInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vehicle_position_.InternalSwap(&other->vehicle_position_);
  vehicle_orientation_.InternalSwap(&other->vehicle_orientation_);
  rectification_projection_.InternalSwap(&other->rectification_projection_);
  gl_projection_.InternalSwap(&other->gl_projection_);
  human_name_.Swap(&other->human_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pixel_width_, other->pixel_width_);
  swap(pixel_height_, other->pixel_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UIPanelInfo::InitAsDefaultInstance() {
  ::xviz::v2::_UIPanelInfo_default_instance_._instance.get_mutable()->config_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class UIPanelInfo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& config(const UIPanelInfo* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
UIPanelInfo::_Internal::config(const UIPanelInfo* msg) {
  return *msg->config_;
}
void UIPanelInfo::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
UIPanelInfo::UIPanelInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.v2.UIPanelInfo)
}
UIPanelInfo::UIPanelInfo(const UIPanelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      needed_streams_(from.needed_streams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_config()) {
    config_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:xviz.v2.UIPanelInfo)
}

void UIPanelInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UIPanelInfo_xviz_2fv2_2fsession_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_ = nullptr;
}

UIPanelInfo::~UIPanelInfo() {
  // @@protoc_insertion_point(destructor:xviz.v2.UIPanelInfo)
  SharedDtor();
}

void UIPanelInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
}

void UIPanelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UIPanelInfo& UIPanelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UIPanelInfo_xviz_2fv2_2fsession_2eproto.base);
  return *internal_default_instance();
}


void UIPanelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.v2.UIPanelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  needed_streams_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear();
}

const char* UIPanelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.UIPanelInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string needed_streams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_needed_streams();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.v2.UIPanelInfo.needed_streams"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UIPanelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.v2.UIPanelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.UIPanelInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string needed_streams = 2;
  for (int i = 0, n = this->_internal_needed_streams_size(); i < n; i++) {
    const auto& s = this->_internal_needed_streams(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.v2.UIPanelInfo.needed_streams");
    target = stream->WriteString(2, s, target);
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.v2.UIPanelInfo)
  return target;
}

size_t UIPanelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.v2.UIPanelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string needed_streams = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(needed_streams_.size());
  for (int i = 0, n = needed_streams_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      needed_streams_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UIPanelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.v2.UIPanelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UIPanelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UIPanelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.v2.UIPanelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.v2.UIPanelInfo)
    MergeFrom(*source);
  }
}

void UIPanelInfo::MergeFrom(const UIPanelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.v2.UIPanelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  needed_streams_.MergeFrom(from.needed_streams_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_config()) {
    _internal_mutable_config()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_config());
  }
}

void UIPanelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.v2.UIPanelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIPanelInfo::CopyFrom(const UIPanelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.v2.UIPanelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIPanelInfo::IsInitialized() const {
  return true;
}

void UIPanelInfo::InternalSwap(UIPanelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  needed_streams_.InternalSwap(&other->needed_streams_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_, other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UIPanelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogInfo::InitAsDefaultInstance() {
}
class LogInfo::_Internal {
 public:
};

LogInfo::LogInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.v2.LogInfo)
}
LogInfo::LogInfo(const LogInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:xviz.v2.LogInfo)
}

void LogInfo::SharedCtor() {
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

LogInfo::~LogInfo() {
  // @@protoc_insertion_point(destructor:xviz.v2.LogInfo)
  SharedDtor();
}

void LogInfo::SharedDtor() {
}

void LogInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogInfo& LogInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogInfo_xviz_2fv2_2fsession_2eproto.base);
  return *internal_default_instance();
}


void LogInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.v2.LogInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

const char* LogInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.v2.LogInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start_time = 1;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_time(), target);
  }

  // double end_time = 2;
  if (!(this->end_time() <= 0 && this->end_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.v2.LogInfo)
  return target;
}

size_t LogInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.v2.LogInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double start_time = 1;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double end_time = 2;
  if (!(this->end_time() <= 0 && this->end_time() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.v2.LogInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LogInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.v2.LogInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.v2.LogInfo)
    MergeFrom(*source);
  }
}

void LogInfo::MergeFrom(const LogInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.v2.LogInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.start_time() <= 0 && from.start_time() >= 0)) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (!(from.end_time() <= 0 && from.end_time() >= 0)) {
    _internal_set_end_time(from._internal_end_time());
  }
}

void LogInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.v2.LogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogInfo::CopyFrom(const LogInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.v2.LogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogInfo::IsInitialized() const {
  return true;
}

void LogInfo::InternalSwap(LogInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace xviz
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xviz::v2::Start* Arena::CreateMaybeMessage< ::xviz::v2::Start >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::v2::Start >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::v2::TransformLog* Arena::CreateMaybeMessage< ::xviz::v2::TransformLog >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::v2::TransformLog >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::v2::StateUpdate* Arena::CreateMaybeMessage< ::xviz::v2::StateUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::v2::StateUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::v2::TransformLogDone* Arena::CreateMaybeMessage< ::xviz::v2::TransformLogDone >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::v2::TransformLogDone >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::v2::TransformPointInTime* Arena::CreateMaybeMessage< ::xviz::v2::TransformPointInTime >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::v2::TransformPointInTime >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::v2::Reconfigure* Arena::CreateMaybeMessage< ::xviz::v2::Reconfigure >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::v2::Reconfigure >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::v2::Metadata_StreamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::v2::Metadata_StreamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::v2::Metadata_StreamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::v2::Metadata_CamerasEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::v2::Metadata_CamerasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::v2::Metadata_CamerasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::v2::Metadata_StreamAliasesEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::v2::Metadata_StreamAliasesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::v2::Metadata_StreamAliasesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::v2::Metadata_UiConfigEntry_DoNotUse* Arena::CreateMaybeMessage< ::xviz::v2::Metadata_UiConfigEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::v2::Metadata_UiConfigEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::v2::Metadata* Arena::CreateMaybeMessage< ::xviz::v2::Metadata >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::v2::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::v2::Error* Arena::CreateMaybeMessage< ::xviz::v2::Error >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::v2::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::v2::StreamMetadata* Arena::CreateMaybeMessage< ::xviz::v2::StreamMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::v2::StreamMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::v2::CameraInfo* Arena::CreateMaybeMessage< ::xviz::v2::CameraInfo >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::v2::CameraInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::v2::UIPanelInfo* Arena::CreateMaybeMessage< ::xviz::v2::UIPanelInfo >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::v2::UIPanelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::v2::LogInfo* Arena::CreateMaybeMessage< ::xviz::v2::LogInfo >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::v2::LogInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
