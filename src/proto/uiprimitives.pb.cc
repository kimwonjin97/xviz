// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uiprimitives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/uiprimitives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xviz {

namespace {

const ::google::protobuf::Descriptor* TreeTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreeTableColumn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeTableColumn_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TreeTableColumn_ColumnType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TreeTableNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeTableNode_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_uiprimitives_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_uiprimitives_2eproto() {
  protobuf_AddDesc_uiprimitives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "uiprimitives.proto");
  GOOGLE_CHECK(file != NULL);
  TreeTable_descriptor_ = file->message_type(0);
  static const int TreeTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeTable, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeTable, nodes_),
  };
  TreeTable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TreeTable_descriptor_,
      TreeTable::default_instance_,
      TreeTable_offsets_,
      -1,
      -1,
      -1,
      sizeof(TreeTable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeTable, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeTable, _is_default_instance_));
  TreeTableColumn_descriptor_ = file->message_type(1);
  static const int TreeTableColumn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeTableColumn, display_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeTableColumn, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeTableColumn, unit_),
  };
  TreeTableColumn_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TreeTableColumn_descriptor_,
      TreeTableColumn::default_instance_,
      TreeTableColumn_offsets_,
      -1,
      -1,
      -1,
      sizeof(TreeTableColumn),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeTableColumn, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeTableColumn, _is_default_instance_));
  TreeTableColumn_ColumnType_descriptor_ = TreeTableColumn_descriptor_->enum_type(0);
  TreeTableNode_descriptor_ = file->message_type(2);
  static const int TreeTableNode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeTableNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeTableNode, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeTableNode, column_values_),
  };
  TreeTableNode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TreeTableNode_descriptor_,
      TreeTableNode::default_instance_,
      TreeTableNode_offsets_,
      -1,
      -1,
      -1,
      sizeof(TreeTableNode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeTableNode, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeTableNode, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_uiprimitives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TreeTable_descriptor_, &TreeTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TreeTableColumn_descriptor_, &TreeTableColumn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TreeTableNode_descriptor_, &TreeTableNode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_uiprimitives_2eproto() {
  delete TreeTable::default_instance_;
  delete TreeTable_reflection_;
  delete TreeTableColumn::default_instance_;
  delete TreeTableColumn_reflection_;
  delete TreeTableNode::default_instance_;
  delete TreeTableNode_reflection_;
}

void protobuf_AddDesc_uiprimitives_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_uiprimitives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::xviz::protobuf_AddDesc_options_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022uiprimitives.proto\022\004xviz\032\roptions.prot"
    "o\"t\n\tTreeTable\022&\n\007columns\030\001 \003(\0132\025.xviz.T"
    "reeTableColumn\022\"\n\005nodes\030\002 \003(\0132\023.xviz.Tre"
    "eTableNode:\033\302\273\032\027ui-primitives/treetable\""
    "\316\001\n\017TreeTableColumn\022\024\n\014display_text\030\001 \001("
    "\t\022.\n\004type\030\002 \001(\0162 .xviz.TreeTableColumn.C"
    "olumnType\022\014\n\004unit\030\003 \001(\t\"g\n\nColumnType\022)\n"
    "%TREE_TABLE_COLUMN_COLUMN_TYPE_INVALID\020\000"
    "\022\t\n\005INT32\020\001\022\n\n\006DOUBLE\020\002\022\n\n\006STRING\020\003\022\013\n\007B"
    "OOLEAN\020\004\"B\n\rTreeTableNode\022\n\n\002id\030\001 \001(\005\022\016\n"
    "\006parent\030\002 \001(\005\022\025\n\rcolumn_values\030\003 \003(\tB9\n\013"
    "com.xviz.v2B\021UiprimitivesProtoP\001Z\004v2pb\242\002"
    "\004XVIZ\252\002\007xviz.V2b\006proto3", 503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "uiprimitives.proto", &protobuf_RegisterTypes);
  TreeTable::default_instance_ = new TreeTable();
  TreeTableColumn::default_instance_ = new TreeTableColumn();
  TreeTableNode::default_instance_ = new TreeTableNode();
  TreeTable::default_instance_->InitAsDefaultInstance();
  TreeTableColumn::default_instance_->InitAsDefaultInstance();
  TreeTableNode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_uiprimitives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_uiprimitives_2eproto {
  StaticDescriptorInitializer_uiprimitives_2eproto() {
    protobuf_AddDesc_uiprimitives_2eproto();
  }
} static_descriptor_initializer_uiprimitives_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeTable::kColumnsFieldNumber;
const int TreeTable::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeTable::TreeTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.TreeTable)
}

void TreeTable::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TreeTable::TreeTable(const TreeTable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.TreeTable)
}

void TreeTable::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TreeTable::~TreeTable() {
  // @@protoc_insertion_point(destructor:xviz.TreeTable)
  SharedDtor();
}

void TreeTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreeTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeTable_descriptor_;
}

const TreeTable& TreeTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uiprimitives_2eproto();
  return *default_instance_;
}

TreeTable* TreeTable::default_instance_ = NULL;

TreeTable* TreeTable::New(::google::protobuf::Arena* arena) const {
  TreeTable* n = new TreeTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TreeTable::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.TreeTable)
  columns_.Clear();
  nodes_.Clear();
}

bool TreeTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.TreeTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xviz.TreeTableColumn columns = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_columns;
        if (input->ExpectTag(18)) goto parse_loop_nodes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .xviz.TreeTableNode nodes = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_nodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.TreeTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.TreeTable)
  return false;
#undef DO_
}

void TreeTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.TreeTable)
  // repeated .xviz.TreeTableColumn columns = 1;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columns(i), output);
  }

  // repeated .xviz.TreeTableNode nodes = 2;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.TreeTable)
}

::google::protobuf::uint8* TreeTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.TreeTable)
  // repeated .xviz.TreeTableColumn columns = 1;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->columns(i), false, target);
  }

  // repeated .xviz.TreeTableNode nodes = 2;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->nodes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.TreeTable)
  return target;
}

int TreeTable::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.TreeTable)
  int total_size = 0;

  // repeated .xviz.TreeTableColumn columns = 1;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  // repeated .xviz.TreeTableNode nodes = 2;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.TreeTable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TreeTable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.TreeTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.TreeTable)
    MergeFrom(*source);
  }
}

void TreeTable::MergeFrom(const TreeTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.TreeTable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  columns_.MergeFrom(from.columns_);
  nodes_.MergeFrom(from.nodes_);
}

void TreeTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.TreeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeTable::CopyFrom(const TreeTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.TreeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeTable::IsInitialized() const {

  return true;
}

void TreeTable::Swap(TreeTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TreeTable::InternalSwap(TreeTable* other) {
  columns_.UnsafeArenaSwap(&other->columns_);
  nodes_.UnsafeArenaSwap(&other->nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TreeTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeTable_descriptor_;
  metadata.reflection = TreeTable_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TreeTable

// repeated .xviz.TreeTableColumn columns = 1;
int TreeTable::columns_size() const {
  return columns_.size();
}
void TreeTable::clear_columns() {
  columns_.Clear();
}
const ::xviz::TreeTableColumn& TreeTable::columns(int index) const {
  // @@protoc_insertion_point(field_get:xviz.TreeTable.columns)
  return columns_.Get(index);
}
::xviz::TreeTableColumn* TreeTable::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.TreeTable.columns)
  return columns_.Mutable(index);
}
::xviz::TreeTableColumn* TreeTable::add_columns() {
  // @@protoc_insertion_point(field_add:xviz.TreeTable.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::xviz::TreeTableColumn >*
TreeTable::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:xviz.TreeTable.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::xviz::TreeTableColumn >&
TreeTable::columns() const {
  // @@protoc_insertion_point(field_list:xviz.TreeTable.columns)
  return columns_;
}

// repeated .xviz.TreeTableNode nodes = 2;
int TreeTable::nodes_size() const {
  return nodes_.size();
}
void TreeTable::clear_nodes() {
  nodes_.Clear();
}
const ::xviz::TreeTableNode& TreeTable::nodes(int index) const {
  // @@protoc_insertion_point(field_get:xviz.TreeTable.nodes)
  return nodes_.Get(index);
}
::xviz::TreeTableNode* TreeTable::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.TreeTable.nodes)
  return nodes_.Mutable(index);
}
::xviz::TreeTableNode* TreeTable::add_nodes() {
  // @@protoc_insertion_point(field_add:xviz.TreeTable.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::xviz::TreeTableNode >*
TreeTable::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:xviz.TreeTable.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::xviz::TreeTableNode >&
TreeTable::nodes() const {
  // @@protoc_insertion_point(field_list:xviz.TreeTable.nodes)
  return nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TreeTableColumn_ColumnType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeTableColumn_ColumnType_descriptor_;
}
bool TreeTableColumn_ColumnType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TreeTableColumn_ColumnType TreeTableColumn::TREE_TABLE_COLUMN_COLUMN_TYPE_INVALID;
const TreeTableColumn_ColumnType TreeTableColumn::INT32;
const TreeTableColumn_ColumnType TreeTableColumn::DOUBLE;
const TreeTableColumn_ColumnType TreeTableColumn::STRING;
const TreeTableColumn_ColumnType TreeTableColumn::BOOLEAN;
const TreeTableColumn_ColumnType TreeTableColumn::ColumnType_MIN;
const TreeTableColumn_ColumnType TreeTableColumn::ColumnType_MAX;
const int TreeTableColumn::ColumnType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeTableColumn::kDisplayTextFieldNumber;
const int TreeTableColumn::kTypeFieldNumber;
const int TreeTableColumn::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeTableColumn::TreeTableColumn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.TreeTableColumn)
}

void TreeTableColumn::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TreeTableColumn::TreeTableColumn(const TreeTableColumn& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.TreeTableColumn)
}

void TreeTableColumn::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  display_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TreeTableColumn::~TreeTableColumn() {
  // @@protoc_insertion_point(destructor:xviz.TreeTableColumn)
  SharedDtor();
}

void TreeTableColumn::SharedDtor() {
  display_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TreeTableColumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeTableColumn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeTableColumn_descriptor_;
}

const TreeTableColumn& TreeTableColumn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uiprimitives_2eproto();
  return *default_instance_;
}

TreeTableColumn* TreeTableColumn::default_instance_ = NULL;

TreeTableColumn* TreeTableColumn::New(::google::protobuf::Arena* arena) const {
  TreeTableColumn* n = new TreeTableColumn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TreeTableColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.TreeTableColumn)
  display_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TreeTableColumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.TreeTableColumn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string display_text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_text().data(), this->display_text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.TreeTableColumn.display_text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .xviz.TreeTableColumn.ColumnType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::xviz::TreeTableColumn_ColumnType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unit;
        break;
      }

      // optional string unit = 3;
      case 3: {
        if (tag == 26) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.TreeTableColumn.unit"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.TreeTableColumn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.TreeTableColumn)
  return false;
#undef DO_
}

void TreeTableColumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.TreeTableColumn)
  // optional string display_text = 1;
  if (this->display_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_text().data(), this->display_text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TreeTableColumn.display_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->display_text(), output);
  }

  // optional .xviz.TreeTableColumn.ColumnType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string unit = 3;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TreeTableColumn.unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->unit(), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.TreeTableColumn)
}

::google::protobuf::uint8* TreeTableColumn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.TreeTableColumn)
  // optional string display_text = 1;
  if (this->display_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_text().data(), this->display_text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TreeTableColumn.display_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->display_text(), target);
  }

  // optional .xviz.TreeTableColumn.ColumnType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string unit = 3;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TreeTableColumn.unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->unit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.TreeTableColumn)
  return target;
}

int TreeTableColumn::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.TreeTableColumn)
  int total_size = 0;

  // optional string display_text = 1;
  if (this->display_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_text());
  }

  // optional .xviz.TreeTableColumn.ColumnType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string unit = 3;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unit());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeTableColumn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.TreeTableColumn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TreeTableColumn* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeTableColumn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.TreeTableColumn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.TreeTableColumn)
    MergeFrom(*source);
  }
}

void TreeTableColumn::MergeFrom(const TreeTableColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.TreeTableColumn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.display_text().size() > 0) {

    display_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_text_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.unit().size() > 0) {

    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
}

void TreeTableColumn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.TreeTableColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeTableColumn::CopyFrom(const TreeTableColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.TreeTableColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeTableColumn::IsInitialized() const {

  return true;
}

void TreeTableColumn::Swap(TreeTableColumn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TreeTableColumn::InternalSwap(TreeTableColumn* other) {
  display_text_.Swap(&other->display_text_);
  std::swap(type_, other->type_);
  unit_.Swap(&other->unit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TreeTableColumn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeTableColumn_descriptor_;
  metadata.reflection = TreeTableColumn_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TreeTableColumn

// optional string display_text = 1;
void TreeTableColumn::clear_display_text() {
  display_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TreeTableColumn::display_text() const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableColumn.display_text)
  return display_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TreeTableColumn::set_display_text(const ::std::string& value) {
  
  display_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.TreeTableColumn.display_text)
}
 void TreeTableColumn::set_display_text(const char* value) {
  
  display_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.TreeTableColumn.display_text)
}
 void TreeTableColumn::set_display_text(const char* value, size_t size) {
  
  display_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.TreeTableColumn.display_text)
}
 ::std::string* TreeTableColumn::mutable_display_text() {
  
  // @@protoc_insertion_point(field_mutable:xviz.TreeTableColumn.display_text)
  return display_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TreeTableColumn::release_display_text() {
  // @@protoc_insertion_point(field_release:xviz.TreeTableColumn.display_text)
  
  return display_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TreeTableColumn::set_allocated_display_text(::std::string* display_text) {
  if (display_text != NULL) {
    
  } else {
    
  }
  display_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_text);
  // @@protoc_insertion_point(field_set_allocated:xviz.TreeTableColumn.display_text)
}

// optional .xviz.TreeTableColumn.ColumnType type = 2;
void TreeTableColumn::clear_type() {
  type_ = 0;
}
 ::xviz::TreeTableColumn_ColumnType TreeTableColumn::type() const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableColumn.type)
  return static_cast< ::xviz::TreeTableColumn_ColumnType >(type_);
}
 void TreeTableColumn::set_type(::xviz::TreeTableColumn_ColumnType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:xviz.TreeTableColumn.type)
}

// optional string unit = 3;
void TreeTableColumn::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TreeTableColumn::unit() const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableColumn.unit)
  return unit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TreeTableColumn::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.TreeTableColumn.unit)
}
 void TreeTableColumn::set_unit(const char* value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.TreeTableColumn.unit)
}
 void TreeTableColumn::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.TreeTableColumn.unit)
}
 ::std::string* TreeTableColumn::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:xviz.TreeTableColumn.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TreeTableColumn::release_unit() {
  // @@protoc_insertion_point(field_release:xviz.TreeTableColumn.unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TreeTableColumn::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:xviz.TreeTableColumn.unit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeTableNode::kIdFieldNumber;
const int TreeTableNode::kParentFieldNumber;
const int TreeTableNode::kColumnValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeTableNode::TreeTableNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.TreeTableNode)
}

void TreeTableNode::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TreeTableNode::TreeTableNode(const TreeTableNode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xviz.TreeTableNode)
}

void TreeTableNode::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  parent_ = 0;
}

TreeTableNode::~TreeTableNode() {
  // @@protoc_insertion_point(destructor:xviz.TreeTableNode)
  SharedDtor();
}

void TreeTableNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreeTableNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeTableNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeTableNode_descriptor_;
}

const TreeTableNode& TreeTableNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uiprimitives_2eproto();
  return *default_instance_;
}

TreeTableNode* TreeTableNode::default_instance_ = NULL;

TreeTableNode* TreeTableNode::New(::google::protobuf::Arena* arena) const {
  TreeTableNode* n = new TreeTableNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TreeTableNode::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.TreeTableNode)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TreeTableNode, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TreeTableNode*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, parent_);

#undef ZR_HELPER_
#undef ZR_

  column_values_.Clear();
}

bool TreeTableNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xviz.TreeTableNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_parent;
        break;
      }

      // optional int32 parent = 2;
      case 2: {
        if (tag == 16) {
         parse_parent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_column_values;
        break;
      }

      // repeated string column_values = 3;
      case 3: {
        if (tag == 26) {
         parse_column_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_column_values()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->column_values(this->column_values_size() - 1).data(),
            this->column_values(this->column_values_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xviz.TreeTableNode.column_values"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_column_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xviz.TreeTableNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xviz.TreeTableNode)
  return false;
#undef DO_
}

void TreeTableNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xviz.TreeTableNode)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 parent = 2;
  if (this->parent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parent(), output);
  }

  // repeated string column_values = 3;
  for (int i = 0; i < this->column_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column_values(i).data(), this->column_values(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TreeTableNode.column_values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->column_values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xviz.TreeTableNode)
}

::google::protobuf::uint8* TreeTableNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.TreeTableNode)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 parent = 2;
  if (this->parent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parent(), target);
  }

  // repeated string column_values = 3;
  for (int i = 0; i < this->column_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column_values(i).data(), this->column_values(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xviz.TreeTableNode.column_values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->column_values(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xviz.TreeTableNode)
  return target;
}

int TreeTableNode::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.TreeTableNode)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional int32 parent = 2;
  if (this->parent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parent());
  }

  // repeated string column_values = 3;
  total_size += 1 * this->column_values_size();
  for (int i = 0; i < this->column_values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->column_values(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeTableNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.TreeTableNode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TreeTableNode* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeTableNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.TreeTableNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.TreeTableNode)
    MergeFrom(*source);
  }
}

void TreeTableNode::MergeFrom(const TreeTableNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.TreeTableNode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  column_values_.MergeFrom(from.column_values_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.parent() != 0) {
    set_parent(from.parent());
  }
}

void TreeTableNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.TreeTableNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeTableNode::CopyFrom(const TreeTableNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.TreeTableNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeTableNode::IsInitialized() const {

  return true;
}

void TreeTableNode::Swap(TreeTableNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TreeTableNode::InternalSwap(TreeTableNode* other) {
  std::swap(id_, other->id_);
  std::swap(parent_, other->parent_);
  column_values_.UnsafeArenaSwap(&other->column_values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TreeTableNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeTableNode_descriptor_;
  metadata.reflection = TreeTableNode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TreeTableNode

// optional int32 id = 1;
void TreeTableNode::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 TreeTableNode::id() const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableNode.id)
  return id_;
}
 void TreeTableNode::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:xviz.TreeTableNode.id)
}

// optional int32 parent = 2;
void TreeTableNode::clear_parent() {
  parent_ = 0;
}
 ::google::protobuf::int32 TreeTableNode::parent() const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableNode.parent)
  return parent_;
}
 void TreeTableNode::set_parent(::google::protobuf::int32 value) {
  
  parent_ = value;
  // @@protoc_insertion_point(field_set:xviz.TreeTableNode.parent)
}

// repeated string column_values = 3;
int TreeTableNode::column_values_size() const {
  return column_values_.size();
}
void TreeTableNode::clear_column_values() {
  column_values_.Clear();
}
 const ::std::string& TreeTableNode::column_values(int index) const {
  // @@protoc_insertion_point(field_get:xviz.TreeTableNode.column_values)
  return column_values_.Get(index);
}
 ::std::string* TreeTableNode::mutable_column_values(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.TreeTableNode.column_values)
  return column_values_.Mutable(index);
}
 void TreeTableNode::set_column_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.TreeTableNode.column_values)
  column_values_.Mutable(index)->assign(value);
}
 void TreeTableNode::set_column_values(int index, const char* value) {
  column_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.TreeTableNode.column_values)
}
 void TreeTableNode::set_column_values(int index, const char* value, size_t size) {
  column_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.TreeTableNode.column_values)
}
 ::std::string* TreeTableNode::add_column_values() {
  // @@protoc_insertion_point(field_add_mutable:xviz.TreeTableNode.column_values)
  return column_values_.Add();
}
 void TreeTableNode::add_column_values(const ::std::string& value) {
  column_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.TreeTableNode.column_values)
}
 void TreeTableNode::add_column_values(const char* value) {
  column_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.TreeTableNode.column_values)
}
 void TreeTableNode::add_column_values(const char* value, size_t size) {
  column_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.TreeTableNode.column_values)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TreeTableNode::column_values() const {
  // @@protoc_insertion_point(field_list:xviz.TreeTableNode.column_values)
  return column_values_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TreeTableNode::mutable_column_values() {
  // @@protoc_insertion_point(field_mutable_list:xviz.TreeTableNode.column_values)
  return &column_values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

// @@protoc_insertion_point(global_scope)
