// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: declarativeui.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_declarativeui_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_declarativeui_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_declarativeui_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_declarativeui_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_declarativeui_2eproto;
namespace xviz {
class Panel;
class PanelDefaultTypeInternal;
extern PanelDefaultTypeInternal _Panel_default_instance_;
}  // namespace xviz
PROTOBUF_NAMESPACE_OPEN
template<> ::xviz::Panel* Arena::CreateMaybeMessage<::xviz::Panel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xviz {

enum LayoutType : int {
  VERTICAL = 0,
  HORIZONTAL = 1,
  LayoutType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LayoutType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LayoutType_IsValid(int value);
constexpr LayoutType LayoutType_MIN = VERTICAL;
constexpr LayoutType LayoutType_MAX = HORIZONTAL;
constexpr int LayoutType_ARRAYSIZE = LayoutType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LayoutType_descriptor();
template<typename T>
inline const std::string& LayoutType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LayoutType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LayoutType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LayoutType_descriptor(), enum_t_value);
}
inline bool LayoutType_Parse(
    const std::string& name, LayoutType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LayoutType>(
    LayoutType_descriptor(), name, value);
}
enum ComponentType : int {
  TABLE = 0,
  METRIC = 1,
  PLOT = 2,
  TREETABLE = 3,
  VIDEO = 4,
  SELECT = 5,
  CONTAINER = 6,
  ComponentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ComponentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ComponentType_IsValid(int value);
constexpr ComponentType ComponentType_MIN = TABLE;
constexpr ComponentType ComponentType_MAX = CONTAINER;
constexpr int ComponentType_ARRAYSIZE = ComponentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComponentType_descriptor();
template<typename T>
inline const std::string& ComponentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComponentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComponentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComponentType_descriptor(), enum_t_value);
}
inline bool ComponentType_Parse(
    const std::string& name, ComponentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComponentType>(
    ComponentType_descriptor(), name, value);
}
// ===================================================================

class Panel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.Panel) */ {
 public:
  Panel();
  virtual ~Panel();

  Panel(const Panel& from);
  Panel(Panel&& from) noexcept
    : Panel() {
    *this = ::std::move(from);
  }

  inline Panel& operator=(const Panel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Panel& operator=(Panel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Panel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Panel* internal_default_instance() {
    return reinterpret_cast<const Panel*>(
               &_Panel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Panel& a, Panel& b) {
    a.Swap(&b);
  }
  inline void Swap(Panel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Panel* New() const final {
    return CreateMaybeMessage<Panel>(nullptr);
  }

  Panel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Panel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Panel& from);
  void MergeFrom(const Panel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Panel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.Panel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_declarativeui_2eproto);
    return ::descriptor_table_declarativeui_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 4,
    kCamerasFieldNumber = 5,
    kStreamsFieldNumber = 8,
    kNameFieldNumber = 1,
    kTitleFieldNumber = 6,
    kDescriptionFieldNumber = 7,
    kTypeFieldNumber = 2,
    kLayoutFieldNumber = 3,
  };
  // repeated .xviz.Panel children = 4;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::xviz::Panel* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::Panel >*
      mutable_children();
  private:
  const ::xviz::Panel& _internal_children(int index) const;
  ::xviz::Panel* _internal_add_children();
  public:
  const ::xviz::Panel& children(int index) const;
  ::xviz::Panel* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::Panel >&
      children() const;

  // repeated string cameras = 5;
  int cameras_size() const;
  private:
  int _internal_cameras_size() const;
  public:
  void clear_cameras();
  const std::string& cameras(int index) const;
  std::string* mutable_cameras(int index);
  void set_cameras(int index, const std::string& value);
  void set_cameras(int index, std::string&& value);
  void set_cameras(int index, const char* value);
  void set_cameras(int index, const char* value, size_t size);
  std::string* add_cameras();
  void add_cameras(const std::string& value);
  void add_cameras(std::string&& value);
  void add_cameras(const char* value);
  void add_cameras(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cameras() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cameras();
  private:
  const std::string& _internal_cameras(int index) const;
  std::string* _internal_add_cameras();
  public:

  // repeated string streams = 8;
  int streams_size() const;
  private:
  int _internal_streams_size() const;
  public:
  void clear_streams();
  const std::string& streams(int index) const;
  std::string* mutable_streams(int index);
  void set_streams(int index, const std::string& value);
  void set_streams(int index, std::string&& value);
  void set_streams(int index, const char* value);
  void set_streams(int index, const char* value, size_t size);
  std::string* add_streams();
  void add_streams(const std::string& value);
  void add_streams(std::string&& value);
  void add_streams(const char* value);
  void add_streams(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& streams() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_streams();
  private:
  const std::string& _internal_streams(int index) const;
  std::string* _internal_add_streams();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string title = 6;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 7;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .xviz.ComponentType type = 2;
  void clear_type();
  ::xviz::ComponentType type() const;
  void set_type(::xviz::ComponentType value);
  private:
  ::xviz::ComponentType _internal_type() const;
  void _internal_set_type(::xviz::ComponentType value);
  public:

  // .xviz.LayoutType layout = 3;
  void clear_layout();
  ::xviz::LayoutType layout() const;
  void set_layout(::xviz::LayoutType value);
  private:
  ::xviz::LayoutType _internal_layout() const;
  void _internal_set_layout(::xviz::LayoutType value);
  public:

  // @@protoc_insertion_point(class_scope:xviz.Panel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::Panel > children_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cameras_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> streams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int type_;
  int layout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_declarativeui_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Panel

// string name = 1;
inline void Panel::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Panel::name() const {
  // @@protoc_insertion_point(field_get:xviz.Panel.name)
  return _internal_name();
}
inline void Panel::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:xviz.Panel.name)
}
inline std::string* Panel::mutable_name() {
  // @@protoc_insertion_point(field_mutable:xviz.Panel.name)
  return _internal_mutable_name();
}
inline const std::string& Panel::_internal_name() const {
  return name_.GetNoArena();
}
inline void Panel::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Panel::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.Panel.name)
}
inline void Panel::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Panel.name)
}
inline void Panel::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Panel.name)
}
inline std::string* Panel::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Panel::release_name() {
  // @@protoc_insertion_point(field_release:xviz.Panel.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Panel::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:xviz.Panel.name)
}

// .xviz.ComponentType type = 2;
inline void Panel::clear_type() {
  type_ = 0;
}
inline ::xviz::ComponentType Panel::_internal_type() const {
  return static_cast< ::xviz::ComponentType >(type_);
}
inline ::xviz::ComponentType Panel::type() const {
  // @@protoc_insertion_point(field_get:xviz.Panel.type)
  return _internal_type();
}
inline void Panel::_internal_set_type(::xviz::ComponentType value) {
  
  type_ = value;
}
inline void Panel::set_type(::xviz::ComponentType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:xviz.Panel.type)
}

// .xviz.LayoutType layout = 3;
inline void Panel::clear_layout() {
  layout_ = 0;
}
inline ::xviz::LayoutType Panel::_internal_layout() const {
  return static_cast< ::xviz::LayoutType >(layout_);
}
inline ::xviz::LayoutType Panel::layout() const {
  // @@protoc_insertion_point(field_get:xviz.Panel.layout)
  return _internal_layout();
}
inline void Panel::_internal_set_layout(::xviz::LayoutType value) {
  
  layout_ = value;
}
inline void Panel::set_layout(::xviz::LayoutType value) {
  _internal_set_layout(value);
  // @@protoc_insertion_point(field_set:xviz.Panel.layout)
}

// repeated .xviz.Panel children = 4;
inline int Panel::_internal_children_size() const {
  return children_.size();
}
inline int Panel::children_size() const {
  return _internal_children_size();
}
inline void Panel::clear_children() {
  children_.Clear();
}
inline ::xviz::Panel* Panel::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.Panel.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::Panel >*
Panel::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Panel.children)
  return &children_;
}
inline const ::xviz::Panel& Panel::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::xviz::Panel& Panel::children(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Panel.children)
  return _internal_children(index);
}
inline ::xviz::Panel* Panel::_internal_add_children() {
  return children_.Add();
}
inline ::xviz::Panel* Panel::add_children() {
  // @@protoc_insertion_point(field_add:xviz.Panel.children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::Panel >&
Panel::children() const {
  // @@protoc_insertion_point(field_list:xviz.Panel.children)
  return children_;
}

// repeated string cameras = 5;
inline int Panel::_internal_cameras_size() const {
  return cameras_.size();
}
inline int Panel::cameras_size() const {
  return _internal_cameras_size();
}
inline void Panel::clear_cameras() {
  cameras_.Clear();
}
inline std::string* Panel::add_cameras() {
  // @@protoc_insertion_point(field_add_mutable:xviz.Panel.cameras)
  return _internal_add_cameras();
}
inline const std::string& Panel::_internal_cameras(int index) const {
  return cameras_.Get(index);
}
inline const std::string& Panel::cameras(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Panel.cameras)
  return _internal_cameras(index);
}
inline std::string* Panel::mutable_cameras(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.Panel.cameras)
  return cameras_.Mutable(index);
}
inline void Panel::set_cameras(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.Panel.cameras)
  cameras_.Mutable(index)->assign(value);
}
inline void Panel::set_cameras(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:xviz.Panel.cameras)
  cameras_.Mutable(index)->assign(std::move(value));
}
inline void Panel::set_cameras(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cameras_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.Panel.cameras)
}
inline void Panel::set_cameras(int index, const char* value, size_t size) {
  cameras_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.Panel.cameras)
}
inline std::string* Panel::_internal_add_cameras() {
  return cameras_.Add();
}
inline void Panel::add_cameras(const std::string& value) {
  cameras_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.Panel.cameras)
}
inline void Panel::add_cameras(std::string&& value) {
  cameras_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xviz.Panel.cameras)
}
inline void Panel::add_cameras(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cameras_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.Panel.cameras)
}
inline void Panel::add_cameras(const char* value, size_t size) {
  cameras_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.Panel.cameras)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Panel::cameras() const {
  // @@protoc_insertion_point(field_list:xviz.Panel.cameras)
  return cameras_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Panel::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Panel.cameras)
  return &cameras_;
}

// string title = 6;
inline void Panel::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Panel::title() const {
  // @@protoc_insertion_point(field_get:xviz.Panel.title)
  return _internal_title();
}
inline void Panel::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:xviz.Panel.title)
}
inline std::string* Panel::mutable_title() {
  // @@protoc_insertion_point(field_mutable:xviz.Panel.title)
  return _internal_mutable_title();
}
inline const std::string& Panel::_internal_title() const {
  return title_.GetNoArena();
}
inline void Panel::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Panel::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.Panel.title)
}
inline void Panel::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Panel.title)
}
inline void Panel::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Panel.title)
}
inline std::string* Panel::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Panel::release_title() {
  // @@protoc_insertion_point(field_release:xviz.Panel.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Panel::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:xviz.Panel.title)
}

// string description = 7;
inline void Panel::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Panel::description() const {
  // @@protoc_insertion_point(field_get:xviz.Panel.description)
  return _internal_description();
}
inline void Panel::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:xviz.Panel.description)
}
inline std::string* Panel::mutable_description() {
  // @@protoc_insertion_point(field_mutable:xviz.Panel.description)
  return _internal_mutable_description();
}
inline const std::string& Panel::_internal_description() const {
  return description_.GetNoArena();
}
inline void Panel::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Panel::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.Panel.description)
}
inline void Panel::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Panel.description)
}
inline void Panel::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Panel.description)
}
inline std::string* Panel::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Panel::release_description() {
  // @@protoc_insertion_point(field_release:xviz.Panel.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Panel::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:xviz.Panel.description)
}

// repeated string streams = 8;
inline int Panel::_internal_streams_size() const {
  return streams_.size();
}
inline int Panel::streams_size() const {
  return _internal_streams_size();
}
inline void Panel::clear_streams() {
  streams_.Clear();
}
inline std::string* Panel::add_streams() {
  // @@protoc_insertion_point(field_add_mutable:xviz.Panel.streams)
  return _internal_add_streams();
}
inline const std::string& Panel::_internal_streams(int index) const {
  return streams_.Get(index);
}
inline const std::string& Panel::streams(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Panel.streams)
  return _internal_streams(index);
}
inline std::string* Panel::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.Panel.streams)
  return streams_.Mutable(index);
}
inline void Panel::set_streams(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.Panel.streams)
  streams_.Mutable(index)->assign(value);
}
inline void Panel::set_streams(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:xviz.Panel.streams)
  streams_.Mutable(index)->assign(std::move(value));
}
inline void Panel::set_streams(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  streams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.Panel.streams)
}
inline void Panel::set_streams(int index, const char* value, size_t size) {
  streams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.Panel.streams)
}
inline std::string* Panel::_internal_add_streams() {
  return streams_.Add();
}
inline void Panel::add_streams(const std::string& value) {
  streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.Panel.streams)
}
inline void Panel::add_streams(std::string&& value) {
  streams_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xviz.Panel.streams)
}
inline void Panel::add_streams(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.Panel.streams)
}
inline void Panel::add_streams(const char* value, size_t size) {
  streams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.Panel.streams)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Panel::streams() const {
  // @@protoc_insertion_point(field_list:xviz.Panel.streams)
  return streams_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Panel::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Panel.streams)
  return &streams_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xviz::LayoutType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::LayoutType>() {
  return ::xviz::LayoutType_descriptor();
}
template <> struct is_proto_enum< ::xviz::ComponentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::ComponentType>() {
  return ::xviz::ComponentType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_declarativeui_2eproto
