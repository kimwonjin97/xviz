// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: style.proto

#ifndef PROTOBUF_INCLUDED_style_2eproto
#define PROTOBUF_INCLUDED_style_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_style_2eproto 

namespace protobuf_style_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_style_2eproto
namespace xviz {
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class StyleClass;
class StyleClassDefaultTypeInternal;
extern StyleClassDefaultTypeInternal _StyleClass_default_instance_;
class StyleObjectValue;
class StyleObjectValueDefaultTypeInternal;
extern StyleObjectValueDefaultTypeInternal _StyleObjectValue_default_instance_;
class StyleStreamValue;
class StyleStreamValueDefaultTypeInternal;
extern StyleStreamValueDefaultTypeInternal _StyleStreamValue_default_instance_;
}  // namespace xviz
namespace google {
namespace protobuf {
template<> ::xviz::Color* Arena::CreateMaybeMessage<::xviz::Color>(Arena*);
template<> ::xviz::StyleClass* Arena::CreateMaybeMessage<::xviz::StyleClass>(Arena*);
template<> ::xviz::StyleObjectValue* Arena::CreateMaybeMessage<::xviz::StyleObjectValue>(Arena*);
template<> ::xviz::StyleStreamValue* Arena::CreateMaybeMessage<::xviz::StyleStreamValue>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace xviz {

enum TextAnchor {
  TEXT_ANCHOR_INVALID = 0,
  START = 1,
  MIDDLE = 2,
  END = 3,
  TextAnchor_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TextAnchor_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TextAnchor_IsValid(int value);
const TextAnchor TextAnchor_MIN = TEXT_ANCHOR_INVALID;
const TextAnchor TextAnchor_MAX = END;
const int TextAnchor_ARRAYSIZE = TextAnchor_MAX + 1;

const ::google::protobuf::EnumDescriptor* TextAnchor_descriptor();
inline const ::std::string& TextAnchor_Name(TextAnchor value) {
  return ::google::protobuf::internal::NameOfEnum(
    TextAnchor_descriptor(), value);
}
inline bool TextAnchor_Parse(
    const ::std::string& name, TextAnchor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TextAnchor>(
    TextAnchor_descriptor(), name, value);
}
enum TextAlignmentBaseline {
  TEXT_ALIGNMENT_BASELINE_INVALID = 0,
  TOP = 1,
  CENTER = 2,
  BOTTOM = 3,
  TextAlignmentBaseline_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TextAlignmentBaseline_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TextAlignmentBaseline_IsValid(int value);
const TextAlignmentBaseline TextAlignmentBaseline_MIN = TEXT_ALIGNMENT_BASELINE_INVALID;
const TextAlignmentBaseline TextAlignmentBaseline_MAX = BOTTOM;
const int TextAlignmentBaseline_ARRAYSIZE = TextAlignmentBaseline_MAX + 1;

const ::google::protobuf::EnumDescriptor* TextAlignmentBaseline_descriptor();
inline const ::std::string& TextAlignmentBaseline_Name(TextAlignmentBaseline value) {
  return ::google::protobuf::internal::NameOfEnum(
    TextAlignmentBaseline_descriptor(), value);
}
inline bool TextAlignmentBaseline_Parse(
    const ::std::string& name, TextAlignmentBaseline* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TextAlignmentBaseline>(
    TextAlignmentBaseline_descriptor(), name, value);
}
// ===================================================================

class StyleClass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.StyleClass) */ {
 public:
  StyleClass();
  virtual ~StyleClass();

  StyleClass(const StyleClass& from);

  inline StyleClass& operator=(const StyleClass& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StyleClass(StyleClass&& from) noexcept
    : StyleClass() {
    *this = ::std::move(from);
  }

  inline StyleClass& operator=(StyleClass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StyleClass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StyleClass* internal_default_instance() {
    return reinterpret_cast<const StyleClass*>(
               &_StyleClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(StyleClass* other);
  friend void swap(StyleClass& a, StyleClass& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StyleClass* New() const final {
    return CreateMaybeMessage<StyleClass>(NULL);
  }

  StyleClass* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StyleClass>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StyleClass& from);
  void MergeFrom(const StyleClass& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleClass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .xviz.StyleObjectValue style = 2;
  bool has_style() const;
  void clear_style();
  static const int kStyleFieldNumber = 2;
  private:
  const ::xviz::StyleObjectValue& _internal_style() const;
  public:
  const ::xviz::StyleObjectValue& style() const;
  ::xviz::StyleObjectValue* release_style();
  ::xviz::StyleObjectValue* mutable_style();
  void set_allocated_style(::xviz::StyleObjectValue* style);

  // @@protoc_insertion_point(class_scope:xviz.StyleClass)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::xviz::StyleObjectValue* style_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_style_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StyleObjectValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.StyleObjectValue) */ {
 public:
  StyleObjectValue();
  virtual ~StyleObjectValue();

  StyleObjectValue(const StyleObjectValue& from);

  inline StyleObjectValue& operator=(const StyleObjectValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StyleObjectValue(StyleObjectValue&& from) noexcept
    : StyleObjectValue() {
    *this = ::std::move(from);
  }

  inline StyleObjectValue& operator=(StyleObjectValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StyleObjectValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StyleObjectValue* internal_default_instance() {
    return reinterpret_cast<const StyleObjectValue*>(
               &_StyleObjectValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StyleObjectValue* other);
  friend void swap(StyleObjectValue& a, StyleObjectValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StyleObjectValue* New() const final {
    return CreateMaybeMessage<StyleObjectValue>(NULL);
  }

  StyleObjectValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StyleObjectValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StyleObjectValue& from);
  void MergeFrom(const StyleObjectValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleObjectValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes fill_color = 1;
  void clear_fill_color();
  static const int kFillColorFieldNumber = 1;
  const ::std::string& fill_color() const;
  void set_fill_color(const ::std::string& value);
  #if LANG_CXX11
  void set_fill_color(::std::string&& value);
  #endif
  void set_fill_color(const char* value);
  void set_fill_color(const void* value, size_t size);
  ::std::string* mutable_fill_color();
  ::std::string* release_fill_color();
  void set_allocated_fill_color(::std::string* fill_color);

  // bytes stroke_color = 2;
  void clear_stroke_color();
  static const int kStrokeColorFieldNumber = 2;
  const ::std::string& stroke_color() const;
  void set_stroke_color(const ::std::string& value);
  #if LANG_CXX11
  void set_stroke_color(::std::string&& value);
  #endif
  void set_stroke_color(const char* value);
  void set_stroke_color(const void* value, size_t size);
  ::std::string* mutable_stroke_color();
  ::std::string* release_stroke_color();
  void set_allocated_stroke_color(::std::string* stroke_color);

  // float stroke_width = 3;
  void clear_stroke_width();
  static const int kStrokeWidthFieldNumber = 3;
  float stroke_width() const;
  void set_stroke_width(float value);

  // float radius = 4;
  void clear_radius();
  static const int kRadiusFieldNumber = 4;
  float radius() const;
  void set_radius(float value);

  // float text_size = 5;
  void clear_text_size();
  static const int kTextSizeFieldNumber = 5;
  float text_size() const;
  void set_text_size(float value);

  // float text_rotation = 6;
  void clear_text_rotation();
  static const int kTextRotationFieldNumber = 6;
  float text_rotation() const;
  void set_text_rotation(float value);

  // .xviz.TextAnchor text_anchor = 7;
  void clear_text_anchor();
  static const int kTextAnchorFieldNumber = 7;
  ::xviz::TextAnchor text_anchor() const;
  void set_text_anchor(::xviz::TextAnchor value);

  // .xviz.TextAlignmentBaseline text_baseline = 8;
  void clear_text_baseline();
  static const int kTextBaselineFieldNumber = 8;
  ::xviz::TextAlignmentBaseline text_baseline() const;
  void set_text_baseline(::xviz::TextAlignmentBaseline value);

  // float height = 9;
  void clear_height();
  static const int kHeightFieldNumber = 9;
  float height() const;
  void set_height(float value);

  // @@protoc_insertion_point(class_scope:xviz.StyleObjectValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fill_color_;
  ::google::protobuf::internal::ArenaStringPtr stroke_color_;
  float stroke_width_;
  float radius_;
  float text_size_;
  float text_rotation_;
  int text_anchor_;
  int text_baseline_;
  float height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_style_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StyleStreamValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.StyleStreamValue) */ {
 public:
  StyleStreamValue();
  virtual ~StyleStreamValue();

  StyleStreamValue(const StyleStreamValue& from);

  inline StyleStreamValue& operator=(const StyleStreamValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StyleStreamValue(StyleStreamValue&& from) noexcept
    : StyleStreamValue() {
    *this = ::std::move(from);
  }

  inline StyleStreamValue& operator=(StyleStreamValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StyleStreamValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StyleStreamValue* internal_default_instance() {
    return reinterpret_cast<const StyleStreamValue*>(
               &_StyleStreamValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(StyleStreamValue* other);
  friend void swap(StyleStreamValue& a, StyleStreamValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StyleStreamValue* New() const final {
    return CreateMaybeMessage<StyleStreamValue>(NULL);
  }

  StyleStreamValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StyleStreamValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StyleStreamValue& from);
  void MergeFrom(const StyleStreamValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleStreamValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes fill_color = 1;
  void clear_fill_color();
  static const int kFillColorFieldNumber = 1;
  const ::std::string& fill_color() const;
  void set_fill_color(const ::std::string& value);
  #if LANG_CXX11
  void set_fill_color(::std::string&& value);
  #endif
  void set_fill_color(const char* value);
  void set_fill_color(const void* value, size_t size);
  ::std::string* mutable_fill_color();
  ::std::string* release_fill_color();
  void set_allocated_fill_color(::std::string* fill_color);

  // bytes stroke_color = 2;
  void clear_stroke_color();
  static const int kStrokeColorFieldNumber = 2;
  const ::std::string& stroke_color() const;
  void set_stroke_color(const ::std::string& value);
  #if LANG_CXX11
  void set_stroke_color(::std::string&& value);
  #endif
  void set_stroke_color(const char* value);
  void set_stroke_color(const void* value, size_t size);
  ::std::string* mutable_stroke_color();
  ::std::string* release_stroke_color();
  void set_allocated_stroke_color(::std::string* stroke_color);

  // string font_family = 20;
  void clear_font_family();
  static const int kFontFamilyFieldNumber = 20;
  const ::std::string& font_family() const;
  void set_font_family(const ::std::string& value);
  #if LANG_CXX11
  void set_font_family(::std::string&& value);
  #endif
  void set_font_family(const char* value);
  void set_font_family(const char* value, size_t size);
  ::std::string* mutable_font_family();
  ::std::string* release_font_family();
  void set_allocated_font_family(::std::string* font_family);

  // string point_cloud_mode = 21;
  void clear_point_cloud_mode();
  static const int kPointCloudModeFieldNumber = 21;
  const ::std::string& point_cloud_mode() const;
  void set_point_cloud_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_point_cloud_mode(::std::string&& value);
  #endif
  void set_point_cloud_mode(const char* value);
  void set_point_cloud_mode(const char* value, size_t size);
  ::std::string* mutable_point_cloud_mode();
  ::std::string* release_point_cloud_mode();
  void set_allocated_point_cloud_mode(::std::string* point_cloud_mode);

  // float stroke_width = 3;
  void clear_stroke_width();
  static const int kStrokeWidthFieldNumber = 3;
  float stroke_width() const;
  void set_stroke_width(float value);

  // float radius = 4;
  void clear_radius();
  static const int kRadiusFieldNumber = 4;
  float radius() const;
  void set_radius(float value);

  // float text_size = 5;
  void clear_text_size();
  static const int kTextSizeFieldNumber = 5;
  float text_size() const;
  void set_text_size(float value);

  // float text_rotation = 6;
  void clear_text_rotation();
  static const int kTextRotationFieldNumber = 6;
  float text_rotation() const;
  void set_text_rotation(float value);

  // .xviz.TextAnchor text_anchor = 7;
  void clear_text_anchor();
  static const int kTextAnchorFieldNumber = 7;
  ::xviz::TextAnchor text_anchor() const;
  void set_text_anchor(::xviz::TextAnchor value);

  // .xviz.TextAlignmentBaseline text_baseline = 8;
  void clear_text_baseline();
  static const int kTextBaselineFieldNumber = 8;
  ::xviz::TextAlignmentBaseline text_baseline() const;
  void set_text_baseline(::xviz::TextAlignmentBaseline value);

  // float height = 9;
  void clear_height();
  static const int kHeightFieldNumber = 9;
  float height() const;
  void set_height(float value);

  // uint32 radius_min_pixels = 10;
  void clear_radius_min_pixels();
  static const int kRadiusMinPixelsFieldNumber = 10;
  ::google::protobuf::uint32 radius_min_pixels() const;
  void set_radius_min_pixels(::google::protobuf::uint32 value);

  // uint32 radius_max_pixels = 11;
  void clear_radius_max_pixels();
  static const int kRadiusMaxPixelsFieldNumber = 11;
  ::google::protobuf::uint32 radius_max_pixels() const;
  void set_radius_max_pixels(::google::protobuf::uint32 value);

  // uint32 stroke_width_min_pixels = 12;
  void clear_stroke_width_min_pixels();
  static const int kStrokeWidthMinPixelsFieldNumber = 12;
  ::google::protobuf::uint32 stroke_width_min_pixels() const;
  void set_stroke_width_min_pixels(::google::protobuf::uint32 value);

  // uint32 stroke_width_max_pixels = 13;
  void clear_stroke_width_max_pixels();
  static const int kStrokeWidthMaxPixelsFieldNumber = 13;
  ::google::protobuf::uint32 stroke_width_max_pixels() const;
  void set_stroke_width_max_pixels(::google::protobuf::uint32 value);

  // float opacity = 14;
  void clear_opacity();
  static const int kOpacityFieldNumber = 14;
  float opacity() const;
  void set_opacity(float value);

  // bool stroked = 15;
  void clear_stroked();
  static const int kStrokedFieldNumber = 15;
  bool stroked() const;
  void set_stroked(bool value);

  // bool filled = 16;
  void clear_filled();
  static const int kFilledFieldNumber = 16;
  bool filled() const;
  void set_filled(bool value);

  // bool extruded = 17;
  void clear_extruded();
  static const int kExtrudedFieldNumber = 17;
  bool extruded() const;
  void set_extruded(bool value);

  // uint32 radius_pixels = 18;
  void clear_radius_pixels();
  static const int kRadiusPixelsFieldNumber = 18;
  ::google::protobuf::uint32 radius_pixels() const;
  void set_radius_pixels(::google::protobuf::uint32 value);

  // uint32 font_weight = 19;
  void clear_font_weight();
  static const int kFontWeightFieldNumber = 19;
  ::google::protobuf::uint32 font_weight() const;
  void set_font_weight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xviz.StyleStreamValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fill_color_;
  ::google::protobuf::internal::ArenaStringPtr stroke_color_;
  ::google::protobuf::internal::ArenaStringPtr font_family_;
  ::google::protobuf::internal::ArenaStringPtr point_cloud_mode_;
  float stroke_width_;
  float radius_;
  float text_size_;
  float text_rotation_;
  int text_anchor_;
  int text_baseline_;
  float height_;
  ::google::protobuf::uint32 radius_min_pixels_;
  ::google::protobuf::uint32 radius_max_pixels_;
  ::google::protobuf::uint32 stroke_width_min_pixels_;
  ::google::protobuf::uint32 stroke_width_max_pixels_;
  float opacity_;
  bool stroked_;
  bool filled_;
  bool extruded_;
  ::google::protobuf::uint32 radius_pixels_;
  ::google::protobuf::uint32 font_weight_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_style_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Color : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(Color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Color* other);
  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(NULL);
  }

  Color* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes values = 1;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::std::string& values() const;
  void set_values(const ::std::string& value);
  #if LANG_CXX11
  void set_values(::std::string&& value);
  #endif
  void set_values(const char* value);
  void set_values(const void* value, size_t size);
  ::std::string* mutable_values();
  ::std::string* release_values();
  void set_allocated_values(::std::string* values);

  // @@protoc_insertion_point(class_scope:xviz.Color)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_style_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StyleClass

// string name = 1;
inline void StyleClass::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StyleClass::name() const {
  // @@protoc_insertion_point(field_get:xviz.StyleClass.name)
  return name_.GetNoArena();
}
inline void StyleClass::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StyleClass.name)
}
#if LANG_CXX11
inline void StyleClass::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.StyleClass.name)
}
#endif
inline void StyleClass::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleClass.name)
}
inline void StyleClass::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleClass.name)
}
inline ::std::string* StyleClass::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StyleClass.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StyleClass::release_name() {
  // @@protoc_insertion_point(field_release:xviz.StyleClass.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StyleClass::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleClass.name)
}

// .xviz.StyleObjectValue style = 2;
inline bool StyleClass::has_style() const {
  return this != internal_default_instance() && style_ != NULL;
}
inline void StyleClass::clear_style() {
  if (GetArenaNoVirtual() == NULL && style_ != NULL) {
    delete style_;
  }
  style_ = NULL;
}
inline const ::xviz::StyleObjectValue& StyleClass::_internal_style() const {
  return *style_;
}
inline const ::xviz::StyleObjectValue& StyleClass::style() const {
  const ::xviz::StyleObjectValue* p = style_;
  // @@protoc_insertion_point(field_get:xviz.StyleClass.style)
  return p != NULL ? *p : *reinterpret_cast<const ::xviz::StyleObjectValue*>(
      &::xviz::_StyleObjectValue_default_instance_);
}
inline ::xviz::StyleObjectValue* StyleClass::release_style() {
  // @@protoc_insertion_point(field_release:xviz.StyleClass.style)
  
  ::xviz::StyleObjectValue* temp = style_;
  style_ = NULL;
  return temp;
}
inline ::xviz::StyleObjectValue* StyleClass::mutable_style() {
  
  if (style_ == NULL) {
    auto* p = CreateMaybeMessage<::xviz::StyleObjectValue>(GetArenaNoVirtual());
    style_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xviz.StyleClass.style)
  return style_;
}
inline void StyleClass::set_allocated_style(::xviz::StyleObjectValue* style) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete style_;
  }
  if (style) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      style = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    
  } else {
    
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleClass.style)
}

// -------------------------------------------------------------------

// StyleObjectValue

// bytes fill_color = 1;
inline void StyleObjectValue::clear_fill_color() {
  fill_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StyleObjectValue::fill_color() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.fill_color)
  return fill_color_.GetNoArena();
}
inline void StyleObjectValue::set_fill_color(const ::std::string& value) {
  
  fill_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.fill_color)
}
#if LANG_CXX11
inline void StyleObjectValue::set_fill_color(::std::string&& value) {
  
  fill_color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.StyleObjectValue.fill_color)
}
#endif
inline void StyleObjectValue::set_fill_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fill_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleObjectValue.fill_color)
}
inline void StyleObjectValue::set_fill_color(const void* value, size_t size) {
  
  fill_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleObjectValue.fill_color)
}
inline ::std::string* StyleObjectValue::mutable_fill_color() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StyleObjectValue.fill_color)
  return fill_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StyleObjectValue::release_fill_color() {
  // @@protoc_insertion_point(field_release:xviz.StyleObjectValue.fill_color)
  
  return fill_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StyleObjectValue::set_allocated_fill_color(::std::string* fill_color) {
  if (fill_color != NULL) {
    
  } else {
    
  }
  fill_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fill_color);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleObjectValue.fill_color)
}

// bytes stroke_color = 2;
inline void StyleObjectValue::clear_stroke_color() {
  stroke_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StyleObjectValue::stroke_color() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.stroke_color)
  return stroke_color_.GetNoArena();
}
inline void StyleObjectValue::set_stroke_color(const ::std::string& value) {
  
  stroke_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.stroke_color)
}
#if LANG_CXX11
inline void StyleObjectValue::set_stroke_color(::std::string&& value) {
  
  stroke_color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.StyleObjectValue.stroke_color)
}
#endif
inline void StyleObjectValue::set_stroke_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stroke_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleObjectValue.stroke_color)
}
inline void StyleObjectValue::set_stroke_color(const void* value, size_t size) {
  
  stroke_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleObjectValue.stroke_color)
}
inline ::std::string* StyleObjectValue::mutable_stroke_color() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StyleObjectValue.stroke_color)
  return stroke_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StyleObjectValue::release_stroke_color() {
  // @@protoc_insertion_point(field_release:xviz.StyleObjectValue.stroke_color)
  
  return stroke_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StyleObjectValue::set_allocated_stroke_color(::std::string* stroke_color) {
  if (stroke_color != NULL) {
    
  } else {
    
  }
  stroke_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stroke_color);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleObjectValue.stroke_color)
}

// float stroke_width = 3;
inline void StyleObjectValue::clear_stroke_width() {
  stroke_width_ = 0;
}
inline float StyleObjectValue::stroke_width() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.stroke_width)
  return stroke_width_;
}
inline void StyleObjectValue::set_stroke_width(float value) {
  
  stroke_width_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.stroke_width)
}

// float radius = 4;
inline void StyleObjectValue::clear_radius() {
  radius_ = 0;
}
inline float StyleObjectValue::radius() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.radius)
  return radius_;
}
inline void StyleObjectValue::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.radius)
}

// float text_size = 5;
inline void StyleObjectValue::clear_text_size() {
  text_size_ = 0;
}
inline float StyleObjectValue::text_size() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.text_size)
  return text_size_;
}
inline void StyleObjectValue::set_text_size(float value) {
  
  text_size_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.text_size)
}

// float text_rotation = 6;
inline void StyleObjectValue::clear_text_rotation() {
  text_rotation_ = 0;
}
inline float StyleObjectValue::text_rotation() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.text_rotation)
  return text_rotation_;
}
inline void StyleObjectValue::set_text_rotation(float value) {
  
  text_rotation_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.text_rotation)
}

// .xviz.TextAnchor text_anchor = 7;
inline void StyleObjectValue::clear_text_anchor() {
  text_anchor_ = 0;
}
inline ::xviz::TextAnchor StyleObjectValue::text_anchor() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.text_anchor)
  return static_cast< ::xviz::TextAnchor >(text_anchor_);
}
inline void StyleObjectValue::set_text_anchor(::xviz::TextAnchor value) {
  
  text_anchor_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.text_anchor)
}

// .xviz.TextAlignmentBaseline text_baseline = 8;
inline void StyleObjectValue::clear_text_baseline() {
  text_baseline_ = 0;
}
inline ::xviz::TextAlignmentBaseline StyleObjectValue::text_baseline() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.text_baseline)
  return static_cast< ::xviz::TextAlignmentBaseline >(text_baseline_);
}
inline void StyleObjectValue::set_text_baseline(::xviz::TextAlignmentBaseline value) {
  
  text_baseline_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.text_baseline)
}

// float height = 9;
inline void StyleObjectValue::clear_height() {
  height_ = 0;
}
inline float StyleObjectValue::height() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.height)
  return height_;
}
inline void StyleObjectValue::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.height)
}

// -------------------------------------------------------------------

// StyleStreamValue

// bytes fill_color = 1;
inline void StyleStreamValue::clear_fill_color() {
  fill_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StyleStreamValue::fill_color() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.fill_color)
  return fill_color_.GetNoArena();
}
inline void StyleStreamValue::set_fill_color(const ::std::string& value) {
  
  fill_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.fill_color)
}
#if LANG_CXX11
inline void StyleStreamValue::set_fill_color(::std::string&& value) {
  
  fill_color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.StyleStreamValue.fill_color)
}
#endif
inline void StyleStreamValue::set_fill_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fill_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleStreamValue.fill_color)
}
inline void StyleStreamValue::set_fill_color(const void* value, size_t size) {
  
  fill_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleStreamValue.fill_color)
}
inline ::std::string* StyleStreamValue::mutable_fill_color() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StyleStreamValue.fill_color)
  return fill_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StyleStreamValue::release_fill_color() {
  // @@protoc_insertion_point(field_release:xviz.StyleStreamValue.fill_color)
  
  return fill_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StyleStreamValue::set_allocated_fill_color(::std::string* fill_color) {
  if (fill_color != NULL) {
    
  } else {
    
  }
  fill_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fill_color);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleStreamValue.fill_color)
}

// bytes stroke_color = 2;
inline void StyleStreamValue::clear_stroke_color() {
  stroke_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StyleStreamValue::stroke_color() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.stroke_color)
  return stroke_color_.GetNoArena();
}
inline void StyleStreamValue::set_stroke_color(const ::std::string& value) {
  
  stroke_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.stroke_color)
}
#if LANG_CXX11
inline void StyleStreamValue::set_stroke_color(::std::string&& value) {
  
  stroke_color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.StyleStreamValue.stroke_color)
}
#endif
inline void StyleStreamValue::set_stroke_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stroke_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleStreamValue.stroke_color)
}
inline void StyleStreamValue::set_stroke_color(const void* value, size_t size) {
  
  stroke_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleStreamValue.stroke_color)
}
inline ::std::string* StyleStreamValue::mutable_stroke_color() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StyleStreamValue.stroke_color)
  return stroke_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StyleStreamValue::release_stroke_color() {
  // @@protoc_insertion_point(field_release:xviz.StyleStreamValue.stroke_color)
  
  return stroke_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StyleStreamValue::set_allocated_stroke_color(::std::string* stroke_color) {
  if (stroke_color != NULL) {
    
  } else {
    
  }
  stroke_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stroke_color);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleStreamValue.stroke_color)
}

// float stroke_width = 3;
inline void StyleStreamValue::clear_stroke_width() {
  stroke_width_ = 0;
}
inline float StyleStreamValue::stroke_width() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.stroke_width)
  return stroke_width_;
}
inline void StyleStreamValue::set_stroke_width(float value) {
  
  stroke_width_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.stroke_width)
}

// float radius = 4;
inline void StyleStreamValue::clear_radius() {
  radius_ = 0;
}
inline float StyleStreamValue::radius() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.radius)
  return radius_;
}
inline void StyleStreamValue::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.radius)
}

// float text_size = 5;
inline void StyleStreamValue::clear_text_size() {
  text_size_ = 0;
}
inline float StyleStreamValue::text_size() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.text_size)
  return text_size_;
}
inline void StyleStreamValue::set_text_size(float value) {
  
  text_size_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.text_size)
}

// float text_rotation = 6;
inline void StyleStreamValue::clear_text_rotation() {
  text_rotation_ = 0;
}
inline float StyleStreamValue::text_rotation() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.text_rotation)
  return text_rotation_;
}
inline void StyleStreamValue::set_text_rotation(float value) {
  
  text_rotation_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.text_rotation)
}

// .xviz.TextAnchor text_anchor = 7;
inline void StyleStreamValue::clear_text_anchor() {
  text_anchor_ = 0;
}
inline ::xviz::TextAnchor StyleStreamValue::text_anchor() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.text_anchor)
  return static_cast< ::xviz::TextAnchor >(text_anchor_);
}
inline void StyleStreamValue::set_text_anchor(::xviz::TextAnchor value) {
  
  text_anchor_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.text_anchor)
}

// .xviz.TextAlignmentBaseline text_baseline = 8;
inline void StyleStreamValue::clear_text_baseline() {
  text_baseline_ = 0;
}
inline ::xviz::TextAlignmentBaseline StyleStreamValue::text_baseline() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.text_baseline)
  return static_cast< ::xviz::TextAlignmentBaseline >(text_baseline_);
}
inline void StyleStreamValue::set_text_baseline(::xviz::TextAlignmentBaseline value) {
  
  text_baseline_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.text_baseline)
}

// float height = 9;
inline void StyleStreamValue::clear_height() {
  height_ = 0;
}
inline float StyleStreamValue::height() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.height)
  return height_;
}
inline void StyleStreamValue::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.height)
}

// uint32 radius_min_pixels = 10;
inline void StyleStreamValue::clear_radius_min_pixels() {
  radius_min_pixels_ = 0u;
}
inline ::google::protobuf::uint32 StyleStreamValue::radius_min_pixels() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.radius_min_pixels)
  return radius_min_pixels_;
}
inline void StyleStreamValue::set_radius_min_pixels(::google::protobuf::uint32 value) {
  
  radius_min_pixels_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.radius_min_pixels)
}

// uint32 radius_max_pixels = 11;
inline void StyleStreamValue::clear_radius_max_pixels() {
  radius_max_pixels_ = 0u;
}
inline ::google::protobuf::uint32 StyleStreamValue::radius_max_pixels() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.radius_max_pixels)
  return radius_max_pixels_;
}
inline void StyleStreamValue::set_radius_max_pixels(::google::protobuf::uint32 value) {
  
  radius_max_pixels_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.radius_max_pixels)
}

// uint32 stroke_width_min_pixels = 12;
inline void StyleStreamValue::clear_stroke_width_min_pixels() {
  stroke_width_min_pixels_ = 0u;
}
inline ::google::protobuf::uint32 StyleStreamValue::stroke_width_min_pixels() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.stroke_width_min_pixels)
  return stroke_width_min_pixels_;
}
inline void StyleStreamValue::set_stroke_width_min_pixels(::google::protobuf::uint32 value) {
  
  stroke_width_min_pixels_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.stroke_width_min_pixels)
}

// uint32 stroke_width_max_pixels = 13;
inline void StyleStreamValue::clear_stroke_width_max_pixels() {
  stroke_width_max_pixels_ = 0u;
}
inline ::google::protobuf::uint32 StyleStreamValue::stroke_width_max_pixels() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.stroke_width_max_pixels)
  return stroke_width_max_pixels_;
}
inline void StyleStreamValue::set_stroke_width_max_pixels(::google::protobuf::uint32 value) {
  
  stroke_width_max_pixels_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.stroke_width_max_pixels)
}

// float opacity = 14;
inline void StyleStreamValue::clear_opacity() {
  opacity_ = 0;
}
inline float StyleStreamValue::opacity() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.opacity)
  return opacity_;
}
inline void StyleStreamValue::set_opacity(float value) {
  
  opacity_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.opacity)
}

// bool stroked = 15;
inline void StyleStreamValue::clear_stroked() {
  stroked_ = false;
}
inline bool StyleStreamValue::stroked() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.stroked)
  return stroked_;
}
inline void StyleStreamValue::set_stroked(bool value) {
  
  stroked_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.stroked)
}

// bool filled = 16;
inline void StyleStreamValue::clear_filled() {
  filled_ = false;
}
inline bool StyleStreamValue::filled() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.filled)
  return filled_;
}
inline void StyleStreamValue::set_filled(bool value) {
  
  filled_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.filled)
}

// bool extruded = 17;
inline void StyleStreamValue::clear_extruded() {
  extruded_ = false;
}
inline bool StyleStreamValue::extruded() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.extruded)
  return extruded_;
}
inline void StyleStreamValue::set_extruded(bool value) {
  
  extruded_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.extruded)
}

// uint32 radius_pixels = 18;
inline void StyleStreamValue::clear_radius_pixels() {
  radius_pixels_ = 0u;
}
inline ::google::protobuf::uint32 StyleStreamValue::radius_pixels() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.radius_pixels)
  return radius_pixels_;
}
inline void StyleStreamValue::set_radius_pixels(::google::protobuf::uint32 value) {
  
  radius_pixels_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.radius_pixels)
}

// uint32 font_weight = 19;
inline void StyleStreamValue::clear_font_weight() {
  font_weight_ = 0u;
}
inline ::google::protobuf::uint32 StyleStreamValue::font_weight() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.font_weight)
  return font_weight_;
}
inline void StyleStreamValue::set_font_weight(::google::protobuf::uint32 value) {
  
  font_weight_ = value;
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.font_weight)
}

// string font_family = 20;
inline void StyleStreamValue::clear_font_family() {
  font_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StyleStreamValue::font_family() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.font_family)
  return font_family_.GetNoArena();
}
inline void StyleStreamValue::set_font_family(const ::std::string& value) {
  
  font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.font_family)
}
#if LANG_CXX11
inline void StyleStreamValue::set_font_family(::std::string&& value) {
  
  font_family_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.StyleStreamValue.font_family)
}
#endif
inline void StyleStreamValue::set_font_family(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleStreamValue.font_family)
}
inline void StyleStreamValue::set_font_family(const char* value, size_t size) {
  
  font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleStreamValue.font_family)
}
inline ::std::string* StyleStreamValue::mutable_font_family() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StyleStreamValue.font_family)
  return font_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StyleStreamValue::release_font_family() {
  // @@protoc_insertion_point(field_release:xviz.StyleStreamValue.font_family)
  
  return font_family_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StyleStreamValue::set_allocated_font_family(::std::string* font_family) {
  if (font_family != NULL) {
    
  } else {
    
  }
  font_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), font_family);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleStreamValue.font_family)
}

// string point_cloud_mode = 21;
inline void StyleStreamValue::clear_point_cloud_mode() {
  point_cloud_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StyleStreamValue::point_cloud_mode() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.point_cloud_mode)
  return point_cloud_mode_.GetNoArena();
}
inline void StyleStreamValue::set_point_cloud_mode(const ::std::string& value) {
  
  point_cloud_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.point_cloud_mode)
}
#if LANG_CXX11
inline void StyleStreamValue::set_point_cloud_mode(::std::string&& value) {
  
  point_cloud_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.StyleStreamValue.point_cloud_mode)
}
#endif
inline void StyleStreamValue::set_point_cloud_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  point_cloud_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleStreamValue.point_cloud_mode)
}
inline void StyleStreamValue::set_point_cloud_mode(const char* value, size_t size) {
  
  point_cloud_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleStreamValue.point_cloud_mode)
}
inline ::std::string* StyleStreamValue::mutable_point_cloud_mode() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StyleStreamValue.point_cloud_mode)
  return point_cloud_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StyleStreamValue::release_point_cloud_mode() {
  // @@protoc_insertion_point(field_release:xviz.StyleStreamValue.point_cloud_mode)
  
  return point_cloud_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StyleStreamValue::set_allocated_point_cloud_mode(::std::string* point_cloud_mode) {
  if (point_cloud_mode != NULL) {
    
  } else {
    
  }
  point_cloud_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), point_cloud_mode);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleStreamValue.point_cloud_mode)
}

// -------------------------------------------------------------------

// Color

// bytes values = 1;
inline void Color::clear_values() {
  values_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Color::values() const {
  // @@protoc_insertion_point(field_get:xviz.Color.values)
  return values_.GetNoArena();
}
inline void Color::set_values(const ::std::string& value) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Color.values)
}
#if LANG_CXX11
inline void Color::set_values(::std::string&& value) {
  
  values_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.Color.values)
}
#endif
inline void Color::set_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Color.values)
}
inline void Color::set_values(const void* value, size_t size) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Color.values)
}
inline ::std::string* Color::mutable_values() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Color.values)
  return values_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Color::release_values() {
  // @@protoc_insertion_point(field_release:xviz.Color.values)
  
  return values_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Color::set_allocated_values(::std::string* values) {
  if (values != NULL) {
    
  } else {
    
  }
  values_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), values);
  // @@protoc_insertion_point(field_set_allocated:xviz.Color.values)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xviz::TextAnchor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::TextAnchor>() {
  return ::xviz::TextAnchor_descriptor();
}
template <> struct is_proto_enum< ::xviz::TextAlignmentBaseline> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::TextAlignmentBaseline>() {
  return ::xviz::TextAlignmentBaseline_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_style_2eproto
