// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primitives.proto

#ifndef PROTOBUF_INCLUDED_primitives_2eproto
#define PROTOBUF_INCLUDED_primitives_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
#include "style.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_primitives_2eproto 

namespace protobuf_primitives_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_primitives_2eproto
namespace xviz {
class Circle;
class CircleDefaultTypeInternal;
extern CircleDefaultTypeInternal _Circle_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Polyline;
class PolylineDefaultTypeInternal;
extern PolylineDefaultTypeInternal _Polyline_default_instance_;
class PrimitiveBase;
class PrimitiveBaseDefaultTypeInternal;
extern PrimitiveBaseDefaultTypeInternal _PrimitiveBase_default_instance_;
class Stadium;
class StadiumDefaultTypeInternal;
extern StadiumDefaultTypeInternal _Stadium_default_instance_;
class Text;
class TextDefaultTypeInternal;
extern TextDefaultTypeInternal _Text_default_instance_;
}  // namespace xviz
namespace google {
namespace protobuf {
template<> ::xviz::Circle* Arena::CreateMaybeMessage<::xviz::Circle>(Arena*);
template<> ::xviz::Image* Arena::CreateMaybeMessage<::xviz::Image>(Arena*);
template<> ::xviz::Point* Arena::CreateMaybeMessage<::xviz::Point>(Arena*);
template<> ::xviz::Polygon* Arena::CreateMaybeMessage<::xviz::Polygon>(Arena*);
template<> ::xviz::Polyline* Arena::CreateMaybeMessage<::xviz::Polyline>(Arena*);
template<> ::xviz::PrimitiveBase* Arena::CreateMaybeMessage<::xviz::PrimitiveBase>(Arena*);
template<> ::xviz::Stadium* Arena::CreateMaybeMessage<::xviz::Stadium>(Arena*);
template<> ::xviz::Text* Arena::CreateMaybeMessage<::xviz::Text>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace xviz {

// ===================================================================

class PrimitiveBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.PrimitiveBase) */ {
 public:
  PrimitiveBase();
  virtual ~PrimitiveBase();

  PrimitiveBase(const PrimitiveBase& from);

  inline PrimitiveBase& operator=(const PrimitiveBase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrimitiveBase(PrimitiveBase&& from) noexcept
    : PrimitiveBase() {
    *this = ::std::move(from);
  }

  inline PrimitiveBase& operator=(PrimitiveBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrimitiveBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrimitiveBase* internal_default_instance() {
    return reinterpret_cast<const PrimitiveBase*>(
               &_PrimitiveBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PrimitiveBase* other);
  friend void swap(PrimitiveBase& a, PrimitiveBase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrimitiveBase* New() const final {
    return CreateMaybeMessage<PrimitiveBase>(NULL);
  }

  PrimitiveBase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrimitiveBase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrimitiveBase& from);
  void MergeFrom(const PrimitiveBase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimitiveBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string classes = 2;
  int classes_size() const;
  void clear_classes();
  static const int kClassesFieldNumber = 2;
  const ::std::string& classes(int index) const;
  ::std::string* mutable_classes(int index);
  void set_classes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_classes(int index, ::std::string&& value);
  #endif
  void set_classes(int index, const char* value);
  void set_classes(int index, const char* value, size_t size);
  ::std::string* add_classes();
  void add_classes(const ::std::string& value);
  #if LANG_CXX11
  void add_classes(::std::string&& value);
  #endif
  void add_classes(const char* value);
  void add_classes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& classes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_classes();

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // .xviz.StyleObjectValue style = 3;
  bool has_style() const;
  void clear_style();
  static const int kStyleFieldNumber = 3;
  private:
  const ::xviz::StyleObjectValue& _internal_style() const;
  public:
  const ::xviz::StyleObjectValue& style() const;
  ::xviz::StyleObjectValue* release_style();
  ::xviz::StyleObjectValue* mutable_style();
  void set_allocated_style(::xviz::StyleObjectValue* style);

  // @@protoc_insertion_point(class_scope:xviz.PrimitiveBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> classes_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  ::xviz::StyleObjectValue* style_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_primitives_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Circle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Circle) */ {
 public:
  Circle();
  virtual ~Circle();

  Circle(const Circle& from);

  inline Circle& operator=(const Circle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Circle(Circle&& from) noexcept
    : Circle() {
    *this = ::std::move(from);
  }

  inline Circle& operator=(Circle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Circle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Circle* internal_default_instance() {
    return reinterpret_cast<const Circle*>(
               &_Circle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Circle* other);
  friend void swap(Circle& a, Circle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Circle* New() const final {
    return CreateMaybeMessage<Circle>(NULL);
  }

  Circle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Circle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Circle& from);
  void MergeFrom(const Circle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Circle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float center = 2;
  int center_size() const;
  void clear_center();
  static const int kCenterFieldNumber = 2;
  float center(int index) const;
  void set_center(int index, float value);
  void add_center(float value);
  const ::google::protobuf::RepeatedField< float >&
      center() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_center();

  // .xviz.PrimitiveBase base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  private:
  const ::xviz::PrimitiveBase& _internal_base() const;
  public:
  const ::xviz::PrimitiveBase& base() const;
  ::xviz::PrimitiveBase* release_base();
  ::xviz::PrimitiveBase* mutable_base();
  void set_allocated_base(::xviz::PrimitiveBase* base);

  // float radius = 3;
  void clear_radius();
  static const int kRadiusFieldNumber = 3;
  float radius() const;
  void set_radius(float value);

  // @@protoc_insertion_point(class_scope:xviz.Circle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > center_;
  mutable int _center_cached_byte_size_;
  ::xviz::PrimitiveBase* base_;
  float radius_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_primitives_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(NULL);
  }

  Image* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float position = 2;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  float position(int index) const;
  void set_position(int index, float value);
  void add_position(float value);
  const ::google::protobuf::RepeatedField< float >&
      position() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_position();

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .xviz.PrimitiveBase base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  private:
  const ::xviz::PrimitiveBase& _internal_base() const;
  public:
  const ::xviz::PrimitiveBase& base() const;
  ::xviz::PrimitiveBase* release_base();
  ::xviz::PrimitiveBase* mutable_base();
  void set_allocated_base(::xviz::PrimitiveBase* base);

  // uint32 width_px = 4;
  void clear_width_px();
  static const int kWidthPxFieldNumber = 4;
  ::google::protobuf::uint32 width_px() const;
  void set_width_px(::google::protobuf::uint32 value);

  // uint32 height_px = 5;
  void clear_height_px();
  static const int kHeightPxFieldNumber = 5;
  ::google::protobuf::uint32 height_px() const;
  void set_height_px(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xviz.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > position_;
  mutable int _position_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::xviz::PrimitiveBase* base_;
  ::google::protobuf::uint32 width_px_;
  ::google::protobuf::uint32 height_px_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_primitives_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(NULL);
  }

  Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float points = 2;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 2;
  float points(int index) const;
  void set_points(int index, float value);
  void add_points(float value);
  const ::google::protobuf::RepeatedField< float >&
      points() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_points();

  // bytes colors = 3;
  void clear_colors();
  static const int kColorsFieldNumber = 3;
  const ::std::string& colors() const;
  void set_colors(const ::std::string& value);
  #if LANG_CXX11
  void set_colors(::std::string&& value);
  #endif
  void set_colors(const char* value);
  void set_colors(const void* value, size_t size);
  ::std::string* mutable_colors();
  ::std::string* release_colors();
  void set_allocated_colors(::std::string* colors);

  // .xviz.PrimitiveBase base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  private:
  const ::xviz::PrimitiveBase& _internal_base() const;
  public:
  const ::xviz::PrimitiveBase& base() const;
  ::xviz::PrimitiveBase* release_base();
  ::xviz::PrimitiveBase* mutable_base();
  void set_allocated_base(::xviz::PrimitiveBase* base);

  // @@protoc_insertion_point(class_scope:xviz.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > points_;
  mutable int _points_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr colors_;
  ::xviz::PrimitiveBase* base_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_primitives_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Polygon* other);
  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(NULL);
  }

  Polygon* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float vertices = 2;
  int vertices_size() const;
  void clear_vertices();
  static const int kVerticesFieldNumber = 2;
  float vertices(int index) const;
  void set_vertices(int index, float value);
  void add_vertices(float value);
  const ::google::protobuf::RepeatedField< float >&
      vertices() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_vertices();

  // .xviz.PrimitiveBase base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  private:
  const ::xviz::PrimitiveBase& _internal_base() const;
  public:
  const ::xviz::PrimitiveBase& base() const;
  ::xviz::PrimitiveBase* release_base();
  ::xviz::PrimitiveBase* mutable_base();
  void set_allocated_base(::xviz::PrimitiveBase* base);

  // @@protoc_insertion_point(class_scope:xviz.Polygon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > vertices_;
  mutable int _vertices_cached_byte_size_;
  ::xviz::PrimitiveBase* base_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_primitives_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Polyline : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Polyline) */ {
 public:
  Polyline();
  virtual ~Polyline();

  Polyline(const Polyline& from);

  inline Polyline& operator=(const Polyline& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Polyline(Polyline&& from) noexcept
    : Polyline() {
    *this = ::std::move(from);
  }

  inline Polyline& operator=(Polyline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Polyline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polyline* internal_default_instance() {
    return reinterpret_cast<const Polyline*>(
               &_Polyline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Polyline* other);
  friend void swap(Polyline& a, Polyline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Polyline* New() const final {
    return CreateMaybeMessage<Polyline>(NULL);
  }

  Polyline* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Polyline>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Polyline& from);
  void MergeFrom(const Polyline& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polyline* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float vertices = 2;
  int vertices_size() const;
  void clear_vertices();
  static const int kVerticesFieldNumber = 2;
  float vertices(int index) const;
  void set_vertices(int index, float value);
  void add_vertices(float value);
  const ::google::protobuf::RepeatedField< float >&
      vertices() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_vertices();

  // bytes colors = 3;
  void clear_colors();
  static const int kColorsFieldNumber = 3;
  const ::std::string& colors() const;
  void set_colors(const ::std::string& value);
  #if LANG_CXX11
  void set_colors(::std::string&& value);
  #endif
  void set_colors(const char* value);
  void set_colors(const void* value, size_t size);
  ::std::string* mutable_colors();
  ::std::string* release_colors();
  void set_allocated_colors(::std::string* colors);

  // .xviz.PrimitiveBase base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  private:
  const ::xviz::PrimitiveBase& _internal_base() const;
  public:
  const ::xviz::PrimitiveBase& base() const;
  ::xviz::PrimitiveBase* release_base();
  ::xviz::PrimitiveBase* mutable_base();
  void set_allocated_base(::xviz::PrimitiveBase* base);

  // @@protoc_insertion_point(class_scope:xviz.Polyline)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > vertices_;
  mutable int _vertices_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr colors_;
  ::xviz::PrimitiveBase* base_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_primitives_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Stadium : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Stadium) */ {
 public:
  Stadium();
  virtual ~Stadium();

  Stadium(const Stadium& from);

  inline Stadium& operator=(const Stadium& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stadium(Stadium&& from) noexcept
    : Stadium() {
    *this = ::std::move(from);
  }

  inline Stadium& operator=(Stadium&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Stadium& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stadium* internal_default_instance() {
    return reinterpret_cast<const Stadium*>(
               &_Stadium_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Stadium* other);
  friend void swap(Stadium& a, Stadium& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stadium* New() const final {
    return CreateMaybeMessage<Stadium>(NULL);
  }

  Stadium* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Stadium>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Stadium& from);
  void MergeFrom(const Stadium& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stadium* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float start = 2;
  int start_size() const;
  void clear_start();
  static const int kStartFieldNumber = 2;
  float start(int index) const;
  void set_start(int index, float value);
  void add_start(float value);
  const ::google::protobuf::RepeatedField< float >&
      start() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_start();

  // repeated float end = 3;
  int end_size() const;
  void clear_end();
  static const int kEndFieldNumber = 3;
  float end(int index) const;
  void set_end(int index, float value);
  void add_end(float value);
  const ::google::protobuf::RepeatedField< float >&
      end() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_end();

  // .xviz.PrimitiveBase base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  private:
  const ::xviz::PrimitiveBase& _internal_base() const;
  public:
  const ::xviz::PrimitiveBase& base() const;
  ::xviz::PrimitiveBase* release_base();
  ::xviz::PrimitiveBase* mutable_base();
  void set_allocated_base(::xviz::PrimitiveBase* base);

  // float radius = 4;
  void clear_radius();
  static const int kRadiusFieldNumber = 4;
  float radius() const;
  void set_radius(float value);

  // @@protoc_insertion_point(class_scope:xviz.Stadium)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > start_;
  mutable int _start_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > end_;
  mutable int _end_cached_byte_size_;
  ::xviz::PrimitiveBase* base_;
  float radius_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_primitives_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Text : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Text) */ {
 public:
  Text();
  virtual ~Text();

  Text(const Text& from);

  inline Text& operator=(const Text& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Text(Text&& from) noexcept
    : Text() {
    *this = ::std::move(from);
  }

  inline Text& operator=(Text&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Text& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Text* internal_default_instance() {
    return reinterpret_cast<const Text*>(
               &_Text_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Text* other);
  friend void swap(Text& a, Text& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Text* New() const final {
    return CreateMaybeMessage<Text>(NULL);
  }

  Text* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Text>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Text& from);
  void MergeFrom(const Text& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Text* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float position = 2;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  float position(int index) const;
  void set_position(int index, float value);
  void add_position(float value);
  const ::google::protobuf::RepeatedField< float >&
      position() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_position();

  // string text = 3;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .xviz.PrimitiveBase base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  private:
  const ::xviz::PrimitiveBase& _internal_base() const;
  public:
  const ::xviz::PrimitiveBase& base() const;
  ::xviz::PrimitiveBase* release_base();
  ::xviz::PrimitiveBase* mutable_base();
  void set_allocated_base(::xviz::PrimitiveBase* base);

  // @@protoc_insertion_point(class_scope:xviz.Text)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > position_;
  mutable int _position_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::xviz::PrimitiveBase* base_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_primitives_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrimitiveBase

// string object_id = 1;
inline void PrimitiveBase::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrimitiveBase::object_id() const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveBase.object_id)
  return object_id_.GetNoArena();
}
inline void PrimitiveBase::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.PrimitiveBase.object_id)
}
#if LANG_CXX11
inline void PrimitiveBase::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.PrimitiveBase.object_id)
}
#endif
inline void PrimitiveBase::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.PrimitiveBase.object_id)
}
inline void PrimitiveBase::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.PrimitiveBase.object_id)
}
inline ::std::string* PrimitiveBase::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveBase.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrimitiveBase::release_object_id() {
  // @@protoc_insertion_point(field_release:xviz.PrimitiveBase.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrimitiveBase::set_allocated_object_id(::std::string* object_id) {
  if (object_id != NULL) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:xviz.PrimitiveBase.object_id)
}

// repeated string classes = 2;
inline int PrimitiveBase::classes_size() const {
  return classes_.size();
}
inline void PrimitiveBase::clear_classes() {
  classes_.Clear();
}
inline const ::std::string& PrimitiveBase::classes(int index) const {
  // @@protoc_insertion_point(field_get:xviz.PrimitiveBase.classes)
  return classes_.Get(index);
}
inline ::std::string* PrimitiveBase::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveBase.classes)
  return classes_.Mutable(index);
}
inline void PrimitiveBase::set_classes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.PrimitiveBase.classes)
  classes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PrimitiveBase::set_classes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:xviz.PrimitiveBase.classes)
  classes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PrimitiveBase::set_classes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  classes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.PrimitiveBase.classes)
}
inline void PrimitiveBase::set_classes(int index, const char* value, size_t size) {
  classes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.PrimitiveBase.classes)
}
inline ::std::string* PrimitiveBase::add_classes() {
  // @@protoc_insertion_point(field_add_mutable:xviz.PrimitiveBase.classes)
  return classes_.Add();
}
inline void PrimitiveBase::add_classes(const ::std::string& value) {
  classes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.PrimitiveBase.classes)
}
#if LANG_CXX11
inline void PrimitiveBase::add_classes(::std::string&& value) {
  classes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xviz.PrimitiveBase.classes)
}
#endif
inline void PrimitiveBase::add_classes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  classes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.PrimitiveBase.classes)
}
inline void PrimitiveBase::add_classes(const char* value, size_t size) {
  classes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.PrimitiveBase.classes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PrimitiveBase::classes() const {
  // @@protoc_insertion_point(field_list:xviz.PrimitiveBase.classes)
  return classes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PrimitiveBase::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:xviz.PrimitiveBase.classes)
  return &classes_;
}

// .xviz.StyleObjectValue style = 3;
inline bool PrimitiveBase::has_style() const {
  return this != internal_default_instance() && style_ != NULL;
}
inline const ::xviz::StyleObjectValue& PrimitiveBase::_internal_style() const {
  return *style_;
}
inline const ::xviz::StyleObjectValue& PrimitiveBase::style() const {
  const ::xviz::StyleObjectValue* p = style_;
  // @@protoc_insertion_point(field_get:xviz.PrimitiveBase.style)
  return p != NULL ? *p : *reinterpret_cast<const ::xviz::StyleObjectValue*>(
      &::xviz::_StyleObjectValue_default_instance_);
}
inline ::xviz::StyleObjectValue* PrimitiveBase::release_style() {
  // @@protoc_insertion_point(field_release:xviz.PrimitiveBase.style)
  
  ::xviz::StyleObjectValue* temp = style_;
  style_ = NULL;
  return temp;
}
inline ::xviz::StyleObjectValue* PrimitiveBase::mutable_style() {
  
  if (style_ == NULL) {
    auto* p = CreateMaybeMessage<::xviz::StyleObjectValue>(GetArenaNoVirtual());
    style_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xviz.PrimitiveBase.style)
  return style_;
}
inline void PrimitiveBase::set_allocated_style(::xviz::StyleObjectValue* style) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(style_);
  }
  if (style) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      style = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    
  } else {
    
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:xviz.PrimitiveBase.style)
}

// -------------------------------------------------------------------

// Circle

// .xviz.PrimitiveBase base = 1;
inline bool Circle::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline void Circle::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
inline const ::xviz::PrimitiveBase& Circle::_internal_base() const {
  return *base_;
}
inline const ::xviz::PrimitiveBase& Circle::base() const {
  const ::xviz::PrimitiveBase* p = base_;
  // @@protoc_insertion_point(field_get:xviz.Circle.base)
  return p != NULL ? *p : *reinterpret_cast<const ::xviz::PrimitiveBase*>(
      &::xviz::_PrimitiveBase_default_instance_);
}
inline ::xviz::PrimitiveBase* Circle::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Circle.base)
  
  ::xviz::PrimitiveBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::xviz::PrimitiveBase* Circle::mutable_base() {
  
  if (base_ == NULL) {
    auto* p = CreateMaybeMessage<::xviz::PrimitiveBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Circle.base)
  return base_;
}
inline void Circle::set_allocated_base(::xviz::PrimitiveBase* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_;
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:xviz.Circle.base)
}

// repeated float center = 2;
inline int Circle::center_size() const {
  return center_.size();
}
inline void Circle::clear_center() {
  center_.Clear();
}
inline float Circle::center(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Circle.center)
  return center_.Get(index);
}
inline void Circle::set_center(int index, float value) {
  center_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Circle.center)
}
inline void Circle::add_center(float value) {
  center_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Circle.center)
}
inline const ::google::protobuf::RepeatedField< float >&
Circle::center() const {
  // @@protoc_insertion_point(field_list:xviz.Circle.center)
  return center_;
}
inline ::google::protobuf::RepeatedField< float >*
Circle::mutable_center() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Circle.center)
  return &center_;
}

// float radius = 3;
inline void Circle::clear_radius() {
  radius_ = 0;
}
inline float Circle::radius() const {
  // @@protoc_insertion_point(field_get:xviz.Circle.radius)
  return radius_;
}
inline void Circle::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:xviz.Circle.radius)
}

// -------------------------------------------------------------------

// Image

// .xviz.PrimitiveBase base = 1;
inline bool Image::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline void Image::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
inline const ::xviz::PrimitiveBase& Image::_internal_base() const {
  return *base_;
}
inline const ::xviz::PrimitiveBase& Image::base() const {
  const ::xviz::PrimitiveBase* p = base_;
  // @@protoc_insertion_point(field_get:xviz.Image.base)
  return p != NULL ? *p : *reinterpret_cast<const ::xviz::PrimitiveBase*>(
      &::xviz::_PrimitiveBase_default_instance_);
}
inline ::xviz::PrimitiveBase* Image::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Image.base)
  
  ::xviz::PrimitiveBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::xviz::PrimitiveBase* Image::mutable_base() {
  
  if (base_ == NULL) {
    auto* p = CreateMaybeMessage<::xviz::PrimitiveBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Image.base)
  return base_;
}
inline void Image::set_allocated_base(::xviz::PrimitiveBase* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_;
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:xviz.Image.base)
}

// repeated float position = 2;
inline int Image::position_size() const {
  return position_.size();
}
inline void Image::clear_position() {
  position_.Clear();
}
inline float Image::position(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Image.position)
  return position_.Get(index);
}
inline void Image::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Image.position)
}
inline void Image::add_position(float value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Image.position)
}
inline const ::google::protobuf::RepeatedField< float >&
Image::position() const {
  // @@protoc_insertion_point(field_list:xviz.Image.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< float >*
Image::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Image.position)
  return &position_;
}

// bytes data = 3;
inline void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:xviz.Image.data)
  return data_.GetNoArena();
}
inline void Image::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Image.data)
}
#if LANG_CXX11
inline void Image::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.Image.data)
}
#endif
inline void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Image.data)
}
inline void Image::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Image.data)
}
inline ::std::string* Image::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:xviz.Image.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:xviz.Image.data)
}

// uint32 width_px = 4;
inline void Image::clear_width_px() {
  width_px_ = 0u;
}
inline ::google::protobuf::uint32 Image::width_px() const {
  // @@protoc_insertion_point(field_get:xviz.Image.width_px)
  return width_px_;
}
inline void Image::set_width_px(::google::protobuf::uint32 value) {
  
  width_px_ = value;
  // @@protoc_insertion_point(field_set:xviz.Image.width_px)
}

// uint32 height_px = 5;
inline void Image::clear_height_px() {
  height_px_ = 0u;
}
inline ::google::protobuf::uint32 Image::height_px() const {
  // @@protoc_insertion_point(field_get:xviz.Image.height_px)
  return height_px_;
}
inline void Image::set_height_px(::google::protobuf::uint32 value) {
  
  height_px_ = value;
  // @@protoc_insertion_point(field_set:xviz.Image.height_px)
}

// -------------------------------------------------------------------

// Point

// .xviz.PrimitiveBase base = 1;
inline bool Point::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline void Point::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
inline const ::xviz::PrimitiveBase& Point::_internal_base() const {
  return *base_;
}
inline const ::xviz::PrimitiveBase& Point::base() const {
  const ::xviz::PrimitiveBase* p = base_;
  // @@protoc_insertion_point(field_get:xviz.Point.base)
  return p != NULL ? *p : *reinterpret_cast<const ::xviz::PrimitiveBase*>(
      &::xviz::_PrimitiveBase_default_instance_);
}
inline ::xviz::PrimitiveBase* Point::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Point.base)
  
  ::xviz::PrimitiveBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::xviz::PrimitiveBase* Point::mutable_base() {
  
  if (base_ == NULL) {
    auto* p = CreateMaybeMessage<::xviz::PrimitiveBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Point.base)
  return base_;
}
inline void Point::set_allocated_base(::xviz::PrimitiveBase* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_;
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:xviz.Point.base)
}

// repeated float points = 2;
inline int Point::points_size() const {
  return points_.size();
}
inline void Point::clear_points() {
  points_.Clear();
}
inline float Point::points(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Point.points)
  return points_.Get(index);
}
inline void Point::set_points(int index, float value) {
  points_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Point.points)
}
inline void Point::add_points(float value) {
  points_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Point.points)
}
inline const ::google::protobuf::RepeatedField< float >&
Point::points() const {
  // @@protoc_insertion_point(field_list:xviz.Point.points)
  return points_;
}
inline ::google::protobuf::RepeatedField< float >*
Point::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Point.points)
  return &points_;
}

// bytes colors = 3;
inline void Point::clear_colors() {
  colors_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Point::colors() const {
  // @@protoc_insertion_point(field_get:xviz.Point.colors)
  return colors_.GetNoArena();
}
inline void Point::set_colors(const ::std::string& value) {
  
  colors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Point.colors)
}
#if LANG_CXX11
inline void Point::set_colors(::std::string&& value) {
  
  colors_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.Point.colors)
}
#endif
inline void Point::set_colors(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  colors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Point.colors)
}
inline void Point::set_colors(const void* value, size_t size) {
  
  colors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Point.colors)
}
inline ::std::string* Point::mutable_colors() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Point.colors)
  return colors_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Point::release_colors() {
  // @@protoc_insertion_point(field_release:xviz.Point.colors)
  
  return colors_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Point::set_allocated_colors(::std::string* colors) {
  if (colors != NULL) {
    
  } else {
    
  }
  colors_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), colors);
  // @@protoc_insertion_point(field_set_allocated:xviz.Point.colors)
}

// -------------------------------------------------------------------

// Polygon

// .xviz.PrimitiveBase base = 1;
inline bool Polygon::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline void Polygon::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
inline const ::xviz::PrimitiveBase& Polygon::_internal_base() const {
  return *base_;
}
inline const ::xviz::PrimitiveBase& Polygon::base() const {
  const ::xviz::PrimitiveBase* p = base_;
  // @@protoc_insertion_point(field_get:xviz.Polygon.base)
  return p != NULL ? *p : *reinterpret_cast<const ::xviz::PrimitiveBase*>(
      &::xviz::_PrimitiveBase_default_instance_);
}
inline ::xviz::PrimitiveBase* Polygon::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Polygon.base)
  
  ::xviz::PrimitiveBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::xviz::PrimitiveBase* Polygon::mutable_base() {
  
  if (base_ == NULL) {
    auto* p = CreateMaybeMessage<::xviz::PrimitiveBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Polygon.base)
  return base_;
}
inline void Polygon::set_allocated_base(::xviz::PrimitiveBase* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_;
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:xviz.Polygon.base)
}

// repeated float vertices = 2;
inline int Polygon::vertices_size() const {
  return vertices_.size();
}
inline void Polygon::clear_vertices() {
  vertices_.Clear();
}
inline float Polygon::vertices(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Polygon.vertices)
  return vertices_.Get(index);
}
inline void Polygon::set_vertices(int index, float value) {
  vertices_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Polygon.vertices)
}
inline void Polygon::add_vertices(float value) {
  vertices_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Polygon.vertices)
}
inline const ::google::protobuf::RepeatedField< float >&
Polygon::vertices() const {
  // @@protoc_insertion_point(field_list:xviz.Polygon.vertices)
  return vertices_;
}
inline ::google::protobuf::RepeatedField< float >*
Polygon::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Polygon.vertices)
  return &vertices_;
}

// -------------------------------------------------------------------

// Polyline

// .xviz.PrimitiveBase base = 1;
inline bool Polyline::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline void Polyline::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
inline const ::xviz::PrimitiveBase& Polyline::_internal_base() const {
  return *base_;
}
inline const ::xviz::PrimitiveBase& Polyline::base() const {
  const ::xviz::PrimitiveBase* p = base_;
  // @@protoc_insertion_point(field_get:xviz.Polyline.base)
  return p != NULL ? *p : *reinterpret_cast<const ::xviz::PrimitiveBase*>(
      &::xviz::_PrimitiveBase_default_instance_);
}
inline ::xviz::PrimitiveBase* Polyline::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Polyline.base)
  
  ::xviz::PrimitiveBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::xviz::PrimitiveBase* Polyline::mutable_base() {
  
  if (base_ == NULL) {
    auto* p = CreateMaybeMessage<::xviz::PrimitiveBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Polyline.base)
  return base_;
}
inline void Polyline::set_allocated_base(::xviz::PrimitiveBase* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_;
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:xviz.Polyline.base)
}

// repeated float vertices = 2;
inline int Polyline::vertices_size() const {
  return vertices_.size();
}
inline void Polyline::clear_vertices() {
  vertices_.Clear();
}
inline float Polyline::vertices(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Polyline.vertices)
  return vertices_.Get(index);
}
inline void Polyline::set_vertices(int index, float value) {
  vertices_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Polyline.vertices)
}
inline void Polyline::add_vertices(float value) {
  vertices_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Polyline.vertices)
}
inline const ::google::protobuf::RepeatedField< float >&
Polyline::vertices() const {
  // @@protoc_insertion_point(field_list:xviz.Polyline.vertices)
  return vertices_;
}
inline ::google::protobuf::RepeatedField< float >*
Polyline::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Polyline.vertices)
  return &vertices_;
}

// bytes colors = 3;
inline void Polyline::clear_colors() {
  colors_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Polyline::colors() const {
  // @@protoc_insertion_point(field_get:xviz.Polyline.colors)
  return colors_.GetNoArena();
}
inline void Polyline::set_colors(const ::std::string& value) {
  
  colors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Polyline.colors)
}
#if LANG_CXX11
inline void Polyline::set_colors(::std::string&& value) {
  
  colors_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.Polyline.colors)
}
#endif
inline void Polyline::set_colors(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  colors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Polyline.colors)
}
inline void Polyline::set_colors(const void* value, size_t size) {
  
  colors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Polyline.colors)
}
inline ::std::string* Polyline::mutable_colors() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Polyline.colors)
  return colors_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Polyline::release_colors() {
  // @@protoc_insertion_point(field_release:xviz.Polyline.colors)
  
  return colors_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Polyline::set_allocated_colors(::std::string* colors) {
  if (colors != NULL) {
    
  } else {
    
  }
  colors_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), colors);
  // @@protoc_insertion_point(field_set_allocated:xviz.Polyline.colors)
}

// -------------------------------------------------------------------

// Stadium

// .xviz.PrimitiveBase base = 1;
inline bool Stadium::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline void Stadium::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
inline const ::xviz::PrimitiveBase& Stadium::_internal_base() const {
  return *base_;
}
inline const ::xviz::PrimitiveBase& Stadium::base() const {
  const ::xviz::PrimitiveBase* p = base_;
  // @@protoc_insertion_point(field_get:xviz.Stadium.base)
  return p != NULL ? *p : *reinterpret_cast<const ::xviz::PrimitiveBase*>(
      &::xviz::_PrimitiveBase_default_instance_);
}
inline ::xviz::PrimitiveBase* Stadium::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Stadium.base)
  
  ::xviz::PrimitiveBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::xviz::PrimitiveBase* Stadium::mutable_base() {
  
  if (base_ == NULL) {
    auto* p = CreateMaybeMessage<::xviz::PrimitiveBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Stadium.base)
  return base_;
}
inline void Stadium::set_allocated_base(::xviz::PrimitiveBase* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_;
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:xviz.Stadium.base)
}

// repeated float start = 2;
inline int Stadium::start_size() const {
  return start_.size();
}
inline void Stadium::clear_start() {
  start_.Clear();
}
inline float Stadium::start(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Stadium.start)
  return start_.Get(index);
}
inline void Stadium::set_start(int index, float value) {
  start_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Stadium.start)
}
inline void Stadium::add_start(float value) {
  start_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Stadium.start)
}
inline const ::google::protobuf::RepeatedField< float >&
Stadium::start() const {
  // @@protoc_insertion_point(field_list:xviz.Stadium.start)
  return start_;
}
inline ::google::protobuf::RepeatedField< float >*
Stadium::mutable_start() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Stadium.start)
  return &start_;
}

// repeated float end = 3;
inline int Stadium::end_size() const {
  return end_.size();
}
inline void Stadium::clear_end() {
  end_.Clear();
}
inline float Stadium::end(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Stadium.end)
  return end_.Get(index);
}
inline void Stadium::set_end(int index, float value) {
  end_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Stadium.end)
}
inline void Stadium::add_end(float value) {
  end_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Stadium.end)
}
inline const ::google::protobuf::RepeatedField< float >&
Stadium::end() const {
  // @@protoc_insertion_point(field_list:xviz.Stadium.end)
  return end_;
}
inline ::google::protobuf::RepeatedField< float >*
Stadium::mutable_end() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Stadium.end)
  return &end_;
}

// float radius = 4;
inline void Stadium::clear_radius() {
  radius_ = 0;
}
inline float Stadium::radius() const {
  // @@protoc_insertion_point(field_get:xviz.Stadium.radius)
  return radius_;
}
inline void Stadium::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:xviz.Stadium.radius)
}

// -------------------------------------------------------------------

// Text

// .xviz.PrimitiveBase base = 1;
inline bool Text::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline void Text::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
inline const ::xviz::PrimitiveBase& Text::_internal_base() const {
  return *base_;
}
inline const ::xviz::PrimitiveBase& Text::base() const {
  const ::xviz::PrimitiveBase* p = base_;
  // @@protoc_insertion_point(field_get:xviz.Text.base)
  return p != NULL ? *p : *reinterpret_cast<const ::xviz::PrimitiveBase*>(
      &::xviz::_PrimitiveBase_default_instance_);
}
inline ::xviz::PrimitiveBase* Text::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Text.base)
  
  ::xviz::PrimitiveBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::xviz::PrimitiveBase* Text::mutable_base() {
  
  if (base_ == NULL) {
    auto* p = CreateMaybeMessage<::xviz::PrimitiveBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Text.base)
  return base_;
}
inline void Text::set_allocated_base(::xviz::PrimitiveBase* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_;
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:xviz.Text.base)
}

// repeated float position = 2;
inline int Text::position_size() const {
  return position_.size();
}
inline void Text::clear_position() {
  position_.Clear();
}
inline float Text::position(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Text.position)
  return position_.Get(index);
}
inline void Text::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.Text.position)
}
inline void Text::add_position(float value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.Text.position)
}
inline const ::google::protobuf::RepeatedField< float >&
Text::position() const {
  // @@protoc_insertion_point(field_list:xviz.Text.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< float >*
Text::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Text.position)
  return &position_;
}

// string text = 3;
inline void Text::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Text::text() const {
  // @@protoc_insertion_point(field_get:xviz.Text.text)
  return text_.GetNoArena();
}
inline void Text::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Text.text)
}
#if LANG_CXX11
inline void Text::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.Text.text)
}
#endif
inline void Text::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Text.text)
}
inline void Text::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Text.text)
}
inline ::std::string* Text::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Text.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Text::release_text() {
  // @@protoc_insertion_point(field_release:xviz.Text.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Text::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:xviz.Text.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_primitives_2eproto
