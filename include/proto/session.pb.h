// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session.proto

#ifndef PROTOBUF_INCLUDED_session_2eproto
#define PROTOBUF_INCLUDED_session_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
#include "core.pb.h"
#include "options.pb.h"
#include "style.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_session_2eproto 

namespace protobuf_session_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[16];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_session_2eproto
namespace xviz {
class CameraInfo;
class CameraInfoDefaultTypeInternal;
extern CameraInfoDefaultTypeInternal _CameraInfo_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class LogInfo;
class LogInfoDefaultTypeInternal;
extern LogInfoDefaultTypeInternal _LogInfo_default_instance_;
class Metadata;
class MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Metadata_CamerasEntry_DoNotUse;
class Metadata_CamerasEntry_DoNotUseDefaultTypeInternal;
extern Metadata_CamerasEntry_DoNotUseDefaultTypeInternal _Metadata_CamerasEntry_DoNotUse_default_instance_;
class Metadata_StreamAliasesEntry_DoNotUse;
class Metadata_StreamAliasesEntry_DoNotUseDefaultTypeInternal;
extern Metadata_StreamAliasesEntry_DoNotUseDefaultTypeInternal _Metadata_StreamAliasesEntry_DoNotUse_default_instance_;
class Metadata_StreamsEntry_DoNotUse;
class Metadata_StreamsEntry_DoNotUseDefaultTypeInternal;
extern Metadata_StreamsEntry_DoNotUseDefaultTypeInternal _Metadata_StreamsEntry_DoNotUse_default_instance_;
class Metadata_UiConfigEntry_DoNotUse;
class Metadata_UiConfigEntry_DoNotUseDefaultTypeInternal;
extern Metadata_UiConfigEntry_DoNotUseDefaultTypeInternal _Metadata_UiConfigEntry_DoNotUse_default_instance_;
class Reconfigure;
class ReconfigureDefaultTypeInternal;
extern ReconfigureDefaultTypeInternal _Reconfigure_default_instance_;
class Start;
class StartDefaultTypeInternal;
extern StartDefaultTypeInternal _Start_default_instance_;
class StateUpdate;
class StateUpdateDefaultTypeInternal;
extern StateUpdateDefaultTypeInternal _StateUpdate_default_instance_;
class StreamMetadata;
class StreamMetadataDefaultTypeInternal;
extern StreamMetadataDefaultTypeInternal _StreamMetadata_default_instance_;
class TransformLog;
class TransformLogDefaultTypeInternal;
extern TransformLogDefaultTypeInternal _TransformLog_default_instance_;
class TransformLogDone;
class TransformLogDoneDefaultTypeInternal;
extern TransformLogDoneDefaultTypeInternal _TransformLogDone_default_instance_;
class TransformPointInTime;
class TransformPointInTimeDefaultTypeInternal;
extern TransformPointInTimeDefaultTypeInternal _TransformPointInTime_default_instance_;
class UIPanelInfo;
class UIPanelInfoDefaultTypeInternal;
extern UIPanelInfoDefaultTypeInternal _UIPanelInfo_default_instance_;
}  // namespace xviz
namespace google {
namespace protobuf {
template<> ::xviz::CameraInfo* Arena::CreateMaybeMessage<::xviz::CameraInfo>(Arena*);
template<> ::xviz::Error* Arena::CreateMaybeMessage<::xviz::Error>(Arena*);
template<> ::xviz::LogInfo* Arena::CreateMaybeMessage<::xviz::LogInfo>(Arena*);
template<> ::xviz::Metadata* Arena::CreateMaybeMessage<::xviz::Metadata>(Arena*);
template<> ::xviz::Metadata_CamerasEntry_DoNotUse* Arena::CreateMaybeMessage<::xviz::Metadata_CamerasEntry_DoNotUse>(Arena*);
template<> ::xviz::Metadata_StreamAliasesEntry_DoNotUse* Arena::CreateMaybeMessage<::xviz::Metadata_StreamAliasesEntry_DoNotUse>(Arena*);
template<> ::xviz::Metadata_StreamsEntry_DoNotUse* Arena::CreateMaybeMessage<::xviz::Metadata_StreamsEntry_DoNotUse>(Arena*);
template<> ::xviz::Metadata_UiConfigEntry_DoNotUse* Arena::CreateMaybeMessage<::xviz::Metadata_UiConfigEntry_DoNotUse>(Arena*);
template<> ::xviz::Reconfigure* Arena::CreateMaybeMessage<::xviz::Reconfigure>(Arena*);
template<> ::xviz::Start* Arena::CreateMaybeMessage<::xviz::Start>(Arena*);
template<> ::xviz::StateUpdate* Arena::CreateMaybeMessage<::xviz::StateUpdate>(Arena*);
template<> ::xviz::StreamMetadata* Arena::CreateMaybeMessage<::xviz::StreamMetadata>(Arena*);
template<> ::xviz::TransformLog* Arena::CreateMaybeMessage<::xviz::TransformLog>(Arena*);
template<> ::xviz::TransformLogDone* Arena::CreateMaybeMessage<::xviz::TransformLogDone>(Arena*);
template<> ::xviz::TransformPointInTime* Arena::CreateMaybeMessage<::xviz::TransformPointInTime>(Arena*);
template<> ::xviz::UIPanelInfo* Arena::CreateMaybeMessage<::xviz::UIPanelInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace xviz {

enum Start_MessageFormat {
  Start_MessageFormat_START_MESSAGE_FORMAT_INVALID = 0,
  Start_MessageFormat_JSON = 1,
  Start_MessageFormat_BINARY = 2,
  Start_MessageFormat_Start_MessageFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Start_MessageFormat_Start_MessageFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Start_MessageFormat_IsValid(int value);
const Start_MessageFormat Start_MessageFormat_MessageFormat_MIN = Start_MessageFormat_START_MESSAGE_FORMAT_INVALID;
const Start_MessageFormat Start_MessageFormat_MessageFormat_MAX = Start_MessageFormat_BINARY;
const int Start_MessageFormat_MessageFormat_ARRAYSIZE = Start_MessageFormat_MessageFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* Start_MessageFormat_descriptor();
inline const ::std::string& Start_MessageFormat_Name(Start_MessageFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    Start_MessageFormat_descriptor(), value);
}
inline bool Start_MessageFormat_Parse(
    const ::std::string& name, Start_MessageFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Start_MessageFormat>(
    Start_MessageFormat_descriptor(), name, value);
}
enum StateUpdate_UpdateType {
  StateUpdate_UpdateType_STATE_UPDATE_UPDATE_TYPE_INVALID = 0,
  StateUpdate_UpdateType_SNAPSHOT = 1,
  StateUpdate_UpdateType_INCREMENTAL = 2,
  StateUpdate_UpdateType_COMPLETE_STATE = 3,
  StateUpdate_UpdateType_PERSISTENT = 4,
  StateUpdate_UpdateType_StateUpdate_UpdateType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StateUpdate_UpdateType_StateUpdate_UpdateType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StateUpdate_UpdateType_IsValid(int value);
const StateUpdate_UpdateType StateUpdate_UpdateType_UpdateType_MIN = StateUpdate_UpdateType_STATE_UPDATE_UPDATE_TYPE_INVALID;
const StateUpdate_UpdateType StateUpdate_UpdateType_UpdateType_MAX = StateUpdate_UpdateType_PERSISTENT;
const int StateUpdate_UpdateType_UpdateType_ARRAYSIZE = StateUpdate_UpdateType_UpdateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StateUpdate_UpdateType_descriptor();
inline const ::std::string& StateUpdate_UpdateType_Name(StateUpdate_UpdateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StateUpdate_UpdateType_descriptor(), value);
}
inline bool StateUpdate_UpdateType_Parse(
    const ::std::string& name, StateUpdate_UpdateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StateUpdate_UpdateType>(
    StateUpdate_UpdateType_descriptor(), name, value);
}
enum Reconfigure_UpdateType {
  Reconfigure_UpdateType_RECONFIGURE_UPDATE_TYPE_INVALID = 0,
  Reconfigure_UpdateType_DELTA = 1,
  Reconfigure_UpdateType_FULL = 2,
  Reconfigure_UpdateType_Reconfigure_UpdateType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Reconfigure_UpdateType_Reconfigure_UpdateType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Reconfigure_UpdateType_IsValid(int value);
const Reconfigure_UpdateType Reconfigure_UpdateType_UpdateType_MIN = Reconfigure_UpdateType_RECONFIGURE_UPDATE_TYPE_INVALID;
const Reconfigure_UpdateType Reconfigure_UpdateType_UpdateType_MAX = Reconfigure_UpdateType_FULL;
const int Reconfigure_UpdateType_UpdateType_ARRAYSIZE = Reconfigure_UpdateType_UpdateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Reconfigure_UpdateType_descriptor();
inline const ::std::string& Reconfigure_UpdateType_Name(Reconfigure_UpdateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Reconfigure_UpdateType_descriptor(), value);
}
inline bool Reconfigure_UpdateType_Parse(
    const ::std::string& name, Reconfigure_UpdateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Reconfigure_UpdateType>(
    Reconfigure_UpdateType_descriptor(), name, value);
}
enum StreamMetadata_Category {
  StreamMetadata_Category_STREAM_METADATA_CATEGORY_INVALID = 0,
  StreamMetadata_Category_PRIMITIVE = 1,
  StreamMetadata_Category_TIME_SERIES = 2,
  StreamMetadata_Category_VARIABLE = 3,
  StreamMetadata_Category_ANNOTATION = 4,
  StreamMetadata_Category_FUTURE_INSTANCE = 5,
  StreamMetadata_Category_POSE = 6,
  StreamMetadata_Category_UI_PRIMITIVE = 7,
  StreamMetadata_Category_StreamMetadata_Category_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StreamMetadata_Category_StreamMetadata_Category_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StreamMetadata_Category_IsValid(int value);
const StreamMetadata_Category StreamMetadata_Category_Category_MIN = StreamMetadata_Category_STREAM_METADATA_CATEGORY_INVALID;
const StreamMetadata_Category StreamMetadata_Category_Category_MAX = StreamMetadata_Category_UI_PRIMITIVE;
const int StreamMetadata_Category_Category_ARRAYSIZE = StreamMetadata_Category_Category_MAX + 1;

const ::google::protobuf::EnumDescriptor* StreamMetadata_Category_descriptor();
inline const ::std::string& StreamMetadata_Category_Name(StreamMetadata_Category value) {
  return ::google::protobuf::internal::NameOfEnum(
    StreamMetadata_Category_descriptor(), value);
}
inline bool StreamMetadata_Category_Parse(
    const ::std::string& name, StreamMetadata_Category* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamMetadata_Category>(
    StreamMetadata_Category_descriptor(), name, value);
}
enum StreamMetadata_ScalarType {
  StreamMetadata_ScalarType_STREAM_METADATA_SCALAR_TYPE_INVALID = 0,
  StreamMetadata_ScalarType_FLOAT = 1,
  StreamMetadata_ScalarType_INT32 = 2,
  StreamMetadata_ScalarType_STRING = 3,
  StreamMetadata_ScalarType_BOOL = 4,
  StreamMetadata_ScalarType_StreamMetadata_ScalarType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StreamMetadata_ScalarType_StreamMetadata_ScalarType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StreamMetadata_ScalarType_IsValid(int value);
const StreamMetadata_ScalarType StreamMetadata_ScalarType_ScalarType_MIN = StreamMetadata_ScalarType_STREAM_METADATA_SCALAR_TYPE_INVALID;
const StreamMetadata_ScalarType StreamMetadata_ScalarType_ScalarType_MAX = StreamMetadata_ScalarType_BOOL;
const int StreamMetadata_ScalarType_ScalarType_ARRAYSIZE = StreamMetadata_ScalarType_ScalarType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StreamMetadata_ScalarType_descriptor();
inline const ::std::string& StreamMetadata_ScalarType_Name(StreamMetadata_ScalarType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StreamMetadata_ScalarType_descriptor(), value);
}
inline bool StreamMetadata_ScalarType_Parse(
    const ::std::string& name, StreamMetadata_ScalarType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamMetadata_ScalarType>(
    StreamMetadata_ScalarType_descriptor(), name, value);
}
enum StreamMetadata_PrimitiveType {
  StreamMetadata_PrimitiveType_STREAM_METADATA_PRIMITIVE_TYPE_INVALID = 0,
  StreamMetadata_PrimitiveType_CIRCLE = 1,
  StreamMetadata_PrimitiveType_IMAGE = 2,
  StreamMetadata_PrimitiveType_POINT = 3,
  StreamMetadata_PrimitiveType_POLYGON = 4,
  StreamMetadata_PrimitiveType_POLYLINE = 5,
  StreamMetadata_PrimitiveType_STADIUM = 6,
  StreamMetadata_PrimitiveType_TEXT = 7,
  StreamMetadata_PrimitiveType_StreamMetadata_PrimitiveType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StreamMetadata_PrimitiveType_StreamMetadata_PrimitiveType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StreamMetadata_PrimitiveType_IsValid(int value);
const StreamMetadata_PrimitiveType StreamMetadata_PrimitiveType_PrimitiveType_MIN = StreamMetadata_PrimitiveType_STREAM_METADATA_PRIMITIVE_TYPE_INVALID;
const StreamMetadata_PrimitiveType StreamMetadata_PrimitiveType_PrimitiveType_MAX = StreamMetadata_PrimitiveType_TEXT;
const int StreamMetadata_PrimitiveType_PrimitiveType_ARRAYSIZE = StreamMetadata_PrimitiveType_PrimitiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StreamMetadata_PrimitiveType_descriptor();
inline const ::std::string& StreamMetadata_PrimitiveType_Name(StreamMetadata_PrimitiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StreamMetadata_PrimitiveType_descriptor(), value);
}
inline bool StreamMetadata_PrimitiveType_Parse(
    const ::std::string& name, StreamMetadata_PrimitiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamMetadata_PrimitiveType>(
    StreamMetadata_PrimitiveType_descriptor(), name, value);
}
enum StreamMetadata_UIPrimitiveType {
  StreamMetadata_UIPrimitiveType_STREAM_METADATA_UI_PRIMITIVE_TYPE_INVALID = 0,
  StreamMetadata_UIPrimitiveType_TREETABLE = 1,
  StreamMetadata_UIPrimitiveType_StreamMetadata_UIPrimitiveType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StreamMetadata_UIPrimitiveType_StreamMetadata_UIPrimitiveType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StreamMetadata_UIPrimitiveType_IsValid(int value);
const StreamMetadata_UIPrimitiveType StreamMetadata_UIPrimitiveType_UIPrimitiveType_MIN = StreamMetadata_UIPrimitiveType_STREAM_METADATA_UI_PRIMITIVE_TYPE_INVALID;
const StreamMetadata_UIPrimitiveType StreamMetadata_UIPrimitiveType_UIPrimitiveType_MAX = StreamMetadata_UIPrimitiveType_TREETABLE;
const int StreamMetadata_UIPrimitiveType_UIPrimitiveType_ARRAYSIZE = StreamMetadata_UIPrimitiveType_UIPrimitiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StreamMetadata_UIPrimitiveType_descriptor();
inline const ::std::string& StreamMetadata_UIPrimitiveType_Name(StreamMetadata_UIPrimitiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StreamMetadata_UIPrimitiveType_descriptor(), value);
}
inline bool StreamMetadata_UIPrimitiveType_Parse(
    const ::std::string& name, StreamMetadata_UIPrimitiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamMetadata_UIPrimitiveType>(
    StreamMetadata_UIPrimitiveType_descriptor(), name, value);
}
enum StreamMetadata_AnnotationType {
  StreamMetadata_AnnotationType_STREAM_METADATA_ANNOTATION_TYPE_INVALID = 0,
  StreamMetadata_AnnotationType_VISUAL = 1,
  StreamMetadata_AnnotationType_StreamMetadata_AnnotationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StreamMetadata_AnnotationType_StreamMetadata_AnnotationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StreamMetadata_AnnotationType_IsValid(int value);
const StreamMetadata_AnnotationType StreamMetadata_AnnotationType_AnnotationType_MIN = StreamMetadata_AnnotationType_STREAM_METADATA_ANNOTATION_TYPE_INVALID;
const StreamMetadata_AnnotationType StreamMetadata_AnnotationType_AnnotationType_MAX = StreamMetadata_AnnotationType_VISUAL;
const int StreamMetadata_AnnotationType_AnnotationType_ARRAYSIZE = StreamMetadata_AnnotationType_AnnotationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StreamMetadata_AnnotationType_descriptor();
inline const ::std::string& StreamMetadata_AnnotationType_Name(StreamMetadata_AnnotationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StreamMetadata_AnnotationType_descriptor(), value);
}
inline bool StreamMetadata_AnnotationType_Parse(
    const ::std::string& name, StreamMetadata_AnnotationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamMetadata_AnnotationType>(
    StreamMetadata_AnnotationType_descriptor(), name, value);
}
enum StreamMetadata_CoordinateType {
  StreamMetadata_CoordinateType_STREAM_METADATA_COORDINATE_TYPE_INVALID = 0,
  StreamMetadata_CoordinateType_GEOGRAPHIC = 1,
  StreamMetadata_CoordinateType_IDENTITY = 2,
  StreamMetadata_CoordinateType_DYNAMIC = 3,
  StreamMetadata_CoordinateType_VEHICLE_RELATIVE = 4,
  StreamMetadata_CoordinateType_StreamMetadata_CoordinateType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StreamMetadata_CoordinateType_StreamMetadata_CoordinateType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StreamMetadata_CoordinateType_IsValid(int value);
const StreamMetadata_CoordinateType StreamMetadata_CoordinateType_CoordinateType_MIN = StreamMetadata_CoordinateType_STREAM_METADATA_COORDINATE_TYPE_INVALID;
const StreamMetadata_CoordinateType StreamMetadata_CoordinateType_CoordinateType_MAX = StreamMetadata_CoordinateType_VEHICLE_RELATIVE;
const int StreamMetadata_CoordinateType_CoordinateType_ARRAYSIZE = StreamMetadata_CoordinateType_CoordinateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StreamMetadata_CoordinateType_descriptor();
inline const ::std::string& StreamMetadata_CoordinateType_Name(StreamMetadata_CoordinateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StreamMetadata_CoordinateType_descriptor(), value);
}
inline bool StreamMetadata_CoordinateType_Parse(
    const ::std::string& name, StreamMetadata_CoordinateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamMetadata_CoordinateType>(
    StreamMetadata_CoordinateType_descriptor(), name, value);
}
enum SessionType {
  SESSION_TYPE_INVALID = 0,
  LIVE = 1,
  LOG = 2,
  UNBUFFERED_LOG = 3,
  SessionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SessionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SessionType_IsValid(int value);
const SessionType SessionType_MIN = SESSION_TYPE_INVALID;
const SessionType SessionType_MAX = UNBUFFERED_LOG;
const int SessionType_ARRAYSIZE = SessionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SessionType_descriptor();
inline const ::std::string& SessionType_Name(SessionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SessionType_descriptor(), value);
}
inline bool SessionType_Parse(
    const ::std::string& name, SessionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SessionType>(
    SessionType_descriptor(), name, value);
}
// ===================================================================

class Start : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Start) */ {
 public:
  Start();
  virtual ~Start();

  Start(const Start& from);

  inline Start& operator=(const Start& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Start(Start&& from) noexcept
    : Start() {
    *this = ::std::move(from);
  }

  inline Start& operator=(Start&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Start& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Start* internal_default_instance() {
    return reinterpret_cast<const Start*>(
               &_Start_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Start* other);
  friend void swap(Start& a, Start& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Start* New() const final {
    return CreateMaybeMessage<Start>(NULL);
  }

  Start* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Start>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Start& from);
  void MergeFrom(const Start& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Start* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Start_MessageFormat MessageFormat;
  static const MessageFormat START_MESSAGE_FORMAT_INVALID =
    Start_MessageFormat_START_MESSAGE_FORMAT_INVALID;
  static const MessageFormat JSON =
    Start_MessageFormat_JSON;
  static const MessageFormat BINARY =
    Start_MessageFormat_BINARY;
  static inline bool MessageFormat_IsValid(int value) {
    return Start_MessageFormat_IsValid(value);
  }
  static const MessageFormat MessageFormat_MIN =
    Start_MessageFormat_MessageFormat_MIN;
  static const MessageFormat MessageFormat_MAX =
    Start_MessageFormat_MessageFormat_MAX;
  static const int MessageFormat_ARRAYSIZE =
    Start_MessageFormat_MessageFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageFormat_descriptor() {
    return Start_MessageFormat_descriptor();
  }
  static inline const ::std::string& MessageFormat_Name(MessageFormat value) {
    return Start_MessageFormat_Name(value);
  }
  static inline bool MessageFormat_Parse(const ::std::string& name,
      MessageFormat* value) {
    return Start_MessageFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string profile = 2;
  void clear_profile();
  static const int kProfileFieldNumber = 2;
  const ::std::string& profile() const;
  void set_profile(const ::std::string& value);
  #if LANG_CXX11
  void set_profile(::std::string&& value);
  #endif
  void set_profile(const char* value);
  void set_profile(const char* value, size_t size);
  ::std::string* mutable_profile();
  ::std::string* release_profile();
  void set_allocated_profile(::std::string* profile);

  // string log = 5;
  void clear_log();
  static const int kLogFieldNumber = 5;
  const ::std::string& log() const;
  void set_log(const ::std::string& value);
  #if LANG_CXX11
  void set_log(::std::string&& value);
  #endif
  void set_log(const char* value);
  void set_log(const char* value, size_t size);
  ::std::string* mutable_log();
  ::std::string* release_log();
  void set_allocated_log(::std::string* log);

  // .xviz.SessionType session_type = 3;
  void clear_session_type();
  static const int kSessionTypeFieldNumber = 3;
  ::xviz::SessionType session_type() const;
  void set_session_type(::xviz::SessionType value);

  // .xviz.Start.MessageFormat message_format = 4;
  void clear_message_format();
  static const int kMessageFormatFieldNumber = 4;
  ::xviz::Start_MessageFormat message_format() const;
  void set_message_format(::xviz::Start_MessageFormat value);

  // @@protoc_insertion_point(class_scope:xviz.Start)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr profile_;
  ::google::protobuf::internal::ArenaStringPtr log_;
  int session_type_;
  int message_format_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransformLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.TransformLog) */ {
 public:
  TransformLog();
  virtual ~TransformLog();

  TransformLog(const TransformLog& from);

  inline TransformLog& operator=(const TransformLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransformLog(TransformLog&& from) noexcept
    : TransformLog() {
    *this = ::std::move(from);
  }

  inline TransformLog& operator=(TransformLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransformLog* internal_default_instance() {
    return reinterpret_cast<const TransformLog*>(
               &_TransformLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TransformLog* other);
  friend void swap(TransformLog& a, TransformLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransformLog* New() const final {
    return CreateMaybeMessage<TransformLog>(NULL);
  }

  TransformLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransformLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransformLog& from);
  void MergeFrom(const TransformLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string desired_streams = 4;
  int desired_streams_size() const;
  void clear_desired_streams();
  static const int kDesiredStreamsFieldNumber = 4;
  const ::std::string& desired_streams(int index) const;
  ::std::string* mutable_desired_streams(int index);
  void set_desired_streams(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_desired_streams(int index, ::std::string&& value);
  #endif
  void set_desired_streams(int index, const char* value);
  void set_desired_streams(int index, const char* value, size_t size);
  ::std::string* add_desired_streams();
  void add_desired_streams(const ::std::string& value);
  #if LANG_CXX11
  void add_desired_streams(::std::string&& value);
  #endif
  void add_desired_streams(const char* value);
  void add_desired_streams(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& desired_streams() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_desired_streams();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // double start_timestamp = 2;
  void clear_start_timestamp();
  static const int kStartTimestampFieldNumber = 2;
  double start_timestamp() const;
  void set_start_timestamp(double value);

  // double end_timestamp = 3;
  void clear_end_timestamp();
  static const int kEndTimestampFieldNumber = 3;
  double end_timestamp() const;
  void set_end_timestamp(double value);

  // @@protoc_insertion_point(class_scope:xviz.TransformLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> desired_streams_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  double start_timestamp_;
  double end_timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StateUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.StateUpdate) */ {
 public:
  StateUpdate();
  virtual ~StateUpdate();

  StateUpdate(const StateUpdate& from);

  inline StateUpdate& operator=(const StateUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StateUpdate(StateUpdate&& from) noexcept
    : StateUpdate() {
    *this = ::std::move(from);
  }

  inline StateUpdate& operator=(StateUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StateUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateUpdate* internal_default_instance() {
    return reinterpret_cast<const StateUpdate*>(
               &_StateUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(StateUpdate* other);
  friend void swap(StateUpdate& a, StateUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateUpdate* New() const final {
    return CreateMaybeMessage<StateUpdate>(NULL);
  }

  StateUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StateUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StateUpdate& from);
  void MergeFrom(const StateUpdate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StateUpdate_UpdateType UpdateType;
  static const UpdateType STATE_UPDATE_UPDATE_TYPE_INVALID =
    StateUpdate_UpdateType_STATE_UPDATE_UPDATE_TYPE_INVALID;
  static const UpdateType SNAPSHOT =
    StateUpdate_UpdateType_SNAPSHOT;
  static const UpdateType INCREMENTAL =
    StateUpdate_UpdateType_INCREMENTAL;
  static const UpdateType COMPLETE_STATE =
    StateUpdate_UpdateType_COMPLETE_STATE;
  static const UpdateType PERSISTENT =
    StateUpdate_UpdateType_PERSISTENT;
  static inline bool UpdateType_IsValid(int value) {
    return StateUpdate_UpdateType_IsValid(value);
  }
  static const UpdateType UpdateType_MIN =
    StateUpdate_UpdateType_UpdateType_MIN;
  static const UpdateType UpdateType_MAX =
    StateUpdate_UpdateType_UpdateType_MAX;
  static const int UpdateType_ARRAYSIZE =
    StateUpdate_UpdateType_UpdateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UpdateType_descriptor() {
    return StateUpdate_UpdateType_descriptor();
  }
  static inline const ::std::string& UpdateType_Name(UpdateType value) {
    return StateUpdate_UpdateType_Name(value);
  }
  static inline bool UpdateType_Parse(const ::std::string& name,
      UpdateType* value) {
    return StateUpdate_UpdateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .xviz.StreamSet updates = 2;
  int updates_size() const;
  void clear_updates();
  static const int kUpdatesFieldNumber = 2;
  ::xviz::StreamSet* mutable_updates(int index);
  ::google::protobuf::RepeatedPtrField< ::xviz::StreamSet >*
      mutable_updates();
  const ::xviz::StreamSet& updates(int index) const;
  ::xviz::StreamSet* add_updates();
  const ::google::protobuf::RepeatedPtrField< ::xviz::StreamSet >&
      updates() const;

  // .xviz.StateUpdate.UpdateType update_type = 1;
  void clear_update_type();
  static const int kUpdateTypeFieldNumber = 1;
  ::xviz::StateUpdate_UpdateType update_type() const;
  void set_update_type(::xviz::StateUpdate_UpdateType value);

  // @@protoc_insertion_point(class_scope:xviz.StateUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xviz::StreamSet > updates_;
  int update_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransformLogDone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.TransformLogDone) */ {
 public:
  TransformLogDone();
  virtual ~TransformLogDone();

  TransformLogDone(const TransformLogDone& from);

  inline TransformLogDone& operator=(const TransformLogDone& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransformLogDone(TransformLogDone&& from) noexcept
    : TransformLogDone() {
    *this = ::std::move(from);
  }

  inline TransformLogDone& operator=(TransformLogDone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformLogDone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransformLogDone* internal_default_instance() {
    return reinterpret_cast<const TransformLogDone*>(
               &_TransformLogDone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TransformLogDone* other);
  friend void swap(TransformLogDone& a, TransformLogDone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransformLogDone* New() const final {
    return CreateMaybeMessage<TransformLogDone>(NULL);
  }

  TransformLogDone* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransformLogDone>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransformLogDone& from);
  void MergeFrom(const TransformLogDone& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformLogDone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:xviz.TransformLogDone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransformPointInTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.TransformPointInTime) */ {
 public:
  TransformPointInTime();
  virtual ~TransformPointInTime();

  TransformPointInTime(const TransformPointInTime& from);

  inline TransformPointInTime& operator=(const TransformPointInTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransformPointInTime(TransformPointInTime&& from) noexcept
    : TransformPointInTime() {
    *this = ::std::move(from);
  }

  inline TransformPointInTime& operator=(TransformPointInTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformPointInTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransformPointInTime* internal_default_instance() {
    return reinterpret_cast<const TransformPointInTime*>(
               &_TransformPointInTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TransformPointInTime* other);
  friend void swap(TransformPointInTime& a, TransformPointInTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransformPointInTime* New() const final {
    return CreateMaybeMessage<TransformPointInTime>(NULL);
  }

  TransformPointInTime* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransformPointInTime>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransformPointInTime& from);
  void MergeFrom(const TransformPointInTime& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformPointInTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string desired_streams = 3;
  int desired_streams_size() const;
  void clear_desired_streams();
  static const int kDesiredStreamsFieldNumber = 3;
  const ::std::string& desired_streams(int index) const;
  ::std::string* mutable_desired_streams(int index);
  void set_desired_streams(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_desired_streams(int index, ::std::string&& value);
  #endif
  void set_desired_streams(int index, const char* value);
  void set_desired_streams(int index, const char* value, size_t size);
  ::std::string* add_desired_streams();
  void add_desired_streams(const ::std::string& value);
  #if LANG_CXX11
  void add_desired_streams(::std::string&& value);
  #endif
  void add_desired_streams(const char* value);
  void add_desired_streams(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& desired_streams() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_desired_streams();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // double query_timestamp = 2;
  void clear_query_timestamp();
  static const int kQueryTimestampFieldNumber = 2;
  double query_timestamp() const;
  void set_query_timestamp(double value);

  // @@protoc_insertion_point(class_scope:xviz.TransformPointInTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> desired_streams_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  double query_timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Reconfigure : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Reconfigure) */ {
 public:
  Reconfigure();
  virtual ~Reconfigure();

  Reconfigure(const Reconfigure& from);

  inline Reconfigure& operator=(const Reconfigure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reconfigure(Reconfigure&& from) noexcept
    : Reconfigure() {
    *this = ::std::move(from);
  }

  inline Reconfigure& operator=(Reconfigure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Reconfigure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reconfigure* internal_default_instance() {
    return reinterpret_cast<const Reconfigure*>(
               &_Reconfigure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Reconfigure* other);
  friend void swap(Reconfigure& a, Reconfigure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reconfigure* New() const final {
    return CreateMaybeMessage<Reconfigure>(NULL);
  }

  Reconfigure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reconfigure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Reconfigure& from);
  void MergeFrom(const Reconfigure& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reconfigure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Reconfigure_UpdateType UpdateType;
  static const UpdateType RECONFIGURE_UPDATE_TYPE_INVALID =
    Reconfigure_UpdateType_RECONFIGURE_UPDATE_TYPE_INVALID;
  static const UpdateType DELTA =
    Reconfigure_UpdateType_DELTA;
  static const UpdateType FULL =
    Reconfigure_UpdateType_FULL;
  static inline bool UpdateType_IsValid(int value) {
    return Reconfigure_UpdateType_IsValid(value);
  }
  static const UpdateType UpdateType_MIN =
    Reconfigure_UpdateType_UpdateType_MIN;
  static const UpdateType UpdateType_MAX =
    Reconfigure_UpdateType_UpdateType_MAX;
  static const int UpdateType_ARRAYSIZE =
    Reconfigure_UpdateType_UpdateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UpdateType_descriptor() {
    return Reconfigure_UpdateType_descriptor();
  }
  static inline const ::std::string& UpdateType_Name(UpdateType value) {
    return Reconfigure_UpdateType_Name(value);
  }
  static inline bool UpdateType_Parse(const ::std::string& name,
      UpdateType* value) {
    return Reconfigure_UpdateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.protobuf.Struct config_update = 2;
  bool has_config_update() const;
  void clear_config_update();
  static const int kConfigUpdateFieldNumber = 2;
  private:
  const ::google::protobuf::Struct& _internal_config_update() const;
  public:
  const ::google::protobuf::Struct& config_update() const;
  ::google::protobuf::Struct* release_config_update();
  ::google::protobuf::Struct* mutable_config_update();
  void set_allocated_config_update(::google::protobuf::Struct* config_update);

  // .xviz.Reconfigure.UpdateType update_type = 1;
  void clear_update_type();
  static const int kUpdateTypeFieldNumber = 1;
  ::xviz::Reconfigure_UpdateType update_type() const;
  void set_update_type(::xviz::Reconfigure_UpdateType value);

  // @@protoc_insertion_point(class_scope:xviz.Reconfigure)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Struct* config_update_;
  int update_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Metadata_StreamsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Metadata_StreamsEntry_DoNotUse, 
    ::std::string, ::xviz::StreamMetadata,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Metadata_StreamsEntry_DoNotUse, 
    ::std::string, ::xviz::StreamMetadata,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Metadata_StreamsEntry_DoNotUse();
  Metadata_StreamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Metadata_StreamsEntry_DoNotUse& other);
  static const Metadata_StreamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Metadata_StreamsEntry_DoNotUse*>(&_Metadata_StreamsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Metadata_CamerasEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Metadata_CamerasEntry_DoNotUse, 
    ::std::string, ::xviz::CameraInfo,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Metadata_CamerasEntry_DoNotUse, 
    ::std::string, ::xviz::CameraInfo,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Metadata_CamerasEntry_DoNotUse();
  Metadata_CamerasEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Metadata_CamerasEntry_DoNotUse& other);
  static const Metadata_CamerasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Metadata_CamerasEntry_DoNotUse*>(&_Metadata_CamerasEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Metadata_StreamAliasesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Metadata_StreamAliasesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Metadata_StreamAliasesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Metadata_StreamAliasesEntry_DoNotUse();
  Metadata_StreamAliasesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Metadata_StreamAliasesEntry_DoNotUse& other);
  static const Metadata_StreamAliasesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Metadata_StreamAliasesEntry_DoNotUse*>(&_Metadata_StreamAliasesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Metadata_UiConfigEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Metadata_UiConfigEntry_DoNotUse, 
    ::std::string, ::xviz::UIPanelInfo,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Metadata_UiConfigEntry_DoNotUse, 
    ::std::string, ::xviz::UIPanelInfo,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Metadata_UiConfigEntry_DoNotUse();
  Metadata_UiConfigEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Metadata_UiConfigEntry_DoNotUse& other);
  static const Metadata_UiConfigEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Metadata_UiConfigEntry_DoNotUse*>(&_Metadata_UiConfigEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Metadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Metadata) */ {
 public:
  Metadata();
  virtual ~Metadata();

  Metadata(const Metadata& from);

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(Metadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Metadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Metadata* other);
  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Metadata* New() const final {
    return CreateMaybeMessage<Metadata>(NULL);
  }

  Metadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .xviz.StreamMetadata> streams = 2;
  int streams_size() const;
  void clear_streams();
  static const int kStreamsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::xviz::StreamMetadata >&
      streams() const;
  ::google::protobuf::Map< ::std::string, ::xviz::StreamMetadata >*
      mutable_streams();

  // map<string, .xviz.CameraInfo> cameras = 3;
  int cameras_size() const;
  void clear_cameras();
  static const int kCamerasFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::xviz::CameraInfo >&
      cameras() const;
  ::google::protobuf::Map< ::std::string, ::xviz::CameraInfo >*
      mutable_cameras();

  // map<string, string> stream_aliases = 4;
  int stream_aliases_size() const;
  void clear_stream_aliases();
  static const int kStreamAliasesFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      stream_aliases() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_stream_aliases();

  // map<string, .xviz.UIPanelInfo> ui_config = 5;
  int ui_config_size() const;
  void clear_ui_config();
  static const int kUiConfigFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::xviz::UIPanelInfo >&
      ui_config() const;
  ::google::protobuf::Map< ::std::string, ::xviz::UIPanelInfo >*
      mutable_ui_config();

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // .xviz.LogInfo log_info = 6;
  bool has_log_info() const;
  void clear_log_info();
  static const int kLogInfoFieldNumber = 6;
  private:
  const ::xviz::LogInfo& _internal_log_info() const;
  public:
  const ::xviz::LogInfo& log_info() const;
  ::xviz::LogInfo* release_log_info();
  ::xviz::LogInfo* mutable_log_info();
  void set_allocated_log_info(::xviz::LogInfo* log_info);

  // @@protoc_insertion_point(class_scope:xviz.Metadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Metadata_StreamsEntry_DoNotUse,
      ::std::string, ::xviz::StreamMetadata,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > streams_;
  ::google::protobuf::internal::MapField<
      Metadata_CamerasEntry_DoNotUse,
      ::std::string, ::xviz::CameraInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > cameras_;
  ::google::protobuf::internal::MapField<
      Metadata_StreamAliasesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > stream_aliases_;
  ::google::protobuf::internal::MapField<
      Metadata_UiConfigEntry_DoNotUse,
      ::std::string, ::xviz::UIPanelInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > ui_config_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::xviz::LogInfo* log_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(NULL);
  }

  Error* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:xviz.Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.StreamMetadata) */ {
 public:
  StreamMetadata();
  virtual ~StreamMetadata();

  StreamMetadata(const StreamMetadata& from);

  inline StreamMetadata& operator=(const StreamMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamMetadata(StreamMetadata&& from) noexcept
    : StreamMetadata() {
    *this = ::std::move(from);
  }

  inline StreamMetadata& operator=(StreamMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamMetadata* internal_default_instance() {
    return reinterpret_cast<const StreamMetadata*>(
               &_StreamMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(StreamMetadata* other);
  friend void swap(StreamMetadata& a, StreamMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamMetadata* New() const final {
    return CreateMaybeMessage<StreamMetadata>(NULL);
  }

  StreamMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StreamMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StreamMetadata& from);
  void MergeFrom(const StreamMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StreamMetadata_Category Category;
  static const Category STREAM_METADATA_CATEGORY_INVALID =
    StreamMetadata_Category_STREAM_METADATA_CATEGORY_INVALID;
  static const Category PRIMITIVE =
    StreamMetadata_Category_PRIMITIVE;
  static const Category TIME_SERIES =
    StreamMetadata_Category_TIME_SERIES;
  static const Category VARIABLE =
    StreamMetadata_Category_VARIABLE;
  static const Category ANNOTATION =
    StreamMetadata_Category_ANNOTATION;
  static const Category FUTURE_INSTANCE =
    StreamMetadata_Category_FUTURE_INSTANCE;
  static const Category POSE =
    StreamMetadata_Category_POSE;
  static const Category UI_PRIMITIVE =
    StreamMetadata_Category_UI_PRIMITIVE;
  static inline bool Category_IsValid(int value) {
    return StreamMetadata_Category_IsValid(value);
  }
  static const Category Category_MIN =
    StreamMetadata_Category_Category_MIN;
  static const Category Category_MAX =
    StreamMetadata_Category_Category_MAX;
  static const int Category_ARRAYSIZE =
    StreamMetadata_Category_Category_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Category_descriptor() {
    return StreamMetadata_Category_descriptor();
  }
  static inline const ::std::string& Category_Name(Category value) {
    return StreamMetadata_Category_Name(value);
  }
  static inline bool Category_Parse(const ::std::string& name,
      Category* value) {
    return StreamMetadata_Category_Parse(name, value);
  }

  typedef StreamMetadata_ScalarType ScalarType;
  static const ScalarType STREAM_METADATA_SCALAR_TYPE_INVALID =
    StreamMetadata_ScalarType_STREAM_METADATA_SCALAR_TYPE_INVALID;
  static const ScalarType FLOAT =
    StreamMetadata_ScalarType_FLOAT;
  static const ScalarType INT32 =
    StreamMetadata_ScalarType_INT32;
  static const ScalarType STRING =
    StreamMetadata_ScalarType_STRING;
  static const ScalarType BOOL =
    StreamMetadata_ScalarType_BOOL;
  static inline bool ScalarType_IsValid(int value) {
    return StreamMetadata_ScalarType_IsValid(value);
  }
  static const ScalarType ScalarType_MIN =
    StreamMetadata_ScalarType_ScalarType_MIN;
  static const ScalarType ScalarType_MAX =
    StreamMetadata_ScalarType_ScalarType_MAX;
  static const int ScalarType_ARRAYSIZE =
    StreamMetadata_ScalarType_ScalarType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScalarType_descriptor() {
    return StreamMetadata_ScalarType_descriptor();
  }
  static inline const ::std::string& ScalarType_Name(ScalarType value) {
    return StreamMetadata_ScalarType_Name(value);
  }
  static inline bool ScalarType_Parse(const ::std::string& name,
      ScalarType* value) {
    return StreamMetadata_ScalarType_Parse(name, value);
  }

  typedef StreamMetadata_PrimitiveType PrimitiveType;
  static const PrimitiveType STREAM_METADATA_PRIMITIVE_TYPE_INVALID =
    StreamMetadata_PrimitiveType_STREAM_METADATA_PRIMITIVE_TYPE_INVALID;
  static const PrimitiveType CIRCLE =
    StreamMetadata_PrimitiveType_CIRCLE;
  static const PrimitiveType IMAGE =
    StreamMetadata_PrimitiveType_IMAGE;
  static const PrimitiveType POINT =
    StreamMetadata_PrimitiveType_POINT;
  static const PrimitiveType POLYGON =
    StreamMetadata_PrimitiveType_POLYGON;
  static const PrimitiveType POLYLINE =
    StreamMetadata_PrimitiveType_POLYLINE;
  static const PrimitiveType STADIUM =
    StreamMetadata_PrimitiveType_STADIUM;
  static const PrimitiveType TEXT =
    StreamMetadata_PrimitiveType_TEXT;
  static inline bool PrimitiveType_IsValid(int value) {
    return StreamMetadata_PrimitiveType_IsValid(value);
  }
  static const PrimitiveType PrimitiveType_MIN =
    StreamMetadata_PrimitiveType_PrimitiveType_MIN;
  static const PrimitiveType PrimitiveType_MAX =
    StreamMetadata_PrimitiveType_PrimitiveType_MAX;
  static const int PrimitiveType_ARRAYSIZE =
    StreamMetadata_PrimitiveType_PrimitiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PrimitiveType_descriptor() {
    return StreamMetadata_PrimitiveType_descriptor();
  }
  static inline const ::std::string& PrimitiveType_Name(PrimitiveType value) {
    return StreamMetadata_PrimitiveType_Name(value);
  }
  static inline bool PrimitiveType_Parse(const ::std::string& name,
      PrimitiveType* value) {
    return StreamMetadata_PrimitiveType_Parse(name, value);
  }

  typedef StreamMetadata_UIPrimitiveType UIPrimitiveType;
  static const UIPrimitiveType STREAM_METADATA_UI_PRIMITIVE_TYPE_INVALID =
    StreamMetadata_UIPrimitiveType_STREAM_METADATA_UI_PRIMITIVE_TYPE_INVALID;
  static const UIPrimitiveType TREETABLE =
    StreamMetadata_UIPrimitiveType_TREETABLE;
  static inline bool UIPrimitiveType_IsValid(int value) {
    return StreamMetadata_UIPrimitiveType_IsValid(value);
  }
  static const UIPrimitiveType UIPrimitiveType_MIN =
    StreamMetadata_UIPrimitiveType_UIPrimitiveType_MIN;
  static const UIPrimitiveType UIPrimitiveType_MAX =
    StreamMetadata_UIPrimitiveType_UIPrimitiveType_MAX;
  static const int UIPrimitiveType_ARRAYSIZE =
    StreamMetadata_UIPrimitiveType_UIPrimitiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UIPrimitiveType_descriptor() {
    return StreamMetadata_UIPrimitiveType_descriptor();
  }
  static inline const ::std::string& UIPrimitiveType_Name(UIPrimitiveType value) {
    return StreamMetadata_UIPrimitiveType_Name(value);
  }
  static inline bool UIPrimitiveType_Parse(const ::std::string& name,
      UIPrimitiveType* value) {
    return StreamMetadata_UIPrimitiveType_Parse(name, value);
  }

  typedef StreamMetadata_AnnotationType AnnotationType;
  static const AnnotationType STREAM_METADATA_ANNOTATION_TYPE_INVALID =
    StreamMetadata_AnnotationType_STREAM_METADATA_ANNOTATION_TYPE_INVALID;
  static const AnnotationType VISUAL =
    StreamMetadata_AnnotationType_VISUAL;
  static inline bool AnnotationType_IsValid(int value) {
    return StreamMetadata_AnnotationType_IsValid(value);
  }
  static const AnnotationType AnnotationType_MIN =
    StreamMetadata_AnnotationType_AnnotationType_MIN;
  static const AnnotationType AnnotationType_MAX =
    StreamMetadata_AnnotationType_AnnotationType_MAX;
  static const int AnnotationType_ARRAYSIZE =
    StreamMetadata_AnnotationType_AnnotationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AnnotationType_descriptor() {
    return StreamMetadata_AnnotationType_descriptor();
  }
  static inline const ::std::string& AnnotationType_Name(AnnotationType value) {
    return StreamMetadata_AnnotationType_Name(value);
  }
  static inline bool AnnotationType_Parse(const ::std::string& name,
      AnnotationType* value) {
    return StreamMetadata_AnnotationType_Parse(name, value);
  }

  typedef StreamMetadata_CoordinateType CoordinateType;
  static const CoordinateType STREAM_METADATA_COORDINATE_TYPE_INVALID =
    StreamMetadata_CoordinateType_STREAM_METADATA_COORDINATE_TYPE_INVALID;
  static const CoordinateType GEOGRAPHIC =
    StreamMetadata_CoordinateType_GEOGRAPHIC;
  static const CoordinateType IDENTITY =
    StreamMetadata_CoordinateType_IDENTITY;
  static const CoordinateType DYNAMIC =
    StreamMetadata_CoordinateType_DYNAMIC;
  static const CoordinateType VEHICLE_RELATIVE =
    StreamMetadata_CoordinateType_VEHICLE_RELATIVE;
  static inline bool CoordinateType_IsValid(int value) {
    return StreamMetadata_CoordinateType_IsValid(value);
  }
  static const CoordinateType CoordinateType_MIN =
    StreamMetadata_CoordinateType_CoordinateType_MIN;
  static const CoordinateType CoordinateType_MAX =
    StreamMetadata_CoordinateType_CoordinateType_MAX;
  static const int CoordinateType_ARRAYSIZE =
    StreamMetadata_CoordinateType_CoordinateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CoordinateType_descriptor() {
    return StreamMetadata_CoordinateType_descriptor();
  }
  static inline const ::std::string& CoordinateType_Name(CoordinateType value) {
    return StreamMetadata_CoordinateType_Name(value);
  }
  static inline bool CoordinateType_Parse(const ::std::string& name,
      CoordinateType* value) {
    return StreamMetadata_CoordinateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .xviz.StyleClass style_classes = 9;
  int style_classes_size() const;
  void clear_style_classes();
  static const int kStyleClassesFieldNumber = 9;
  ::xviz::StyleClass* mutable_style_classes(int index);
  ::google::protobuf::RepeatedPtrField< ::xviz::StyleClass >*
      mutable_style_classes();
  const ::xviz::StyleClass& style_classes(int index) const;
  ::xviz::StyleClass* add_style_classes();
  const ::google::protobuf::RepeatedPtrField< ::xviz::StyleClass >&
      style_classes() const;

  // repeated double transform = 11;
  int transform_size() const;
  void clear_transform();
  static const int kTransformFieldNumber = 11;
  double transform(int index) const;
  void set_transform(int index, double value);
  void add_transform(double value);
  const ::google::protobuf::RepeatedField< double >&
      transform() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_transform();

  // string source = 1;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // string units = 2;
  void clear_units();
  static const int kUnitsFieldNumber = 2;
  const ::std::string& units() const;
  void set_units(const ::std::string& value);
  #if LANG_CXX11
  void set_units(::std::string&& value);
  #endif
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  ::std::string* mutable_units();
  ::std::string* release_units();
  void set_allocated_units(::std::string* units);

  // string transform_callback = 12;
  void clear_transform_callback();
  static const int kTransformCallbackFieldNumber = 12;
  const ::std::string& transform_callback() const;
  void set_transform_callback(const ::std::string& value);
  #if LANG_CXX11
  void set_transform_callback(::std::string&& value);
  #endif
  void set_transform_callback(const char* value);
  void set_transform_callback(const char* value, size_t size);
  ::std::string* mutable_transform_callback();
  ::std::string* release_transform_callback();
  void set_allocated_transform_callback(::std::string* transform_callback);

  // .xviz.StyleStreamValue stream_style = 8;
  bool has_stream_style() const;
  void clear_stream_style();
  static const int kStreamStyleFieldNumber = 8;
  private:
  const ::xviz::StyleStreamValue& _internal_stream_style() const;
  public:
  const ::xviz::StyleStreamValue& stream_style() const;
  ::xviz::StyleStreamValue* release_stream_style();
  ::xviz::StyleStreamValue* mutable_stream_style();
  void set_allocated_stream_style(::xviz::StyleStreamValue* stream_style);

  // .xviz.StreamMetadata.Category category = 3;
  void clear_category();
  static const int kCategoryFieldNumber = 3;
  ::xviz::StreamMetadata_Category category() const;
  void set_category(::xviz::StreamMetadata_Category value);

  // .xviz.StreamMetadata.ScalarType scalar_type = 4;
  void clear_scalar_type();
  static const int kScalarTypeFieldNumber = 4;
  ::xviz::StreamMetadata_ScalarType scalar_type() const;
  void set_scalar_type(::xviz::StreamMetadata_ScalarType value);

  // .xviz.StreamMetadata.PrimitiveType primitive_type = 5;
  void clear_primitive_type();
  static const int kPrimitiveTypeFieldNumber = 5;
  ::xviz::StreamMetadata_PrimitiveType primitive_type() const;
  void set_primitive_type(::xviz::StreamMetadata_PrimitiveType value);

  // .xviz.StreamMetadata.UIPrimitiveType ui_primitive_type = 6;
  void clear_ui_primitive_type();
  static const int kUiPrimitiveTypeFieldNumber = 6;
  ::xviz::StreamMetadata_UIPrimitiveType ui_primitive_type() const;
  void set_ui_primitive_type(::xviz::StreamMetadata_UIPrimitiveType value);

  // .xviz.StreamMetadata.AnnotationType annotation_type = 7;
  void clear_annotation_type();
  static const int kAnnotationTypeFieldNumber = 7;
  ::xviz::StreamMetadata_AnnotationType annotation_type() const;
  void set_annotation_type(::xviz::StreamMetadata_AnnotationType value);

  // .xviz.StreamMetadata.CoordinateType coordinate = 10;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 10;
  ::xviz::StreamMetadata_CoordinateType coordinate() const;
  void set_coordinate(::xviz::StreamMetadata_CoordinateType value);

  // @@protoc_insertion_point(class_scope:xviz.StreamMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xviz::StyleClass > style_classes_;
  ::google::protobuf::RepeatedField< double > transform_;
  mutable int _transform_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr units_;
  ::google::protobuf::internal::ArenaStringPtr transform_callback_;
  ::xviz::StyleStreamValue* stream_style_;
  int category_;
  int scalar_type_;
  int primitive_type_;
  int ui_primitive_type_;
  int annotation_type_;
  int coordinate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.CameraInfo) */ {
 public:
  CameraInfo();
  virtual ~CameraInfo();

  CameraInfo(const CameraInfo& from);

  inline CameraInfo& operator=(const CameraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraInfo(CameraInfo&& from) noexcept
    : CameraInfo() {
    *this = ::std::move(from);
  }

  inline CameraInfo& operator=(CameraInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraInfo* internal_default_instance() {
    return reinterpret_cast<const CameraInfo*>(
               &_CameraInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CameraInfo* other);
  friend void swap(CameraInfo& a, CameraInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraInfo* New() const final {
    return CreateMaybeMessage<CameraInfo>(NULL);
  }

  CameraInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraInfo& from);
  void MergeFrom(const CameraInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double vehicle_position = 3;
  int vehicle_position_size() const;
  void clear_vehicle_position();
  static const int kVehiclePositionFieldNumber = 3;
  double vehicle_position(int index) const;
  void set_vehicle_position(int index, double value);
  void add_vehicle_position(double value);
  const ::google::protobuf::RepeatedField< double >&
      vehicle_position() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_vehicle_position();

  // repeated double vehicle_orientation = 4;
  int vehicle_orientation_size() const;
  void clear_vehicle_orientation();
  static const int kVehicleOrientationFieldNumber = 4;
  double vehicle_orientation(int index) const;
  void set_vehicle_orientation(int index, double value);
  void add_vehicle_orientation(double value);
  const ::google::protobuf::RepeatedField< double >&
      vehicle_orientation() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_vehicle_orientation();

  // repeated double rectification_projection = 7;
  int rectification_projection_size() const;
  void clear_rectification_projection();
  static const int kRectificationProjectionFieldNumber = 7;
  double rectification_projection(int index) const;
  void set_rectification_projection(int index, double value);
  void add_rectification_projection(double value);
  const ::google::protobuf::RepeatedField< double >&
      rectification_projection() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_rectification_projection();

  // repeated double gl_projection = 8;
  int gl_projection_size() const;
  void clear_gl_projection();
  static const int kGlProjectionFieldNumber = 8;
  double gl_projection(int index) const;
  void set_gl_projection(int index, double value);
  void add_gl_projection(double value);
  const ::google::protobuf::RepeatedField< double >&
      gl_projection() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_gl_projection();

  // string human_name = 1;
  void clear_human_name();
  static const int kHumanNameFieldNumber = 1;
  const ::std::string& human_name() const;
  void set_human_name(const ::std::string& value);
  #if LANG_CXX11
  void set_human_name(::std::string&& value);
  #endif
  void set_human_name(const char* value);
  void set_human_name(const char* value, size_t size);
  ::std::string* mutable_human_name();
  ::std::string* release_human_name();
  void set_allocated_human_name(::std::string* human_name);

  // string source = 2;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // double pixel_width = 5;
  void clear_pixel_width();
  static const int kPixelWidthFieldNumber = 5;
  double pixel_width() const;
  void set_pixel_width(double value);

  // double pixel_height = 6;
  void clear_pixel_height();
  static const int kPixelHeightFieldNumber = 6;
  double pixel_height() const;
  void set_pixel_height(double value);

  // @@protoc_insertion_point(class_scope:xviz.CameraInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > vehicle_position_;
  mutable int _vehicle_position_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > vehicle_orientation_;
  mutable int _vehicle_orientation_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > rectification_projection_;
  mutable int _rectification_projection_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > gl_projection_;
  mutable int _gl_projection_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr human_name_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  double pixel_width_;
  double pixel_height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UIPanelInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.UIPanelInfo) */ {
 public:
  UIPanelInfo();
  virtual ~UIPanelInfo();

  UIPanelInfo(const UIPanelInfo& from);

  inline UIPanelInfo& operator=(const UIPanelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UIPanelInfo(UIPanelInfo&& from) noexcept
    : UIPanelInfo() {
    *this = ::std::move(from);
  }

  inline UIPanelInfo& operator=(UIPanelInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UIPanelInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UIPanelInfo* internal_default_instance() {
    return reinterpret_cast<const UIPanelInfo*>(
               &_UIPanelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(UIPanelInfo* other);
  friend void swap(UIPanelInfo& a, UIPanelInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UIPanelInfo* New() const final {
    return CreateMaybeMessage<UIPanelInfo>(NULL);
  }

  UIPanelInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UIPanelInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UIPanelInfo& from);
  void MergeFrom(const UIPanelInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UIPanelInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string needed_streams = 2;
  int needed_streams_size() const;
  void clear_needed_streams();
  static const int kNeededStreamsFieldNumber = 2;
  const ::std::string& needed_streams(int index) const;
  ::std::string* mutable_needed_streams(int index);
  void set_needed_streams(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_needed_streams(int index, ::std::string&& value);
  #endif
  void set_needed_streams(int index, const char* value);
  void set_needed_streams(int index, const char* value, size_t size);
  ::std::string* add_needed_streams();
  void add_needed_streams(const ::std::string& value);
  #if LANG_CXX11
  void add_needed_streams(::std::string&& value);
  #endif
  void add_needed_streams(const char* value);
  void add_needed_streams(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& needed_streams() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_needed_streams();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Struct config = 3;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  private:
  const ::google::protobuf::Struct& _internal_config() const;
  public:
  const ::google::protobuf::Struct& config() const;
  ::google::protobuf::Struct* release_config();
  ::google::protobuf::Struct* mutable_config();
  void set_allocated_config(::google::protobuf::Struct* config);

  // @@protoc_insertion_point(class_scope:xviz.UIPanelInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> needed_streams_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Struct* config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_session_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.LogInfo) */ {
 public:
  LogInfo();
  virtual ~LogInfo();

  LogInfo(const LogInfo& from);

  inline LogInfo& operator=(const LogInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogInfo(LogInfo&& from) noexcept
    : LogInfo() {
    *this = ::std::move(from);
  }

  inline LogInfo& operator=(LogInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogInfo* internal_default_instance() {
    return reinterpret_cast<const LogInfo*>(
               &_LogInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(LogInfo* other);
  friend void swap(LogInfo& a, LogInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogInfo* New() const final {
    return CreateMaybeMessage<LogInfo>(NULL);
  }

  LogInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogInfo& from);
  void MergeFrom(const LogInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double start_time = 1;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  double start_time() const;
  void set_start_time(double value);

  // double end_time = 2;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  double end_time() const;
  void set_end_time(double value);

  // @@protoc_insertion_point(class_scope:xviz.LogInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double start_time_;
  double end_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_session_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Start

// string version = 1;
inline void Start::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Start::version() const {
  // @@protoc_insertion_point(field_get:xviz.Start.version)
  return version_.GetNoArena();
}
inline void Start::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Start.version)
}
#if LANG_CXX11
inline void Start::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.Start.version)
}
#endif
inline void Start::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Start.version)
}
inline void Start::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Start.version)
}
inline ::std::string* Start::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Start.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Start::release_version() {
  // @@protoc_insertion_point(field_release:xviz.Start.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Start::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:xviz.Start.version)
}

// string profile = 2;
inline void Start::clear_profile() {
  profile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Start::profile() const {
  // @@protoc_insertion_point(field_get:xviz.Start.profile)
  return profile_.GetNoArena();
}
inline void Start::set_profile(const ::std::string& value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Start.profile)
}
#if LANG_CXX11
inline void Start::set_profile(::std::string&& value) {
  
  profile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.Start.profile)
}
#endif
inline void Start::set_profile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Start.profile)
}
inline void Start::set_profile(const char* value, size_t size) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Start.profile)
}
inline ::std::string* Start::mutable_profile() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Start.profile)
  return profile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Start::release_profile() {
  // @@protoc_insertion_point(field_release:xviz.Start.profile)
  
  return profile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Start::set_allocated_profile(::std::string* profile) {
  if (profile != NULL) {
    
  } else {
    
  }
  profile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profile);
  // @@protoc_insertion_point(field_set_allocated:xviz.Start.profile)
}

// .xviz.SessionType session_type = 3;
inline void Start::clear_session_type() {
  session_type_ = 0;
}
inline ::xviz::SessionType Start::session_type() const {
  // @@protoc_insertion_point(field_get:xviz.Start.session_type)
  return static_cast< ::xviz::SessionType >(session_type_);
}
inline void Start::set_session_type(::xviz::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:xviz.Start.session_type)
}

// .xviz.Start.MessageFormat message_format = 4;
inline void Start::clear_message_format() {
  message_format_ = 0;
}
inline ::xviz::Start_MessageFormat Start::message_format() const {
  // @@protoc_insertion_point(field_get:xviz.Start.message_format)
  return static_cast< ::xviz::Start_MessageFormat >(message_format_);
}
inline void Start::set_message_format(::xviz::Start_MessageFormat value) {
  
  message_format_ = value;
  // @@protoc_insertion_point(field_set:xviz.Start.message_format)
}

// string log = 5;
inline void Start::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Start::log() const {
  // @@protoc_insertion_point(field_get:xviz.Start.log)
  return log_.GetNoArena();
}
inline void Start::set_log(const ::std::string& value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Start.log)
}
#if LANG_CXX11
inline void Start::set_log(::std::string&& value) {
  
  log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.Start.log)
}
#endif
inline void Start::set_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Start.log)
}
inline void Start::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Start.log)
}
inline ::std::string* Start::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Start.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Start::release_log() {
  // @@protoc_insertion_point(field_release:xviz.Start.log)
  
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Start::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:xviz.Start.log)
}

// -------------------------------------------------------------------

// TransformLog

// string id = 1;
inline void TransformLog::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransformLog::id() const {
  // @@protoc_insertion_point(field_get:xviz.TransformLog.id)
  return id_.GetNoArena();
}
inline void TransformLog::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.TransformLog.id)
}
#if LANG_CXX11
inline void TransformLog::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.TransformLog.id)
}
#endif
inline void TransformLog::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.TransformLog.id)
}
inline void TransformLog::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.TransformLog.id)
}
inline ::std::string* TransformLog::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:xviz.TransformLog.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransformLog::release_id() {
  // @@protoc_insertion_point(field_release:xviz.TransformLog.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransformLog::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:xviz.TransformLog.id)
}

// double start_timestamp = 2;
inline void TransformLog::clear_start_timestamp() {
  start_timestamp_ = 0;
}
inline double TransformLog::start_timestamp() const {
  // @@protoc_insertion_point(field_get:xviz.TransformLog.start_timestamp)
  return start_timestamp_;
}
inline void TransformLog::set_start_timestamp(double value) {
  
  start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:xviz.TransformLog.start_timestamp)
}

// double end_timestamp = 3;
inline void TransformLog::clear_end_timestamp() {
  end_timestamp_ = 0;
}
inline double TransformLog::end_timestamp() const {
  // @@protoc_insertion_point(field_get:xviz.TransformLog.end_timestamp)
  return end_timestamp_;
}
inline void TransformLog::set_end_timestamp(double value) {
  
  end_timestamp_ = value;
  // @@protoc_insertion_point(field_set:xviz.TransformLog.end_timestamp)
}

// repeated string desired_streams = 4;
inline int TransformLog::desired_streams_size() const {
  return desired_streams_.size();
}
inline void TransformLog::clear_desired_streams() {
  desired_streams_.Clear();
}
inline const ::std::string& TransformLog::desired_streams(int index) const {
  // @@protoc_insertion_point(field_get:xviz.TransformLog.desired_streams)
  return desired_streams_.Get(index);
}
inline ::std::string* TransformLog::mutable_desired_streams(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.TransformLog.desired_streams)
  return desired_streams_.Mutable(index);
}
inline void TransformLog::set_desired_streams(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.TransformLog.desired_streams)
  desired_streams_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TransformLog::set_desired_streams(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:xviz.TransformLog.desired_streams)
  desired_streams_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TransformLog::set_desired_streams(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  desired_streams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.TransformLog.desired_streams)
}
inline void TransformLog::set_desired_streams(int index, const char* value, size_t size) {
  desired_streams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.TransformLog.desired_streams)
}
inline ::std::string* TransformLog::add_desired_streams() {
  // @@protoc_insertion_point(field_add_mutable:xviz.TransformLog.desired_streams)
  return desired_streams_.Add();
}
inline void TransformLog::add_desired_streams(const ::std::string& value) {
  desired_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.TransformLog.desired_streams)
}
#if LANG_CXX11
inline void TransformLog::add_desired_streams(::std::string&& value) {
  desired_streams_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xviz.TransformLog.desired_streams)
}
#endif
inline void TransformLog::add_desired_streams(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  desired_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.TransformLog.desired_streams)
}
inline void TransformLog::add_desired_streams(const char* value, size_t size) {
  desired_streams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.TransformLog.desired_streams)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransformLog::desired_streams() const {
  // @@protoc_insertion_point(field_list:xviz.TransformLog.desired_streams)
  return desired_streams_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TransformLog::mutable_desired_streams() {
  // @@protoc_insertion_point(field_mutable_list:xviz.TransformLog.desired_streams)
  return &desired_streams_;
}

// -------------------------------------------------------------------

// StateUpdate

// .xviz.StateUpdate.UpdateType update_type = 1;
inline void StateUpdate::clear_update_type() {
  update_type_ = 0;
}
inline ::xviz::StateUpdate_UpdateType StateUpdate::update_type() const {
  // @@protoc_insertion_point(field_get:xviz.StateUpdate.update_type)
  return static_cast< ::xviz::StateUpdate_UpdateType >(update_type_);
}
inline void StateUpdate::set_update_type(::xviz::StateUpdate_UpdateType value) {
  
  update_type_ = value;
  // @@protoc_insertion_point(field_set:xviz.StateUpdate.update_type)
}

// repeated .xviz.StreamSet updates = 2;
inline int StateUpdate::updates_size() const {
  return updates_.size();
}
inline ::xviz::StreamSet* StateUpdate::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.StateUpdate.updates)
  return updates_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::xviz::StreamSet >*
StateUpdate::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:xviz.StateUpdate.updates)
  return &updates_;
}
inline const ::xviz::StreamSet& StateUpdate::updates(int index) const {
  // @@protoc_insertion_point(field_get:xviz.StateUpdate.updates)
  return updates_.Get(index);
}
inline ::xviz::StreamSet* StateUpdate::add_updates() {
  // @@protoc_insertion_point(field_add:xviz.StateUpdate.updates)
  return updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::xviz::StreamSet >&
StateUpdate::updates() const {
  // @@protoc_insertion_point(field_list:xviz.StateUpdate.updates)
  return updates_;
}

// -------------------------------------------------------------------

// TransformLogDone

// string id = 1;
inline void TransformLogDone::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransformLogDone::id() const {
  // @@protoc_insertion_point(field_get:xviz.TransformLogDone.id)
  return id_.GetNoArena();
}
inline void TransformLogDone::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.TransformLogDone.id)
}
#if LANG_CXX11
inline void TransformLogDone::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.TransformLogDone.id)
}
#endif
inline void TransformLogDone::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.TransformLogDone.id)
}
inline void TransformLogDone::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.TransformLogDone.id)
}
inline ::std::string* TransformLogDone::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:xviz.TransformLogDone.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransformLogDone::release_id() {
  // @@protoc_insertion_point(field_release:xviz.TransformLogDone.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransformLogDone::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:xviz.TransformLogDone.id)
}

// -------------------------------------------------------------------

// TransformPointInTime

// string id = 1;
inline void TransformPointInTime::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransformPointInTime::id() const {
  // @@protoc_insertion_point(field_get:xviz.TransformPointInTime.id)
  return id_.GetNoArena();
}
inline void TransformPointInTime::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.TransformPointInTime.id)
}
#if LANG_CXX11
inline void TransformPointInTime::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.TransformPointInTime.id)
}
#endif
inline void TransformPointInTime::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.TransformPointInTime.id)
}
inline void TransformPointInTime::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.TransformPointInTime.id)
}
inline ::std::string* TransformPointInTime::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:xviz.TransformPointInTime.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransformPointInTime::release_id() {
  // @@protoc_insertion_point(field_release:xviz.TransformPointInTime.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransformPointInTime::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:xviz.TransformPointInTime.id)
}

// double query_timestamp = 2;
inline void TransformPointInTime::clear_query_timestamp() {
  query_timestamp_ = 0;
}
inline double TransformPointInTime::query_timestamp() const {
  // @@protoc_insertion_point(field_get:xviz.TransformPointInTime.query_timestamp)
  return query_timestamp_;
}
inline void TransformPointInTime::set_query_timestamp(double value) {
  
  query_timestamp_ = value;
  // @@protoc_insertion_point(field_set:xviz.TransformPointInTime.query_timestamp)
}

// repeated string desired_streams = 3;
inline int TransformPointInTime::desired_streams_size() const {
  return desired_streams_.size();
}
inline void TransformPointInTime::clear_desired_streams() {
  desired_streams_.Clear();
}
inline const ::std::string& TransformPointInTime::desired_streams(int index) const {
  // @@protoc_insertion_point(field_get:xviz.TransformPointInTime.desired_streams)
  return desired_streams_.Get(index);
}
inline ::std::string* TransformPointInTime::mutable_desired_streams(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.TransformPointInTime.desired_streams)
  return desired_streams_.Mutable(index);
}
inline void TransformPointInTime::set_desired_streams(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.TransformPointInTime.desired_streams)
  desired_streams_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TransformPointInTime::set_desired_streams(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:xviz.TransformPointInTime.desired_streams)
  desired_streams_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TransformPointInTime::set_desired_streams(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  desired_streams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.TransformPointInTime.desired_streams)
}
inline void TransformPointInTime::set_desired_streams(int index, const char* value, size_t size) {
  desired_streams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.TransformPointInTime.desired_streams)
}
inline ::std::string* TransformPointInTime::add_desired_streams() {
  // @@protoc_insertion_point(field_add_mutable:xviz.TransformPointInTime.desired_streams)
  return desired_streams_.Add();
}
inline void TransformPointInTime::add_desired_streams(const ::std::string& value) {
  desired_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.TransformPointInTime.desired_streams)
}
#if LANG_CXX11
inline void TransformPointInTime::add_desired_streams(::std::string&& value) {
  desired_streams_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xviz.TransformPointInTime.desired_streams)
}
#endif
inline void TransformPointInTime::add_desired_streams(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  desired_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.TransformPointInTime.desired_streams)
}
inline void TransformPointInTime::add_desired_streams(const char* value, size_t size) {
  desired_streams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.TransformPointInTime.desired_streams)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransformPointInTime::desired_streams() const {
  // @@protoc_insertion_point(field_list:xviz.TransformPointInTime.desired_streams)
  return desired_streams_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TransformPointInTime::mutable_desired_streams() {
  // @@protoc_insertion_point(field_mutable_list:xviz.TransformPointInTime.desired_streams)
  return &desired_streams_;
}

// -------------------------------------------------------------------

// Reconfigure

// .xviz.Reconfigure.UpdateType update_type = 1;
inline void Reconfigure::clear_update_type() {
  update_type_ = 0;
}
inline ::xviz::Reconfigure_UpdateType Reconfigure::update_type() const {
  // @@protoc_insertion_point(field_get:xviz.Reconfigure.update_type)
  return static_cast< ::xviz::Reconfigure_UpdateType >(update_type_);
}
inline void Reconfigure::set_update_type(::xviz::Reconfigure_UpdateType value) {
  
  update_type_ = value;
  // @@protoc_insertion_point(field_set:xviz.Reconfigure.update_type)
}

// .google.protobuf.Struct config_update = 2;
inline bool Reconfigure::has_config_update() const {
  return this != internal_default_instance() && config_update_ != NULL;
}
inline const ::google::protobuf::Struct& Reconfigure::_internal_config_update() const {
  return *config_update_;
}
inline const ::google::protobuf::Struct& Reconfigure::config_update() const {
  const ::google::protobuf::Struct* p = config_update_;
  // @@protoc_insertion_point(field_get:xviz.Reconfigure.config_update)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* Reconfigure::release_config_update() {
  // @@protoc_insertion_point(field_release:xviz.Reconfigure.config_update)
  
  ::google::protobuf::Struct* temp = config_update_;
  config_update_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* Reconfigure::mutable_config_update() {
  
  if (config_update_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    config_update_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Reconfigure.config_update)
  return config_update_;
}
inline void Reconfigure::set_allocated_config_update(::google::protobuf::Struct* config_update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(config_update_);
  }
  if (config_update) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(config_update)->GetArena();
    if (message_arena != submessage_arena) {
      config_update = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config_update, submessage_arena);
    }
    
  } else {
    
  }
  config_update_ = config_update;
  // @@protoc_insertion_point(field_set_allocated:xviz.Reconfigure.config_update)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Metadata

// string version = 1;
inline void Metadata::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Metadata::version() const {
  // @@protoc_insertion_point(field_get:xviz.Metadata.version)
  return version_.GetNoArena();
}
inline void Metadata::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Metadata.version)
}
#if LANG_CXX11
inline void Metadata::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.Metadata.version)
}
#endif
inline void Metadata::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Metadata.version)
}
inline void Metadata::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Metadata.version)
}
inline ::std::string* Metadata::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Metadata.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metadata::release_version() {
  // @@protoc_insertion_point(field_release:xviz.Metadata.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:xviz.Metadata.version)
}

// map<string, .xviz.StreamMetadata> streams = 2;
inline int Metadata::streams_size() const {
  return streams_.size();
}
inline void Metadata::clear_streams() {
  streams_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::xviz::StreamMetadata >&
Metadata::streams() const {
  // @@protoc_insertion_point(field_map:xviz.Metadata.streams)
  return streams_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::xviz::StreamMetadata >*
Metadata::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_map:xviz.Metadata.streams)
  return streams_.MutableMap();
}

// map<string, .xviz.CameraInfo> cameras = 3;
inline int Metadata::cameras_size() const {
  return cameras_.size();
}
inline void Metadata::clear_cameras() {
  cameras_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::xviz::CameraInfo >&
Metadata::cameras() const {
  // @@protoc_insertion_point(field_map:xviz.Metadata.cameras)
  return cameras_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::xviz::CameraInfo >*
Metadata::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_map:xviz.Metadata.cameras)
  return cameras_.MutableMap();
}

// map<string, string> stream_aliases = 4;
inline int Metadata::stream_aliases_size() const {
  return stream_aliases_.size();
}
inline void Metadata::clear_stream_aliases() {
  stream_aliases_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Metadata::stream_aliases() const {
  // @@protoc_insertion_point(field_map:xviz.Metadata.stream_aliases)
  return stream_aliases_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Metadata::mutable_stream_aliases() {
  // @@protoc_insertion_point(field_mutable_map:xviz.Metadata.stream_aliases)
  return stream_aliases_.MutableMap();
}

// map<string, .xviz.UIPanelInfo> ui_config = 5;
inline int Metadata::ui_config_size() const {
  return ui_config_.size();
}
inline void Metadata::clear_ui_config() {
  ui_config_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::xviz::UIPanelInfo >&
Metadata::ui_config() const {
  // @@protoc_insertion_point(field_map:xviz.Metadata.ui_config)
  return ui_config_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::xviz::UIPanelInfo >*
Metadata::mutable_ui_config() {
  // @@protoc_insertion_point(field_mutable_map:xviz.Metadata.ui_config)
  return ui_config_.MutableMap();
}

// .xviz.LogInfo log_info = 6;
inline bool Metadata::has_log_info() const {
  return this != internal_default_instance() && log_info_ != NULL;
}
inline void Metadata::clear_log_info() {
  if (GetArenaNoVirtual() == NULL && log_info_ != NULL) {
    delete log_info_;
  }
  log_info_ = NULL;
}
inline const ::xviz::LogInfo& Metadata::_internal_log_info() const {
  return *log_info_;
}
inline const ::xviz::LogInfo& Metadata::log_info() const {
  const ::xviz::LogInfo* p = log_info_;
  // @@protoc_insertion_point(field_get:xviz.Metadata.log_info)
  return p != NULL ? *p : *reinterpret_cast<const ::xviz::LogInfo*>(
      &::xviz::_LogInfo_default_instance_);
}
inline ::xviz::LogInfo* Metadata::release_log_info() {
  // @@protoc_insertion_point(field_release:xviz.Metadata.log_info)
  
  ::xviz::LogInfo* temp = log_info_;
  log_info_ = NULL;
  return temp;
}
inline ::xviz::LogInfo* Metadata::mutable_log_info() {
  
  if (log_info_ == NULL) {
    auto* p = CreateMaybeMessage<::xviz::LogInfo>(GetArenaNoVirtual());
    log_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Metadata.log_info)
  return log_info_;
}
inline void Metadata::set_allocated_log_info(::xviz::LogInfo* log_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete log_info_;
  }
  if (log_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log_info, submessage_arena);
    }
    
  } else {
    
  }
  log_info_ = log_info;
  // @@protoc_insertion_point(field_set_allocated:xviz.Metadata.log_info)
}

// -------------------------------------------------------------------

// Error

// string message = 1;
inline void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:xviz.Error.message)
  return message_.GetNoArena();
}
inline void Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.Error.message)
}
#if LANG_CXX11
inline void Error::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.Error.message)
}
#endif
inline void Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Error.message)
}
inline void Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Error.message)
}
inline ::std::string* Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:xviz.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:xviz.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:xviz.Error.message)
}

// -------------------------------------------------------------------

// StreamMetadata

// string source = 1;
inline void StreamMetadata::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamMetadata::source() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.source)
  return source_.GetNoArena();
}
inline void StreamMetadata::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.source)
}
#if LANG_CXX11
inline void StreamMetadata::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.StreamMetadata.source)
}
#endif
inline void StreamMetadata::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StreamMetadata.source)
}
inline void StreamMetadata::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StreamMetadata.source)
}
inline ::std::string* StreamMetadata::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StreamMetadata.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamMetadata::release_source() {
  // @@protoc_insertion_point(field_release:xviz.StreamMetadata.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamMetadata::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:xviz.StreamMetadata.source)
}

// string units = 2;
inline void StreamMetadata::clear_units() {
  units_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamMetadata::units() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.units)
  return units_.GetNoArena();
}
inline void StreamMetadata::set_units(const ::std::string& value) {
  
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.units)
}
#if LANG_CXX11
inline void StreamMetadata::set_units(::std::string&& value) {
  
  units_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.StreamMetadata.units)
}
#endif
inline void StreamMetadata::set_units(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StreamMetadata.units)
}
inline void StreamMetadata::set_units(const char* value, size_t size) {
  
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StreamMetadata.units)
}
inline ::std::string* StreamMetadata::mutable_units() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StreamMetadata.units)
  return units_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamMetadata::release_units() {
  // @@protoc_insertion_point(field_release:xviz.StreamMetadata.units)
  
  return units_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamMetadata::set_allocated_units(::std::string* units) {
  if (units != NULL) {
    
  } else {
    
  }
  units_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), units);
  // @@protoc_insertion_point(field_set_allocated:xviz.StreamMetadata.units)
}

// .xviz.StreamMetadata.Category category = 3;
inline void StreamMetadata::clear_category() {
  category_ = 0;
}
inline ::xviz::StreamMetadata_Category StreamMetadata::category() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.category)
  return static_cast< ::xviz::StreamMetadata_Category >(category_);
}
inline void StreamMetadata::set_category(::xviz::StreamMetadata_Category value) {
  
  category_ = value;
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.category)
}

// .xviz.StreamMetadata.ScalarType scalar_type = 4;
inline void StreamMetadata::clear_scalar_type() {
  scalar_type_ = 0;
}
inline ::xviz::StreamMetadata_ScalarType StreamMetadata::scalar_type() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.scalar_type)
  return static_cast< ::xviz::StreamMetadata_ScalarType >(scalar_type_);
}
inline void StreamMetadata::set_scalar_type(::xviz::StreamMetadata_ScalarType value) {
  
  scalar_type_ = value;
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.scalar_type)
}

// .xviz.StreamMetadata.PrimitiveType primitive_type = 5;
inline void StreamMetadata::clear_primitive_type() {
  primitive_type_ = 0;
}
inline ::xviz::StreamMetadata_PrimitiveType StreamMetadata::primitive_type() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.primitive_type)
  return static_cast< ::xviz::StreamMetadata_PrimitiveType >(primitive_type_);
}
inline void StreamMetadata::set_primitive_type(::xviz::StreamMetadata_PrimitiveType value) {
  
  primitive_type_ = value;
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.primitive_type)
}

// .xviz.StreamMetadata.UIPrimitiveType ui_primitive_type = 6;
inline void StreamMetadata::clear_ui_primitive_type() {
  ui_primitive_type_ = 0;
}
inline ::xviz::StreamMetadata_UIPrimitiveType StreamMetadata::ui_primitive_type() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.ui_primitive_type)
  return static_cast< ::xviz::StreamMetadata_UIPrimitiveType >(ui_primitive_type_);
}
inline void StreamMetadata::set_ui_primitive_type(::xviz::StreamMetadata_UIPrimitiveType value) {
  
  ui_primitive_type_ = value;
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.ui_primitive_type)
}

// .xviz.StreamMetadata.AnnotationType annotation_type = 7;
inline void StreamMetadata::clear_annotation_type() {
  annotation_type_ = 0;
}
inline ::xviz::StreamMetadata_AnnotationType StreamMetadata::annotation_type() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.annotation_type)
  return static_cast< ::xviz::StreamMetadata_AnnotationType >(annotation_type_);
}
inline void StreamMetadata::set_annotation_type(::xviz::StreamMetadata_AnnotationType value) {
  
  annotation_type_ = value;
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.annotation_type)
}

// .xviz.StyleStreamValue stream_style = 8;
inline bool StreamMetadata::has_stream_style() const {
  return this != internal_default_instance() && stream_style_ != NULL;
}
inline const ::xviz::StyleStreamValue& StreamMetadata::_internal_stream_style() const {
  return *stream_style_;
}
inline const ::xviz::StyleStreamValue& StreamMetadata::stream_style() const {
  const ::xviz::StyleStreamValue* p = stream_style_;
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.stream_style)
  return p != NULL ? *p : *reinterpret_cast<const ::xviz::StyleStreamValue*>(
      &::xviz::_StyleStreamValue_default_instance_);
}
inline ::xviz::StyleStreamValue* StreamMetadata::release_stream_style() {
  // @@protoc_insertion_point(field_release:xviz.StreamMetadata.stream_style)
  
  ::xviz::StyleStreamValue* temp = stream_style_;
  stream_style_ = NULL;
  return temp;
}
inline ::xviz::StyleStreamValue* StreamMetadata::mutable_stream_style() {
  
  if (stream_style_ == NULL) {
    auto* p = CreateMaybeMessage<::xviz::StyleStreamValue>(GetArenaNoVirtual());
    stream_style_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xviz.StreamMetadata.stream_style)
  return stream_style_;
}
inline void StreamMetadata::set_allocated_stream_style(::xviz::StyleStreamValue* stream_style) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stream_style_);
  }
  if (stream_style) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stream_style = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stream_style, submessage_arena);
    }
    
  } else {
    
  }
  stream_style_ = stream_style;
  // @@protoc_insertion_point(field_set_allocated:xviz.StreamMetadata.stream_style)
}

// repeated .xviz.StyleClass style_classes = 9;
inline int StreamMetadata::style_classes_size() const {
  return style_classes_.size();
}
inline ::xviz::StyleClass* StreamMetadata::mutable_style_classes(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.StreamMetadata.style_classes)
  return style_classes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::xviz::StyleClass >*
StreamMetadata::mutable_style_classes() {
  // @@protoc_insertion_point(field_mutable_list:xviz.StreamMetadata.style_classes)
  return &style_classes_;
}
inline const ::xviz::StyleClass& StreamMetadata::style_classes(int index) const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.style_classes)
  return style_classes_.Get(index);
}
inline ::xviz::StyleClass* StreamMetadata::add_style_classes() {
  // @@protoc_insertion_point(field_add:xviz.StreamMetadata.style_classes)
  return style_classes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::xviz::StyleClass >&
StreamMetadata::style_classes() const {
  // @@protoc_insertion_point(field_list:xviz.StreamMetadata.style_classes)
  return style_classes_;
}

// .xviz.StreamMetadata.CoordinateType coordinate = 10;
inline void StreamMetadata::clear_coordinate() {
  coordinate_ = 0;
}
inline ::xviz::StreamMetadata_CoordinateType StreamMetadata::coordinate() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.coordinate)
  return static_cast< ::xviz::StreamMetadata_CoordinateType >(coordinate_);
}
inline void StreamMetadata::set_coordinate(::xviz::StreamMetadata_CoordinateType value) {
  
  coordinate_ = value;
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.coordinate)
}

// repeated double transform = 11;
inline int StreamMetadata::transform_size() const {
  return transform_.size();
}
inline void StreamMetadata::clear_transform() {
  transform_.Clear();
}
inline double StreamMetadata::transform(int index) const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.transform)
  return transform_.Get(index);
}
inline void StreamMetadata::set_transform(int index, double value) {
  transform_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.transform)
}
inline void StreamMetadata::add_transform(double value) {
  transform_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.StreamMetadata.transform)
}
inline const ::google::protobuf::RepeatedField< double >&
StreamMetadata::transform() const {
  // @@protoc_insertion_point(field_list:xviz.StreamMetadata.transform)
  return transform_;
}
inline ::google::protobuf::RepeatedField< double >*
StreamMetadata::mutable_transform() {
  // @@protoc_insertion_point(field_mutable_list:xviz.StreamMetadata.transform)
  return &transform_;
}

// string transform_callback = 12;
inline void StreamMetadata::clear_transform_callback() {
  transform_callback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamMetadata::transform_callback() const {
  // @@protoc_insertion_point(field_get:xviz.StreamMetadata.transform_callback)
  return transform_callback_.GetNoArena();
}
inline void StreamMetadata::set_transform_callback(const ::std::string& value) {
  
  transform_callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.StreamMetadata.transform_callback)
}
#if LANG_CXX11
inline void StreamMetadata::set_transform_callback(::std::string&& value) {
  
  transform_callback_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.StreamMetadata.transform_callback)
}
#endif
inline void StreamMetadata::set_transform_callback(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transform_callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StreamMetadata.transform_callback)
}
inline void StreamMetadata::set_transform_callback(const char* value, size_t size) {
  
  transform_callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StreamMetadata.transform_callback)
}
inline ::std::string* StreamMetadata::mutable_transform_callback() {
  
  // @@protoc_insertion_point(field_mutable:xviz.StreamMetadata.transform_callback)
  return transform_callback_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamMetadata::release_transform_callback() {
  // @@protoc_insertion_point(field_release:xviz.StreamMetadata.transform_callback)
  
  return transform_callback_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamMetadata::set_allocated_transform_callback(::std::string* transform_callback) {
  if (transform_callback != NULL) {
    
  } else {
    
  }
  transform_callback_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transform_callback);
  // @@protoc_insertion_point(field_set_allocated:xviz.StreamMetadata.transform_callback)
}

// -------------------------------------------------------------------

// CameraInfo

// string human_name = 1;
inline void CameraInfo::clear_human_name() {
  human_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CameraInfo::human_name() const {
  // @@protoc_insertion_point(field_get:xviz.CameraInfo.human_name)
  return human_name_.GetNoArena();
}
inline void CameraInfo::set_human_name(const ::std::string& value) {
  
  human_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.CameraInfo.human_name)
}
#if LANG_CXX11
inline void CameraInfo::set_human_name(::std::string&& value) {
  
  human_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.CameraInfo.human_name)
}
#endif
inline void CameraInfo::set_human_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  human_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.CameraInfo.human_name)
}
inline void CameraInfo::set_human_name(const char* value, size_t size) {
  
  human_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.CameraInfo.human_name)
}
inline ::std::string* CameraInfo::mutable_human_name() {
  
  // @@protoc_insertion_point(field_mutable:xviz.CameraInfo.human_name)
  return human_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraInfo::release_human_name() {
  // @@protoc_insertion_point(field_release:xviz.CameraInfo.human_name)
  
  return human_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraInfo::set_allocated_human_name(::std::string* human_name) {
  if (human_name != NULL) {
    
  } else {
    
  }
  human_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), human_name);
  // @@protoc_insertion_point(field_set_allocated:xviz.CameraInfo.human_name)
}

// string source = 2;
inline void CameraInfo::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CameraInfo::source() const {
  // @@protoc_insertion_point(field_get:xviz.CameraInfo.source)
  return source_.GetNoArena();
}
inline void CameraInfo::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.CameraInfo.source)
}
#if LANG_CXX11
inline void CameraInfo::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.CameraInfo.source)
}
#endif
inline void CameraInfo::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.CameraInfo.source)
}
inline void CameraInfo::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.CameraInfo.source)
}
inline ::std::string* CameraInfo::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:xviz.CameraInfo.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraInfo::release_source() {
  // @@protoc_insertion_point(field_release:xviz.CameraInfo.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraInfo::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:xviz.CameraInfo.source)
}

// repeated double vehicle_position = 3;
inline int CameraInfo::vehicle_position_size() const {
  return vehicle_position_.size();
}
inline void CameraInfo::clear_vehicle_position() {
  vehicle_position_.Clear();
}
inline double CameraInfo::vehicle_position(int index) const {
  // @@protoc_insertion_point(field_get:xviz.CameraInfo.vehicle_position)
  return vehicle_position_.Get(index);
}
inline void CameraInfo::set_vehicle_position(int index, double value) {
  vehicle_position_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.CameraInfo.vehicle_position)
}
inline void CameraInfo::add_vehicle_position(double value) {
  vehicle_position_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.CameraInfo.vehicle_position)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraInfo::vehicle_position() const {
  // @@protoc_insertion_point(field_list:xviz.CameraInfo.vehicle_position)
  return vehicle_position_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraInfo::mutable_vehicle_position() {
  // @@protoc_insertion_point(field_mutable_list:xviz.CameraInfo.vehicle_position)
  return &vehicle_position_;
}

// repeated double vehicle_orientation = 4;
inline int CameraInfo::vehicle_orientation_size() const {
  return vehicle_orientation_.size();
}
inline void CameraInfo::clear_vehicle_orientation() {
  vehicle_orientation_.Clear();
}
inline double CameraInfo::vehicle_orientation(int index) const {
  // @@protoc_insertion_point(field_get:xviz.CameraInfo.vehicle_orientation)
  return vehicle_orientation_.Get(index);
}
inline void CameraInfo::set_vehicle_orientation(int index, double value) {
  vehicle_orientation_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.CameraInfo.vehicle_orientation)
}
inline void CameraInfo::add_vehicle_orientation(double value) {
  vehicle_orientation_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.CameraInfo.vehicle_orientation)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraInfo::vehicle_orientation() const {
  // @@protoc_insertion_point(field_list:xviz.CameraInfo.vehicle_orientation)
  return vehicle_orientation_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraInfo::mutable_vehicle_orientation() {
  // @@protoc_insertion_point(field_mutable_list:xviz.CameraInfo.vehicle_orientation)
  return &vehicle_orientation_;
}

// double pixel_width = 5;
inline void CameraInfo::clear_pixel_width() {
  pixel_width_ = 0;
}
inline double CameraInfo::pixel_width() const {
  // @@protoc_insertion_point(field_get:xviz.CameraInfo.pixel_width)
  return pixel_width_;
}
inline void CameraInfo::set_pixel_width(double value) {
  
  pixel_width_ = value;
  // @@protoc_insertion_point(field_set:xviz.CameraInfo.pixel_width)
}

// double pixel_height = 6;
inline void CameraInfo::clear_pixel_height() {
  pixel_height_ = 0;
}
inline double CameraInfo::pixel_height() const {
  // @@protoc_insertion_point(field_get:xviz.CameraInfo.pixel_height)
  return pixel_height_;
}
inline void CameraInfo::set_pixel_height(double value) {
  
  pixel_height_ = value;
  // @@protoc_insertion_point(field_set:xviz.CameraInfo.pixel_height)
}

// repeated double rectification_projection = 7;
inline int CameraInfo::rectification_projection_size() const {
  return rectification_projection_.size();
}
inline void CameraInfo::clear_rectification_projection() {
  rectification_projection_.Clear();
}
inline double CameraInfo::rectification_projection(int index) const {
  // @@protoc_insertion_point(field_get:xviz.CameraInfo.rectification_projection)
  return rectification_projection_.Get(index);
}
inline void CameraInfo::set_rectification_projection(int index, double value) {
  rectification_projection_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.CameraInfo.rectification_projection)
}
inline void CameraInfo::add_rectification_projection(double value) {
  rectification_projection_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.CameraInfo.rectification_projection)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraInfo::rectification_projection() const {
  // @@protoc_insertion_point(field_list:xviz.CameraInfo.rectification_projection)
  return rectification_projection_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraInfo::mutable_rectification_projection() {
  // @@protoc_insertion_point(field_mutable_list:xviz.CameraInfo.rectification_projection)
  return &rectification_projection_;
}

// repeated double gl_projection = 8;
inline int CameraInfo::gl_projection_size() const {
  return gl_projection_.size();
}
inline void CameraInfo::clear_gl_projection() {
  gl_projection_.Clear();
}
inline double CameraInfo::gl_projection(int index) const {
  // @@protoc_insertion_point(field_get:xviz.CameraInfo.gl_projection)
  return gl_projection_.Get(index);
}
inline void CameraInfo::set_gl_projection(int index, double value) {
  gl_projection_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.CameraInfo.gl_projection)
}
inline void CameraInfo::add_gl_projection(double value) {
  gl_projection_.Add(value);
  // @@protoc_insertion_point(field_add:xviz.CameraInfo.gl_projection)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraInfo::gl_projection() const {
  // @@protoc_insertion_point(field_list:xviz.CameraInfo.gl_projection)
  return gl_projection_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraInfo::mutable_gl_projection() {
  // @@protoc_insertion_point(field_mutable_list:xviz.CameraInfo.gl_projection)
  return &gl_projection_;
}

// -------------------------------------------------------------------

// UIPanelInfo

// string name = 1;
inline void UIPanelInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UIPanelInfo::name() const {
  // @@protoc_insertion_point(field_get:xviz.UIPanelInfo.name)
  return name_.GetNoArena();
}
inline void UIPanelInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.UIPanelInfo.name)
}
#if LANG_CXX11
inline void UIPanelInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.UIPanelInfo.name)
}
#endif
inline void UIPanelInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.UIPanelInfo.name)
}
inline void UIPanelInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.UIPanelInfo.name)
}
inline ::std::string* UIPanelInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:xviz.UIPanelInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UIPanelInfo::release_name() {
  // @@protoc_insertion_point(field_release:xviz.UIPanelInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UIPanelInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:xviz.UIPanelInfo.name)
}

// repeated string needed_streams = 2;
inline int UIPanelInfo::needed_streams_size() const {
  return needed_streams_.size();
}
inline void UIPanelInfo::clear_needed_streams() {
  needed_streams_.Clear();
}
inline const ::std::string& UIPanelInfo::needed_streams(int index) const {
  // @@protoc_insertion_point(field_get:xviz.UIPanelInfo.needed_streams)
  return needed_streams_.Get(index);
}
inline ::std::string* UIPanelInfo::mutable_needed_streams(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.UIPanelInfo.needed_streams)
  return needed_streams_.Mutable(index);
}
inline void UIPanelInfo::set_needed_streams(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.UIPanelInfo.needed_streams)
  needed_streams_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UIPanelInfo::set_needed_streams(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:xviz.UIPanelInfo.needed_streams)
  needed_streams_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UIPanelInfo::set_needed_streams(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  needed_streams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.UIPanelInfo.needed_streams)
}
inline void UIPanelInfo::set_needed_streams(int index, const char* value, size_t size) {
  needed_streams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.UIPanelInfo.needed_streams)
}
inline ::std::string* UIPanelInfo::add_needed_streams() {
  // @@protoc_insertion_point(field_add_mutable:xviz.UIPanelInfo.needed_streams)
  return needed_streams_.Add();
}
inline void UIPanelInfo::add_needed_streams(const ::std::string& value) {
  needed_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.UIPanelInfo.needed_streams)
}
#if LANG_CXX11
inline void UIPanelInfo::add_needed_streams(::std::string&& value) {
  needed_streams_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xviz.UIPanelInfo.needed_streams)
}
#endif
inline void UIPanelInfo::add_needed_streams(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  needed_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.UIPanelInfo.needed_streams)
}
inline void UIPanelInfo::add_needed_streams(const char* value, size_t size) {
  needed_streams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.UIPanelInfo.needed_streams)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UIPanelInfo::needed_streams() const {
  // @@protoc_insertion_point(field_list:xviz.UIPanelInfo.needed_streams)
  return needed_streams_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UIPanelInfo::mutable_needed_streams() {
  // @@protoc_insertion_point(field_mutable_list:xviz.UIPanelInfo.needed_streams)
  return &needed_streams_;
}

// .google.protobuf.Struct config = 3;
inline bool UIPanelInfo::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline const ::google::protobuf::Struct& UIPanelInfo::_internal_config() const {
  return *config_;
}
inline const ::google::protobuf::Struct& UIPanelInfo::config() const {
  const ::google::protobuf::Struct* p = config_;
  // @@protoc_insertion_point(field_get:xviz.UIPanelInfo.config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* UIPanelInfo::release_config() {
  // @@protoc_insertion_point(field_release:xviz.UIPanelInfo.config)
  
  ::google::protobuf::Struct* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* UIPanelInfo::mutable_config() {
  
  if (config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xviz.UIPanelInfo.config)
  return config_;
}
inline void UIPanelInfo::set_allocated_config(::google::protobuf::Struct* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(config_);
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(config)->GetArena();
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:xviz.UIPanelInfo.config)
}

// -------------------------------------------------------------------

// LogInfo

// double start_time = 1;
inline void LogInfo::clear_start_time() {
  start_time_ = 0;
}
inline double LogInfo::start_time() const {
  // @@protoc_insertion_point(field_get:xviz.LogInfo.start_time)
  return start_time_;
}
inline void LogInfo::set_start_time(double value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:xviz.LogInfo.start_time)
}

// double end_time = 2;
inline void LogInfo::clear_end_time() {
  end_time_ = 0;
}
inline double LogInfo::end_time() const {
  // @@protoc_insertion_point(field_get:xviz.LogInfo.end_time)
  return end_time_;
}
inline void LogInfo::set_end_time(double value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:xviz.LogInfo.end_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xviz::Start_MessageFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::Start_MessageFormat>() {
  return ::xviz::Start_MessageFormat_descriptor();
}
template <> struct is_proto_enum< ::xviz::StateUpdate_UpdateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::StateUpdate_UpdateType>() {
  return ::xviz::StateUpdate_UpdateType_descriptor();
}
template <> struct is_proto_enum< ::xviz::Reconfigure_UpdateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::Reconfigure_UpdateType>() {
  return ::xviz::Reconfigure_UpdateType_descriptor();
}
template <> struct is_proto_enum< ::xviz::StreamMetadata_Category> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::StreamMetadata_Category>() {
  return ::xviz::StreamMetadata_Category_descriptor();
}
template <> struct is_proto_enum< ::xviz::StreamMetadata_ScalarType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::StreamMetadata_ScalarType>() {
  return ::xviz::StreamMetadata_ScalarType_descriptor();
}
template <> struct is_proto_enum< ::xviz::StreamMetadata_PrimitiveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::StreamMetadata_PrimitiveType>() {
  return ::xviz::StreamMetadata_PrimitiveType_descriptor();
}
template <> struct is_proto_enum< ::xviz::StreamMetadata_UIPrimitiveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::StreamMetadata_UIPrimitiveType>() {
  return ::xviz::StreamMetadata_UIPrimitiveType_descriptor();
}
template <> struct is_proto_enum< ::xviz::StreamMetadata_AnnotationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::StreamMetadata_AnnotationType>() {
  return ::xviz::StreamMetadata_AnnotationType_descriptor();
}
template <> struct is_proto_enum< ::xviz::StreamMetadata_CoordinateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::StreamMetadata_CoordinateType>() {
  return ::xviz::StreamMetadata_CoordinateType_descriptor();
}
template <> struct is_proto_enum< ::xviz::SessionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::SessionType>() {
  return ::xviz::SessionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_session_2eproto
