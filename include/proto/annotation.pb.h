// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: annotation.proto

#ifndef PROTOBUF_INCLUDED_annotation_2eproto
#define PROTOBUF_INCLUDED_annotation_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
#include "style.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_annotation_2eproto 

namespace protobuf_annotation_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_annotation_2eproto
namespace xviz {
class Visual;
class VisualDefaultTypeInternal;
extern VisualDefaultTypeInternal _Visual_default_instance_;
class VisualBase;
class VisualBaseDefaultTypeInternal;
extern VisualBaseDefaultTypeInternal _VisualBase_default_instance_;
}  // namespace xviz
namespace google {
namespace protobuf {
template<> ::xviz::Visual* Arena::CreateMaybeMessage<::xviz::Visual>(Arena*);
template<> ::xviz::VisualBase* Arena::CreateMaybeMessage<::xviz::VisualBase>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace xviz {

// ===================================================================

class VisualBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.VisualBase) */ {
 public:
  VisualBase();
  virtual ~VisualBase();

  VisualBase(const VisualBase& from);

  inline VisualBase& operator=(const VisualBase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VisualBase(VisualBase&& from) noexcept
    : VisualBase() {
    *this = ::std::move(from);
  }

  inline VisualBase& operator=(VisualBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VisualBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisualBase* internal_default_instance() {
    return reinterpret_cast<const VisualBase*>(
               &_VisualBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VisualBase* other);
  friend void swap(VisualBase& a, VisualBase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VisualBase* New() const final {
    return CreateMaybeMessage<VisualBase>(NULL);
  }

  VisualBase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VisualBase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VisualBase& from);
  void MergeFrom(const VisualBase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisualBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // @@protoc_insertion_point(class_scope:xviz.VisualBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_annotation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Visual : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Visual) */ {
 public:
  Visual();
  virtual ~Visual();

  Visual(const Visual& from);

  inline Visual& operator=(const Visual& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Visual(Visual&& from) noexcept
    : Visual() {
    *this = ::std::move(from);
  }

  inline Visual& operator=(Visual&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Visual& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Visual* internal_default_instance() {
    return reinterpret_cast<const Visual*>(
               &_Visual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Visual* other);
  friend void swap(Visual& a, Visual& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Visual* New() const final {
    return CreateMaybeMessage<Visual>(NULL);
  }

  Visual* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Visual>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Visual& from);
  void MergeFrom(const Visual& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Visual* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string style_classes = 2;
  int style_classes_size() const;
  void clear_style_classes();
  static const int kStyleClassesFieldNumber = 2;
  const ::std::string& style_classes(int index) const;
  ::std::string* mutable_style_classes(int index);
  void set_style_classes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_style_classes(int index, ::std::string&& value);
  #endif
  void set_style_classes(int index, const char* value);
  void set_style_classes(int index, const char* value, size_t size);
  ::std::string* add_style_classes();
  void add_style_classes(const ::std::string& value);
  #if LANG_CXX11
  void add_style_classes(::std::string&& value);
  #endif
  void add_style_classes(const char* value);
  void add_style_classes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& style_classes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_style_classes();

  // .xviz.VisualBase base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  private:
  const ::xviz::VisualBase& _internal_base() const;
  public:
  const ::xviz::VisualBase& base() const;
  ::xviz::VisualBase* release_base();
  ::xviz::VisualBase* mutable_base();
  void set_allocated_base(::xviz::VisualBase* base);

  // .xviz.StyleObjectValue inline_style = 3;
  bool has_inline_style() const;
  void clear_inline_style();
  static const int kInlineStyleFieldNumber = 3;
  private:
  const ::xviz::StyleObjectValue& _internal_inline_style() const;
  public:
  const ::xviz::StyleObjectValue& inline_style() const;
  ::xviz::StyleObjectValue* release_inline_style();
  ::xviz::StyleObjectValue* mutable_inline_style();
  void set_allocated_inline_style(::xviz::StyleObjectValue* inline_style);

  // @@protoc_insertion_point(class_scope:xviz.Visual)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> style_classes_;
  ::xviz::VisualBase* base_;
  ::xviz::StyleObjectValue* inline_style_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_annotation_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VisualBase

// string object_id = 1;
inline void VisualBase::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VisualBase::object_id() const {
  // @@protoc_insertion_point(field_get:xviz.VisualBase.object_id)
  return object_id_.GetNoArena();
}
inline void VisualBase::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.VisualBase.object_id)
}
#if LANG_CXX11
inline void VisualBase::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.VisualBase.object_id)
}
#endif
inline void VisualBase::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.VisualBase.object_id)
}
inline void VisualBase::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.VisualBase.object_id)
}
inline ::std::string* VisualBase::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:xviz.VisualBase.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VisualBase::release_object_id() {
  // @@protoc_insertion_point(field_release:xviz.VisualBase.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisualBase::set_allocated_object_id(::std::string* object_id) {
  if (object_id != NULL) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:xviz.VisualBase.object_id)
}

// -------------------------------------------------------------------

// Visual

// .xviz.VisualBase base = 1;
inline bool Visual::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline void Visual::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
inline const ::xviz::VisualBase& Visual::_internal_base() const {
  return *base_;
}
inline const ::xviz::VisualBase& Visual::base() const {
  const ::xviz::VisualBase* p = base_;
  // @@protoc_insertion_point(field_get:xviz.Visual.base)
  return p != NULL ? *p : *reinterpret_cast<const ::xviz::VisualBase*>(
      &::xviz::_VisualBase_default_instance_);
}
inline ::xviz::VisualBase* Visual::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Visual.base)
  
  ::xviz::VisualBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::xviz::VisualBase* Visual::mutable_base() {
  
  if (base_ == NULL) {
    auto* p = CreateMaybeMessage<::xviz::VisualBase>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Visual.base)
  return base_;
}
inline void Visual::set_allocated_base(::xviz::VisualBase* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_;
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:xviz.Visual.base)
}

// repeated string style_classes = 2;
inline int Visual::style_classes_size() const {
  return style_classes_.size();
}
inline void Visual::clear_style_classes() {
  style_classes_.Clear();
}
inline const ::std::string& Visual::style_classes(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Visual.style_classes)
  return style_classes_.Get(index);
}
inline ::std::string* Visual::mutable_style_classes(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.Visual.style_classes)
  return style_classes_.Mutable(index);
}
inline void Visual::set_style_classes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.Visual.style_classes)
  style_classes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Visual::set_style_classes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:xviz.Visual.style_classes)
  style_classes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Visual::set_style_classes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  style_classes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.Visual.style_classes)
}
inline void Visual::set_style_classes(int index, const char* value, size_t size) {
  style_classes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.Visual.style_classes)
}
inline ::std::string* Visual::add_style_classes() {
  // @@protoc_insertion_point(field_add_mutable:xviz.Visual.style_classes)
  return style_classes_.Add();
}
inline void Visual::add_style_classes(const ::std::string& value) {
  style_classes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.Visual.style_classes)
}
#if LANG_CXX11
inline void Visual::add_style_classes(::std::string&& value) {
  style_classes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xviz.Visual.style_classes)
}
#endif
inline void Visual::add_style_classes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  style_classes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.Visual.style_classes)
}
inline void Visual::add_style_classes(const char* value, size_t size) {
  style_classes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.Visual.style_classes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Visual::style_classes() const {
  // @@protoc_insertion_point(field_list:xviz.Visual.style_classes)
  return style_classes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Visual::mutable_style_classes() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Visual.style_classes)
  return &style_classes_;
}

// .xviz.StyleObjectValue inline_style = 3;
inline bool Visual::has_inline_style() const {
  return this != internal_default_instance() && inline_style_ != NULL;
}
inline const ::xviz::StyleObjectValue& Visual::_internal_inline_style() const {
  return *inline_style_;
}
inline const ::xviz::StyleObjectValue& Visual::inline_style() const {
  const ::xviz::StyleObjectValue* p = inline_style_;
  // @@protoc_insertion_point(field_get:xviz.Visual.inline_style)
  return p != NULL ? *p : *reinterpret_cast<const ::xviz::StyleObjectValue*>(
      &::xviz::_StyleObjectValue_default_instance_);
}
inline ::xviz::StyleObjectValue* Visual::release_inline_style() {
  // @@protoc_insertion_point(field_release:xviz.Visual.inline_style)
  
  ::xviz::StyleObjectValue* temp = inline_style_;
  inline_style_ = NULL;
  return temp;
}
inline ::xviz::StyleObjectValue* Visual::mutable_inline_style() {
  
  if (inline_style_ == NULL) {
    auto* p = CreateMaybeMessage<::xviz::StyleObjectValue>(GetArenaNoVirtual());
    inline_style_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Visual.inline_style)
  return inline_style_;
}
inline void Visual::set_allocated_inline_style(::xviz::StyleObjectValue* inline_style) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inline_style_);
  }
  if (inline_style) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inline_style = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inline_style, submessage_arena);
    }
    
  } else {
    
  }
  inline_style_ = inline_style;
  // @@protoc_insertion_point(field_set_allocated:xviz.Visual.inline_style)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_annotation_2eproto
