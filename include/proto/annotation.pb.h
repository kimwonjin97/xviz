// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: annotation.proto

#ifndef PROTOBUF_annotation_2eproto__INCLUDED
#define PROTOBUF_annotation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
#include "style.pb.h"
// @@protoc_insertion_point(includes)

namespace xviz {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_annotation_2eproto();
void protobuf_AssignDesc_annotation_2eproto();
void protobuf_ShutdownFile_annotation_2eproto();

class Visual;
class VisualBase;

// ===================================================================

class VisualBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.VisualBase) */ {
 public:
  VisualBase();
  virtual ~VisualBase();

  VisualBase(const VisualBase& from);

  inline VisualBase& operator=(const VisualBase& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisualBase& default_instance();

  void Swap(VisualBase* other);

  // implements Message ----------------------------------------------

  inline VisualBase* New() const { return New(NULL); }

  VisualBase* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisualBase& from);
  void MergeFrom(const VisualBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VisualBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // @@protoc_insertion_point(class_scope:xviz.VisualBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_annotation_2eproto();
  friend void protobuf_AssignDesc_annotation_2eproto();
  friend void protobuf_ShutdownFile_annotation_2eproto();

  void InitAsDefaultInstance();
  static VisualBase* default_instance_;
};
// -------------------------------------------------------------------

class Visual : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xviz.Visual) */ {
 public:
  Visual();
  virtual ~Visual();

  Visual(const Visual& from);

  inline Visual& operator=(const Visual& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Visual& default_instance();

  void Swap(Visual* other);

  // implements Message ----------------------------------------------

  inline Visual* New() const { return New(NULL); }

  Visual* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Visual& from);
  void MergeFrom(const Visual& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Visual* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .xviz.VisualBase base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::xviz::VisualBase& base() const;
  ::xviz::VisualBase* mutable_base();
  ::xviz::VisualBase* release_base();
  void set_allocated_base(::xviz::VisualBase* base);

  // repeated string style_classes = 2;
  int style_classes_size() const;
  void clear_style_classes();
  static const int kStyleClassesFieldNumber = 2;
  const ::std::string& style_classes(int index) const;
  ::std::string* mutable_style_classes(int index);
  void set_style_classes(int index, const ::std::string& value);
  void set_style_classes(int index, const char* value);
  void set_style_classes(int index, const char* value, size_t size);
  ::std::string* add_style_classes();
  void add_style_classes(const ::std::string& value);
  void add_style_classes(const char* value);
  void add_style_classes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& style_classes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_style_classes();

  // optional .xviz.StyleObjectValue inline_style = 3;
  bool has_inline_style() const;
  void clear_inline_style();
  static const int kInlineStyleFieldNumber = 3;
  const ::xviz::StyleObjectValue& inline_style() const;
  ::xviz::StyleObjectValue* mutable_inline_style();
  ::xviz::StyleObjectValue* release_inline_style();
  void set_allocated_inline_style(::xviz::StyleObjectValue* inline_style);

  // @@protoc_insertion_point(class_scope:xviz.Visual)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::xviz::VisualBase* base_;
  ::google::protobuf::RepeatedPtrField< ::std::string> style_classes_;
  ::xviz::StyleObjectValue* inline_style_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_annotation_2eproto();
  friend void protobuf_AssignDesc_annotation_2eproto();
  friend void protobuf_ShutdownFile_annotation_2eproto();

  void InitAsDefaultInstance();
  static Visual* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// VisualBase

// optional string object_id = 1;
inline void VisualBase::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VisualBase::object_id() const {
  // @@protoc_insertion_point(field_get:xviz.VisualBase.object_id)
  return object_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisualBase::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xviz.VisualBase.object_id)
}
inline void VisualBase::set_object_id(const char* value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.VisualBase.object_id)
}
inline void VisualBase::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.VisualBase.object_id)
}
inline ::std::string* VisualBase::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:xviz.VisualBase.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VisualBase::release_object_id() {
  // @@protoc_insertion_point(field_release:xviz.VisualBase.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisualBase::set_allocated_object_id(::std::string* object_id) {
  if (object_id != NULL) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:xviz.VisualBase.object_id)
}

// -------------------------------------------------------------------

// Visual

// optional .xviz.VisualBase base = 1;
inline bool Visual::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
inline void Visual::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
inline const ::xviz::VisualBase& Visual::base() const {
  // @@protoc_insertion_point(field_get:xviz.Visual.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::xviz::VisualBase* Visual::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::xviz::VisualBase;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Visual.base)
  return base_;
}
inline ::xviz::VisualBase* Visual::release_base() {
  // @@protoc_insertion_point(field_release:xviz.Visual.base)
  
  ::xviz::VisualBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline void Visual::set_allocated_base(::xviz::VisualBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Visual.base)
}

// repeated string style_classes = 2;
inline int Visual::style_classes_size() const {
  return style_classes_.size();
}
inline void Visual::clear_style_classes() {
  style_classes_.Clear();
}
inline const ::std::string& Visual::style_classes(int index) const {
  // @@protoc_insertion_point(field_get:xviz.Visual.style_classes)
  return style_classes_.Get(index);
}
inline ::std::string* Visual::mutable_style_classes(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.Visual.style_classes)
  return style_classes_.Mutable(index);
}
inline void Visual::set_style_classes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.Visual.style_classes)
  style_classes_.Mutable(index)->assign(value);
}
inline void Visual::set_style_classes(int index, const char* value) {
  style_classes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.Visual.style_classes)
}
inline void Visual::set_style_classes(int index, const char* value, size_t size) {
  style_classes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.Visual.style_classes)
}
inline ::std::string* Visual::add_style_classes() {
  // @@protoc_insertion_point(field_add_mutable:xviz.Visual.style_classes)
  return style_classes_.Add();
}
inline void Visual::add_style_classes(const ::std::string& value) {
  style_classes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.Visual.style_classes)
}
inline void Visual::add_style_classes(const char* value) {
  style_classes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.Visual.style_classes)
}
inline void Visual::add_style_classes(const char* value, size_t size) {
  style_classes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.Visual.style_classes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Visual::style_classes() const {
  // @@protoc_insertion_point(field_list:xviz.Visual.style_classes)
  return style_classes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Visual::mutable_style_classes() {
  // @@protoc_insertion_point(field_mutable_list:xviz.Visual.style_classes)
  return &style_classes_;
}

// optional .xviz.StyleObjectValue inline_style = 3;
inline bool Visual::has_inline_style() const {
  return !_is_default_instance_ && inline_style_ != NULL;
}
inline void Visual::clear_inline_style() {
  if (GetArenaNoVirtual() == NULL && inline_style_ != NULL) delete inline_style_;
  inline_style_ = NULL;
}
inline const ::xviz::StyleObjectValue& Visual::inline_style() const {
  // @@protoc_insertion_point(field_get:xviz.Visual.inline_style)
  return inline_style_ != NULL ? *inline_style_ : *default_instance_->inline_style_;
}
inline ::xviz::StyleObjectValue* Visual::mutable_inline_style() {
  
  if (inline_style_ == NULL) {
    inline_style_ = new ::xviz::StyleObjectValue;
  }
  // @@protoc_insertion_point(field_mutable:xviz.Visual.inline_style)
  return inline_style_;
}
inline ::xviz::StyleObjectValue* Visual::release_inline_style() {
  // @@protoc_insertion_point(field_release:xviz.Visual.inline_style)
  
  ::xviz::StyleObjectValue* temp = inline_style_;
  inline_style_ = NULL;
  return temp;
}
inline void Visual::set_allocated_inline_style(::xviz::StyleObjectValue* inline_style) {
  delete inline_style_;
  inline_style_ = inline_style;
  if (inline_style) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xviz.Visual.inline_style)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_annotation_2eproto__INCLUDED
