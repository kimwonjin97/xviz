// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xviz/v2/core.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xviz_2fv2_2fcore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xviz_2fv2_2fcore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "xviz/v2/annotation.pb.h"
#include "xviz/v2/options.pb.h"
#include "xviz/v2/primitives.pb.h"
#include "xviz/v2/uiprimitives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xviz_2fv2_2fcore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xviz_2fv2_2fcore_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xviz_2fv2_2fcore_2eproto;
namespace xviz {
namespace v2 {
class AnnotationState;
class AnnotationStateDefaultTypeInternal;
extern AnnotationStateDefaultTypeInternal _AnnotationState_default_instance_;
class FutureInstances;
class FutureInstancesDefaultTypeInternal;
extern FutureInstancesDefaultTypeInternal _FutureInstances_default_instance_;
class Link;
class LinkDefaultTypeInternal;
extern LinkDefaultTypeInternal _Link_default_instance_;
class MapOrigin;
class MapOriginDefaultTypeInternal;
extern MapOriginDefaultTypeInternal _MapOrigin_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class PrimitiveState;
class PrimitiveStateDefaultTypeInternal;
extern PrimitiveStateDefaultTypeInternal _PrimitiveState_default_instance_;
class StreamSet;
class StreamSetDefaultTypeInternal;
extern StreamSetDefaultTypeInternal _StreamSet_default_instance_;
class StreamSet_AnnotationsEntry_DoNotUse;
class StreamSet_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern StreamSet_AnnotationsEntry_DoNotUseDefaultTypeInternal _StreamSet_AnnotationsEntry_DoNotUse_default_instance_;
class StreamSet_FutureInstancesEntry_DoNotUse;
class StreamSet_FutureInstancesEntry_DoNotUseDefaultTypeInternal;
extern StreamSet_FutureInstancesEntry_DoNotUseDefaultTypeInternal _StreamSet_FutureInstancesEntry_DoNotUse_default_instance_;
class StreamSet_LinksEntry_DoNotUse;
class StreamSet_LinksEntry_DoNotUseDefaultTypeInternal;
extern StreamSet_LinksEntry_DoNotUseDefaultTypeInternal _StreamSet_LinksEntry_DoNotUse_default_instance_;
class StreamSet_PosesEntry_DoNotUse;
class StreamSet_PosesEntry_DoNotUseDefaultTypeInternal;
extern StreamSet_PosesEntry_DoNotUseDefaultTypeInternal _StreamSet_PosesEntry_DoNotUse_default_instance_;
class StreamSet_PrimitivesEntry_DoNotUse;
class StreamSet_PrimitivesEntry_DoNotUseDefaultTypeInternal;
extern StreamSet_PrimitivesEntry_DoNotUseDefaultTypeInternal _StreamSet_PrimitivesEntry_DoNotUse_default_instance_;
class StreamSet_UiPrimitivesEntry_DoNotUse;
class StreamSet_UiPrimitivesEntry_DoNotUseDefaultTypeInternal;
extern StreamSet_UiPrimitivesEntry_DoNotUseDefaultTypeInternal _StreamSet_UiPrimitivesEntry_DoNotUse_default_instance_;
class StreamSet_VariablesEntry_DoNotUse;
class StreamSet_VariablesEntry_DoNotUseDefaultTypeInternal;
extern StreamSet_VariablesEntry_DoNotUseDefaultTypeInternal _StreamSet_VariablesEntry_DoNotUse_default_instance_;
class TimeSeriesState;
class TimeSeriesStateDefaultTypeInternal;
extern TimeSeriesStateDefaultTypeInternal _TimeSeriesState_default_instance_;
class UIPrimitiveState;
class UIPrimitiveStateDefaultTypeInternal;
extern UIPrimitiveStateDefaultTypeInternal _UIPrimitiveState_default_instance_;
class Values;
class ValuesDefaultTypeInternal;
extern ValuesDefaultTypeInternal _Values_default_instance_;
class Variable;
class VariableDefaultTypeInternal;
extern VariableDefaultTypeInternal _Variable_default_instance_;
class VariableBase;
class VariableBaseDefaultTypeInternal;
extern VariableBaseDefaultTypeInternal _VariableBase_default_instance_;
class VariableState;
class VariableStateDefaultTypeInternal;
extern VariableStateDefaultTypeInternal _VariableState_default_instance_;
}  // namespace v2
}  // namespace xviz
PROTOBUF_NAMESPACE_OPEN
template<> ::xviz::v2::AnnotationState* Arena::CreateMaybeMessage<::xviz::v2::AnnotationState>(Arena*);
template<> ::xviz::v2::FutureInstances* Arena::CreateMaybeMessage<::xviz::v2::FutureInstances>(Arena*);
template<> ::xviz::v2::Link* Arena::CreateMaybeMessage<::xviz::v2::Link>(Arena*);
template<> ::xviz::v2::MapOrigin* Arena::CreateMaybeMessage<::xviz::v2::MapOrigin>(Arena*);
template<> ::xviz::v2::Pose* Arena::CreateMaybeMessage<::xviz::v2::Pose>(Arena*);
template<> ::xviz::v2::PrimitiveState* Arena::CreateMaybeMessage<::xviz::v2::PrimitiveState>(Arena*);
template<> ::xviz::v2::StreamSet* Arena::CreateMaybeMessage<::xviz::v2::StreamSet>(Arena*);
template<> ::xviz::v2::StreamSet_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::xviz::v2::StreamSet_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::xviz::v2::StreamSet_FutureInstancesEntry_DoNotUse* Arena::CreateMaybeMessage<::xviz::v2::StreamSet_FutureInstancesEntry_DoNotUse>(Arena*);
template<> ::xviz::v2::StreamSet_LinksEntry_DoNotUse* Arena::CreateMaybeMessage<::xviz::v2::StreamSet_LinksEntry_DoNotUse>(Arena*);
template<> ::xviz::v2::StreamSet_PosesEntry_DoNotUse* Arena::CreateMaybeMessage<::xviz::v2::StreamSet_PosesEntry_DoNotUse>(Arena*);
template<> ::xviz::v2::StreamSet_PrimitivesEntry_DoNotUse* Arena::CreateMaybeMessage<::xviz::v2::StreamSet_PrimitivesEntry_DoNotUse>(Arena*);
template<> ::xviz::v2::StreamSet_UiPrimitivesEntry_DoNotUse* Arena::CreateMaybeMessage<::xviz::v2::StreamSet_UiPrimitivesEntry_DoNotUse>(Arena*);
template<> ::xviz::v2::StreamSet_VariablesEntry_DoNotUse* Arena::CreateMaybeMessage<::xviz::v2::StreamSet_VariablesEntry_DoNotUse>(Arena*);
template<> ::xviz::v2::TimeSeriesState* Arena::CreateMaybeMessage<::xviz::v2::TimeSeriesState>(Arena*);
template<> ::xviz::v2::UIPrimitiveState* Arena::CreateMaybeMessage<::xviz::v2::UIPrimitiveState>(Arena*);
template<> ::xviz::v2::Values* Arena::CreateMaybeMessage<::xviz::v2::Values>(Arena*);
template<> ::xviz::v2::Variable* Arena::CreateMaybeMessage<::xviz::v2::Variable>(Arena*);
template<> ::xviz::v2::VariableBase* Arena::CreateMaybeMessage<::xviz::v2::VariableBase>(Arena*);
template<> ::xviz::v2::VariableState* Arena::CreateMaybeMessage<::xviz::v2::VariableState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xviz {
namespace v2 {

// ===================================================================

class StreamSet_PosesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamSet_PosesEntry_DoNotUse, 
    std::string, ::xviz::v2::Pose,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamSet_PosesEntry_DoNotUse, 
    std::string, ::xviz::v2::Pose,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  StreamSet_PosesEntry_DoNotUse();
  StreamSet_PosesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StreamSet_PosesEntry_DoNotUse& other);
  static const StreamSet_PosesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StreamSet_PosesEntry_DoNotUse*>(&_StreamSet_PosesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "xviz.v2.StreamSet.PosesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class StreamSet_PrimitivesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamSet_PrimitivesEntry_DoNotUse, 
    std::string, ::xviz::v2::PrimitiveState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamSet_PrimitivesEntry_DoNotUse, 
    std::string, ::xviz::v2::PrimitiveState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  StreamSet_PrimitivesEntry_DoNotUse();
  StreamSet_PrimitivesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StreamSet_PrimitivesEntry_DoNotUse& other);
  static const StreamSet_PrimitivesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StreamSet_PrimitivesEntry_DoNotUse*>(&_StreamSet_PrimitivesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "xviz.v2.StreamSet.PrimitivesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class StreamSet_FutureInstancesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamSet_FutureInstancesEntry_DoNotUse, 
    std::string, ::xviz::v2::FutureInstances,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamSet_FutureInstancesEntry_DoNotUse, 
    std::string, ::xviz::v2::FutureInstances,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  StreamSet_FutureInstancesEntry_DoNotUse();
  StreamSet_FutureInstancesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StreamSet_FutureInstancesEntry_DoNotUse& other);
  static const StreamSet_FutureInstancesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StreamSet_FutureInstancesEntry_DoNotUse*>(&_StreamSet_FutureInstancesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "xviz.v2.StreamSet.FutureInstancesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class StreamSet_VariablesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamSet_VariablesEntry_DoNotUse, 
    std::string, ::xviz::v2::VariableState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamSet_VariablesEntry_DoNotUse, 
    std::string, ::xviz::v2::VariableState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  StreamSet_VariablesEntry_DoNotUse();
  StreamSet_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StreamSet_VariablesEntry_DoNotUse& other);
  static const StreamSet_VariablesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StreamSet_VariablesEntry_DoNotUse*>(&_StreamSet_VariablesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "xviz.v2.StreamSet.VariablesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class StreamSet_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamSet_AnnotationsEntry_DoNotUse, 
    std::string, ::xviz::v2::AnnotationState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamSet_AnnotationsEntry_DoNotUse, 
    std::string, ::xviz::v2::AnnotationState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  StreamSet_AnnotationsEntry_DoNotUse();
  StreamSet_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StreamSet_AnnotationsEntry_DoNotUse& other);
  static const StreamSet_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StreamSet_AnnotationsEntry_DoNotUse*>(&_StreamSet_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "xviz.v2.StreamSet.AnnotationsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class StreamSet_UiPrimitivesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamSet_UiPrimitivesEntry_DoNotUse, 
    std::string, ::xviz::v2::UIPrimitiveState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamSet_UiPrimitivesEntry_DoNotUse, 
    std::string, ::xviz::v2::UIPrimitiveState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  StreamSet_UiPrimitivesEntry_DoNotUse();
  StreamSet_UiPrimitivesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StreamSet_UiPrimitivesEntry_DoNotUse& other);
  static const StreamSet_UiPrimitivesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StreamSet_UiPrimitivesEntry_DoNotUse*>(&_StreamSet_UiPrimitivesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "xviz.v2.StreamSet.UiPrimitivesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class StreamSet_LinksEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamSet_LinksEntry_DoNotUse, 
    std::string, ::xviz::v2::Link,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamSet_LinksEntry_DoNotUse, 
    std::string, ::xviz::v2::Link,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  StreamSet_LinksEntry_DoNotUse();
  StreamSet_LinksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StreamSet_LinksEntry_DoNotUse& other);
  static const StreamSet_LinksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StreamSet_LinksEntry_DoNotUse*>(&_StreamSet_LinksEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "xviz.v2.StreamSet.LinksEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class StreamSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.v2.StreamSet) */ {
 public:
  StreamSet();
  virtual ~StreamSet();

  StreamSet(const StreamSet& from);
  StreamSet(StreamSet&& from) noexcept
    : StreamSet() {
    *this = ::std::move(from);
  }

  inline StreamSet& operator=(const StreamSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamSet& operator=(StreamSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamSet* internal_default_instance() {
    return reinterpret_cast<const StreamSet*>(
               &_StreamSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StreamSet& a, StreamSet& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamSet* New() const final {
    return CreateMaybeMessage<StreamSet>(nullptr);
  }

  StreamSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamSet& from);
  void MergeFrom(const StreamSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.v2.StreamSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPosesFieldNumber = 2,
    kPrimitivesFieldNumber = 3,
    kTimeSeriesFieldNumber = 4,
    kFutureInstancesFieldNumber = 6,
    kVariablesFieldNumber = 7,
    kAnnotationsFieldNumber = 8,
    kUiPrimitivesFieldNumber = 9,
    kNoDataStreamsFieldNumber = 10,
    kLinksFieldNumber = 11,
    kTimestampFieldNumber = 1,
  };
  // map<string, .xviz.v2.Pose> poses = 2;
  int poses_size() const;
  private:
  int _internal_poses_size() const;
  public:
  void clear_poses();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::Pose >&
      _internal_poses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::Pose >*
      _internal_mutable_poses();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::Pose >&
      poses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::Pose >*
      mutable_poses();

  // map<string, .xviz.v2.PrimitiveState> primitives = 3;
  int primitives_size() const;
  private:
  int _internal_primitives_size() const;
  public:
  void clear_primitives();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::PrimitiveState >&
      _internal_primitives() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::PrimitiveState >*
      _internal_mutable_primitives();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::PrimitiveState >&
      primitives() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::PrimitiveState >*
      mutable_primitives();

  // repeated .xviz.v2.TimeSeriesState time_series = 4;
  int time_series_size() const;
  private:
  int _internal_time_series_size() const;
  public:
  void clear_time_series();
  ::xviz::v2::TimeSeriesState* mutable_time_series(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::TimeSeriesState >*
      mutable_time_series();
  private:
  const ::xviz::v2::TimeSeriesState& _internal_time_series(int index) const;
  ::xviz::v2::TimeSeriesState* _internal_add_time_series();
  public:
  const ::xviz::v2::TimeSeriesState& time_series(int index) const;
  ::xviz::v2::TimeSeriesState* add_time_series();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::TimeSeriesState >&
      time_series() const;

  // map<string, .xviz.v2.FutureInstances> future_instances = 6;
  int future_instances_size() const;
  private:
  int _internal_future_instances_size() const;
  public:
  void clear_future_instances();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::FutureInstances >&
      _internal_future_instances() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::FutureInstances >*
      _internal_mutable_future_instances();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::FutureInstances >&
      future_instances() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::FutureInstances >*
      mutable_future_instances();

  // map<string, .xviz.v2.VariableState> variables = 7;
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::VariableState >&
      _internal_variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::VariableState >*
      _internal_mutable_variables();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::VariableState >&
      variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::VariableState >*
      mutable_variables();

  // map<string, .xviz.v2.AnnotationState> annotations = 8;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::AnnotationState >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::AnnotationState >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::AnnotationState >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::AnnotationState >*
      mutable_annotations();

  // map<string, .xviz.v2.UIPrimitiveState> ui_primitives = 9;
  int ui_primitives_size() const;
  private:
  int _internal_ui_primitives_size() const;
  public:
  void clear_ui_primitives();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::UIPrimitiveState >&
      _internal_ui_primitives() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::UIPrimitiveState >*
      _internal_mutable_ui_primitives();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::UIPrimitiveState >&
      ui_primitives() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::UIPrimitiveState >*
      mutable_ui_primitives();

  // repeated string no_data_streams = 10;
  int no_data_streams_size() const;
  private:
  int _internal_no_data_streams_size() const;
  public:
  void clear_no_data_streams();
  const std::string& no_data_streams(int index) const;
  std::string* mutable_no_data_streams(int index);
  void set_no_data_streams(int index, const std::string& value);
  void set_no_data_streams(int index, std::string&& value);
  void set_no_data_streams(int index, const char* value);
  void set_no_data_streams(int index, const char* value, size_t size);
  std::string* add_no_data_streams();
  void add_no_data_streams(const std::string& value);
  void add_no_data_streams(std::string&& value);
  void add_no_data_streams(const char* value);
  void add_no_data_streams(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& no_data_streams() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_no_data_streams();
  private:
  const std::string& _internal_no_data_streams(int index) const;
  std::string* _internal_add_no_data_streams();
  public:

  // map<string, .xviz.v2.Link> links = 11;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::Link >&
      _internal_links() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::Link >*
      _internal_mutable_links();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::Link >&
      links() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::Link >*
      mutable_links();

  // double timestamp = 1;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:xviz.v2.StreamSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StreamSet_PosesEntry_DoNotUse,
      std::string, ::xviz::v2::Pose,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > poses_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StreamSet_PrimitivesEntry_DoNotUse,
      std::string, ::xviz::v2::PrimitiveState,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > primitives_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::TimeSeriesState > time_series_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StreamSet_FutureInstancesEntry_DoNotUse,
      std::string, ::xviz::v2::FutureInstances,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > future_instances_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StreamSet_VariablesEntry_DoNotUse,
      std::string, ::xviz::v2::VariableState,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > variables_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StreamSet_AnnotationsEntry_DoNotUse,
      std::string, ::xviz::v2::AnnotationState,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StreamSet_UiPrimitivesEntry_DoNotUse,
      std::string, ::xviz::v2::UIPrimitiveState,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > ui_primitives_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> no_data_streams_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StreamSet_LinksEntry_DoNotUse,
      std::string, ::xviz::v2::Link,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > links_;
  double timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_2fv2_2fcore_2eproto;
};
// -------------------------------------------------------------------

class Pose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.v2.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(nullptr);
  }

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.v2.Pose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kMapOriginFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // repeated double position = 3;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double orientation = 4;
  int orientation_size() const;
  private:
  int _internal_orientation_size() const;
  public:
  void clear_orientation();
  private:
  double _internal_orientation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_orientation() const;
  void _internal_add_orientation(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_orientation();
  public:
  double orientation(int index) const;
  void set_orientation(int index, double value);
  void add_orientation(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      orientation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_orientation();

  // .xviz.v2.MapOrigin map_origin = 2;
  bool has_map_origin() const;
  private:
  bool _internal_has_map_origin() const;
  public:
  void clear_map_origin();
  const ::xviz::v2::MapOrigin& map_origin() const;
  ::xviz::v2::MapOrigin* release_map_origin();
  ::xviz::v2::MapOrigin* mutable_map_origin();
  void set_allocated_map_origin(::xviz::v2::MapOrigin* map_origin);
  private:
  const ::xviz::v2::MapOrigin& _internal_map_origin() const;
  ::xviz::v2::MapOrigin* _internal_mutable_map_origin();
  public:

  // double timestamp = 1;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:xviz.v2.Pose)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  mutable std::atomic<int> _position_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > orientation_;
  mutable std::atomic<int> _orientation_cached_byte_size_;
  ::xviz::v2::MapOrigin* map_origin_;
  double timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_2fv2_2fcore_2eproto;
};
// -------------------------------------------------------------------

class MapOrigin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.v2.MapOrigin) */ {
 public:
  MapOrigin();
  virtual ~MapOrigin();

  MapOrigin(const MapOrigin& from);
  MapOrigin(MapOrigin&& from) noexcept
    : MapOrigin() {
    *this = ::std::move(from);
  }

  inline MapOrigin& operator=(const MapOrigin& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapOrigin& operator=(MapOrigin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapOrigin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapOrigin* internal_default_instance() {
    return reinterpret_cast<const MapOrigin*>(
               &_MapOrigin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MapOrigin& a, MapOrigin& b) {
    a.Swap(&b);
  }
  inline void Swap(MapOrigin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapOrigin* New() const final {
    return CreateMaybeMessage<MapOrigin>(nullptr);
  }

  MapOrigin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapOrigin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapOrigin& from);
  void MergeFrom(const MapOrigin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapOrigin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.v2.MapOrigin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
  };
  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double altitude = 3;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:xviz.v2.MapOrigin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double longitude_;
  double latitude_;
  double altitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_2fv2_2fcore_2eproto;
};
// -------------------------------------------------------------------

class PrimitiveState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.v2.PrimitiveState) */ {
 public:
  PrimitiveState();
  virtual ~PrimitiveState();

  PrimitiveState(const PrimitiveState& from);
  PrimitiveState(PrimitiveState&& from) noexcept
    : PrimitiveState() {
    *this = ::std::move(from);
  }

  inline PrimitiveState& operator=(const PrimitiveState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimitiveState& operator=(PrimitiveState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrimitiveState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrimitiveState* internal_default_instance() {
    return reinterpret_cast<const PrimitiveState*>(
               &_PrimitiveState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PrimitiveState& a, PrimitiveState& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimitiveState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrimitiveState* New() const final {
    return CreateMaybeMessage<PrimitiveState>(nullptr);
  }

  PrimitiveState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrimitiveState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrimitiveState& from);
  void MergeFrom(const PrimitiveState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimitiveState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.v2.PrimitiveState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonsFieldNumber = 1,
    kPolylinesFieldNumber = 2,
    kTextsFieldNumber = 3,
    kCirclesFieldNumber = 4,
    kPointsFieldNumber = 5,
    kStadiumsFieldNumber = 6,
    kImagesFieldNumber = 7,
  };
  // repeated .xviz.v2.Polygon polygons = 1;
  int polygons_size() const;
  private:
  int _internal_polygons_size() const;
  public:
  void clear_polygons();
  ::xviz::v2::Polygon* mutable_polygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Polygon >*
      mutable_polygons();
  private:
  const ::xviz::v2::Polygon& _internal_polygons(int index) const;
  ::xviz::v2::Polygon* _internal_add_polygons();
  public:
  const ::xviz::v2::Polygon& polygons(int index) const;
  ::xviz::v2::Polygon* add_polygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Polygon >&
      polygons() const;

  // repeated .xviz.v2.Polyline polylines = 2;
  int polylines_size() const;
  private:
  int _internal_polylines_size() const;
  public:
  void clear_polylines();
  ::xviz::v2::Polyline* mutable_polylines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Polyline >*
      mutable_polylines();
  private:
  const ::xviz::v2::Polyline& _internal_polylines(int index) const;
  ::xviz::v2::Polyline* _internal_add_polylines();
  public:
  const ::xviz::v2::Polyline& polylines(int index) const;
  ::xviz::v2::Polyline* add_polylines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Polyline >&
      polylines() const;

  // repeated .xviz.v2.Text texts = 3;
  int texts_size() const;
  private:
  int _internal_texts_size() const;
  public:
  void clear_texts();
  ::xviz::v2::Text* mutable_texts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Text >*
      mutable_texts();
  private:
  const ::xviz::v2::Text& _internal_texts(int index) const;
  ::xviz::v2::Text* _internal_add_texts();
  public:
  const ::xviz::v2::Text& texts(int index) const;
  ::xviz::v2::Text* add_texts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Text >&
      texts() const;

  // repeated .xviz.v2.Circle circles = 4;
  int circles_size() const;
  private:
  int _internal_circles_size() const;
  public:
  void clear_circles();
  ::xviz::v2::Circle* mutable_circles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Circle >*
      mutable_circles();
  private:
  const ::xviz::v2::Circle& _internal_circles(int index) const;
  ::xviz::v2::Circle* _internal_add_circles();
  public:
  const ::xviz::v2::Circle& circles(int index) const;
  ::xviz::v2::Circle* add_circles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Circle >&
      circles() const;

  // repeated .xviz.v2.Point points = 5;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::xviz::v2::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Point >*
      mutable_points();
  private:
  const ::xviz::v2::Point& _internal_points(int index) const;
  ::xviz::v2::Point* _internal_add_points();
  public:
  const ::xviz::v2::Point& points(int index) const;
  ::xviz::v2::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Point >&
      points() const;

  // repeated .xviz.v2.Stadium stadiums = 6;
  int stadiums_size() const;
  private:
  int _internal_stadiums_size() const;
  public:
  void clear_stadiums();
  ::xviz::v2::Stadium* mutable_stadiums(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Stadium >*
      mutable_stadiums();
  private:
  const ::xviz::v2::Stadium& _internal_stadiums(int index) const;
  ::xviz::v2::Stadium* _internal_add_stadiums();
  public:
  const ::xviz::v2::Stadium& stadiums(int index) const;
  ::xviz::v2::Stadium* add_stadiums();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Stadium >&
      stadiums() const;

  // repeated .xviz.v2.Image images = 7;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::xviz::v2::Image* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Image >*
      mutable_images();
  private:
  const ::xviz::v2::Image& _internal_images(int index) const;
  ::xviz::v2::Image* _internal_add_images();
  public:
  const ::xviz::v2::Image& images(int index) const;
  ::xviz::v2::Image* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Image >&
      images() const;

  // @@protoc_insertion_point(class_scope:xviz.v2.PrimitiveState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Polygon > polygons_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Polyline > polylines_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Text > texts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Circle > circles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Point > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Stadium > stadiums_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Image > images_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_2fv2_2fcore_2eproto;
};
// -------------------------------------------------------------------

class UIPrimitiveState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.v2.UIPrimitiveState) */ {
 public:
  UIPrimitiveState();
  virtual ~UIPrimitiveState();

  UIPrimitiveState(const UIPrimitiveState& from);
  UIPrimitiveState(UIPrimitiveState&& from) noexcept
    : UIPrimitiveState() {
    *this = ::std::move(from);
  }

  inline UIPrimitiveState& operator=(const UIPrimitiveState& from) {
    CopyFrom(from);
    return *this;
  }
  inline UIPrimitiveState& operator=(UIPrimitiveState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UIPrimitiveState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UIPrimitiveState* internal_default_instance() {
    return reinterpret_cast<const UIPrimitiveState*>(
               &_UIPrimitiveState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UIPrimitiveState& a, UIPrimitiveState& b) {
    a.Swap(&b);
  }
  inline void Swap(UIPrimitiveState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UIPrimitiveState* New() const final {
    return CreateMaybeMessage<UIPrimitiveState>(nullptr);
  }

  UIPrimitiveState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UIPrimitiveState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UIPrimitiveState& from);
  void MergeFrom(const UIPrimitiveState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UIPrimitiveState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.v2.UIPrimitiveState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTreetableFieldNumber = 1,
  };
  // .xviz.v2.TreeTable treetable = 1;
  bool has_treetable() const;
  private:
  bool _internal_has_treetable() const;
  public:
  void clear_treetable();
  const ::xviz::v2::TreeTable& treetable() const;
  ::xviz::v2::TreeTable* release_treetable();
  ::xviz::v2::TreeTable* mutable_treetable();
  void set_allocated_treetable(::xviz::v2::TreeTable* treetable);
  private:
  const ::xviz::v2::TreeTable& _internal_treetable() const;
  ::xviz::v2::TreeTable* _internal_mutable_treetable();
  public:

  // @@protoc_insertion_point(class_scope:xviz.v2.UIPrimitiveState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::xviz::v2::TreeTable* treetable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_2fv2_2fcore_2eproto;
};
// -------------------------------------------------------------------

class TimeSeriesState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.v2.TimeSeriesState) */ {
 public:
  TimeSeriesState();
  virtual ~TimeSeriesState();

  TimeSeriesState(const TimeSeriesState& from);
  TimeSeriesState(TimeSeriesState&& from) noexcept
    : TimeSeriesState() {
    *this = ::std::move(from);
  }

  inline TimeSeriesState& operator=(const TimeSeriesState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSeriesState& operator=(TimeSeriesState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeSeriesState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeSeriesState* internal_default_instance() {
    return reinterpret_cast<const TimeSeriesState*>(
               &_TimeSeriesState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TimeSeriesState& a, TimeSeriesState& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSeriesState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSeriesState* New() const final {
    return CreateMaybeMessage<TimeSeriesState>(nullptr);
  }

  TimeSeriesState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSeriesState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSeriesState& from);
  void MergeFrom(const TimeSeriesState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSeriesState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.v2.TimeSeriesState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamsFieldNumber = 3,
    kObjectIdFieldNumber = 2,
    kValuesFieldNumber = 4,
    kTimestampFieldNumber = 1,
  };
  // repeated string streams = 3;
  int streams_size() const;
  private:
  int _internal_streams_size() const;
  public:
  void clear_streams();
  const std::string& streams(int index) const;
  std::string* mutable_streams(int index);
  void set_streams(int index, const std::string& value);
  void set_streams(int index, std::string&& value);
  void set_streams(int index, const char* value);
  void set_streams(int index, const char* value, size_t size);
  std::string* add_streams();
  void add_streams(const std::string& value);
  void add_streams(std::string&& value);
  void add_streams(const char* value);
  void add_streams(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& streams() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_streams();
  private:
  const std::string& _internal_streams(int index) const;
  std::string* _internal_add_streams();
  public:

  // string object_id = 2;
  void clear_object_id();
  const std::string& object_id() const;
  void set_object_id(const std::string& value);
  void set_object_id(std::string&& value);
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  std::string* mutable_object_id();
  std::string* release_object_id();
  void set_allocated_object_id(std::string* object_id);
  private:
  const std::string& _internal_object_id() const;
  void _internal_set_object_id(const std::string& value);
  std::string* _internal_mutable_object_id();
  public:

  // .xviz.v2.Values values = 4;
  bool has_values() const;
  private:
  bool _internal_has_values() const;
  public:
  void clear_values();
  const ::xviz::v2::Values& values() const;
  ::xviz::v2::Values* release_values();
  ::xviz::v2::Values* mutable_values();
  void set_allocated_values(::xviz::v2::Values* values);
  private:
  const ::xviz::v2::Values& _internal_values() const;
  ::xviz::v2::Values* _internal_mutable_values();
  public:

  // double timestamp = 1;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:xviz.v2.TimeSeriesState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> streams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_id_;
  ::xviz::v2::Values* values_;
  double timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_2fv2_2fcore_2eproto;
};
// -------------------------------------------------------------------

class FutureInstances :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.v2.FutureInstances) */ {
 public:
  FutureInstances();
  virtual ~FutureInstances();

  FutureInstances(const FutureInstances& from);
  FutureInstances(FutureInstances&& from) noexcept
    : FutureInstances() {
    *this = ::std::move(from);
  }

  inline FutureInstances& operator=(const FutureInstances& from) {
    CopyFrom(from);
    return *this;
  }
  inline FutureInstances& operator=(FutureInstances&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FutureInstances& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureInstances* internal_default_instance() {
    return reinterpret_cast<const FutureInstances*>(
               &_FutureInstances_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FutureInstances& a, FutureInstances& b) {
    a.Swap(&b);
  }
  inline void Swap(FutureInstances* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FutureInstances* New() const final {
    return CreateMaybeMessage<FutureInstances>(nullptr);
  }

  FutureInstances* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FutureInstances>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FutureInstances& from);
  void MergeFrom(const FutureInstances& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureInstances* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.v2.FutureInstances";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampsFieldNumber = 1,
    kPrimitivesFieldNumber = 2,
  };
  // repeated double timestamps = 1;
  int timestamps_size() const;
  private:
  int _internal_timestamps_size() const;
  public:
  void clear_timestamps();
  private:
  double _internal_timestamps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_timestamps() const;
  void _internal_add_timestamps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_timestamps();
  public:
  double timestamps(int index) const;
  void set_timestamps(int index, double value);
  void add_timestamps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_timestamps();

  // repeated .xviz.v2.PrimitiveState primitives = 2;
  int primitives_size() const;
  private:
  int _internal_primitives_size() const;
  public:
  void clear_primitives();
  ::xviz::v2::PrimitiveState* mutable_primitives(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::PrimitiveState >*
      mutable_primitives();
  private:
  const ::xviz::v2::PrimitiveState& _internal_primitives(int index) const;
  ::xviz::v2::PrimitiveState* _internal_add_primitives();
  public:
  const ::xviz::v2::PrimitiveState& primitives(int index) const;
  ::xviz::v2::PrimitiveState* add_primitives();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::PrimitiveState >&
      primitives() const;

  // @@protoc_insertion_point(class_scope:xviz.v2.FutureInstances)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > timestamps_;
  mutable std::atomic<int> _timestamps_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::PrimitiveState > primitives_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_2fv2_2fcore_2eproto;
};
// -------------------------------------------------------------------

class VariableState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.v2.VariableState) */ {
 public:
  VariableState();
  virtual ~VariableState();

  VariableState(const VariableState& from);
  VariableState(VariableState&& from) noexcept
    : VariableState() {
    *this = ::std::move(from);
  }

  inline VariableState& operator=(const VariableState& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableState& operator=(VariableState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VariableState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariableState* internal_default_instance() {
    return reinterpret_cast<const VariableState*>(
               &_VariableState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(VariableState& a, VariableState& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariableState* New() const final {
    return CreateMaybeMessage<VariableState>(nullptr);
  }

  VariableState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariableState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariableState& from);
  void MergeFrom(const VariableState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.v2.VariableState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // repeated .xviz.v2.Variable variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  ::xviz::v2::Variable* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Variable >*
      mutable_variables();
  private:
  const ::xviz::v2::Variable& _internal_variables(int index) const;
  ::xviz::v2::Variable* _internal_add_variables();
  public:
  const ::xviz::v2::Variable& variables(int index) const;
  ::xviz::v2::Variable* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Variable >&
      variables() const;

  // @@protoc_insertion_point(class_scope:xviz.v2.VariableState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Variable > variables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_2fv2_2fcore_2eproto;
};
// -------------------------------------------------------------------

class AnnotationState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.v2.AnnotationState) */ {
 public:
  AnnotationState();
  virtual ~AnnotationState();

  AnnotationState(const AnnotationState& from);
  AnnotationState(AnnotationState&& from) noexcept
    : AnnotationState() {
    *this = ::std::move(from);
  }

  inline AnnotationState& operator=(const AnnotationState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnotationState& operator=(AnnotationState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnnotationState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnnotationState* internal_default_instance() {
    return reinterpret_cast<const AnnotationState*>(
               &_AnnotationState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AnnotationState& a, AnnotationState& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnotationState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnnotationState* New() const final {
    return CreateMaybeMessage<AnnotationState>(nullptr);
  }

  AnnotationState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnnotationState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnnotationState& from);
  void MergeFrom(const AnnotationState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotationState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.v2.AnnotationState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisualsFieldNumber = 1,
  };
  // repeated .xviz.v2.Visual visuals = 1;
  int visuals_size() const;
  private:
  int _internal_visuals_size() const;
  public:
  void clear_visuals();
  ::xviz::v2::Visual* mutable_visuals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Visual >*
      mutable_visuals();
  private:
  const ::xviz::v2::Visual& _internal_visuals(int index) const;
  ::xviz::v2::Visual* _internal_add_visuals();
  public:
  const ::xviz::v2::Visual& visuals(int index) const;
  ::xviz::v2::Visual* add_visuals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Visual >&
      visuals() const;

  // @@protoc_insertion_point(class_scope:xviz.v2.AnnotationState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Visual > visuals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_2fv2_2fcore_2eproto;
};
// -------------------------------------------------------------------

class Variable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.v2.Variable) */ {
 public:
  Variable();
  virtual ~Variable();

  Variable(const Variable& from);
  Variable(Variable&& from) noexcept
    : Variable() {
    *this = ::std::move(from);
  }

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variable& operator=(Variable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Variable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Variable* internal_default_instance() {
    return reinterpret_cast<const Variable*>(
               &_Variable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Variable& a, Variable& b) {
    a.Swap(&b);
  }
  inline void Swap(Variable* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Variable* New() const final {
    return CreateMaybeMessage<Variable>(nullptr);
  }

  Variable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Variable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Variable& from);
  void MergeFrom(const Variable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.v2.Variable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // .xviz.v2.VariableBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::xviz::v2::VariableBase& base() const;
  ::xviz::v2::VariableBase* release_base();
  ::xviz::v2::VariableBase* mutable_base();
  void set_allocated_base(::xviz::v2::VariableBase* base);
  private:
  const ::xviz::v2::VariableBase& _internal_base() const;
  ::xviz::v2::VariableBase* _internal_mutable_base();
  public:

  // .xviz.v2.Values values = 2;
  bool has_values() const;
  private:
  bool _internal_has_values() const;
  public:
  void clear_values();
  const ::xviz::v2::Values& values() const;
  ::xviz::v2::Values* release_values();
  ::xviz::v2::Values* mutable_values();
  void set_allocated_values(::xviz::v2::Values* values);
  private:
  const ::xviz::v2::Values& _internal_values() const;
  ::xviz::v2::Values* _internal_mutable_values();
  public:

  // @@protoc_insertion_point(class_scope:xviz.v2.Variable)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::xviz::v2::VariableBase* base_;
  ::xviz::v2::Values* values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_2fv2_2fcore_2eproto;
};
// -------------------------------------------------------------------

class VariableBase :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.v2.VariableBase) */ {
 public:
  VariableBase();
  virtual ~VariableBase();

  VariableBase(const VariableBase& from);
  VariableBase(VariableBase&& from) noexcept
    : VariableBase() {
    *this = ::std::move(from);
  }

  inline VariableBase& operator=(const VariableBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableBase& operator=(VariableBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VariableBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariableBase* internal_default_instance() {
    return reinterpret_cast<const VariableBase*>(
               &_VariableBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(VariableBase& a, VariableBase& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableBase* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariableBase* New() const final {
    return CreateMaybeMessage<VariableBase>(nullptr);
  }

  VariableBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariableBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariableBase& from);
  void MergeFrom(const VariableBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.v2.VariableBase";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // string object_id = 1;
  void clear_object_id();
  const std::string& object_id() const;
  void set_object_id(const std::string& value);
  void set_object_id(std::string&& value);
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  std::string* mutable_object_id();
  std::string* release_object_id();
  void set_allocated_object_id(std::string* object_id);
  private:
  const std::string& _internal_object_id() const;
  void _internal_set_object_id(const std::string& value);
  std::string* _internal_mutable_object_id();
  public:

  // @@protoc_insertion_point(class_scope:xviz.v2.VariableBase)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_2fv2_2fcore_2eproto;
};
// -------------------------------------------------------------------

class Values :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.v2.Values) */ {
 public:
  Values();
  virtual ~Values();

  Values(const Values& from);
  Values(Values&& from) noexcept
    : Values() {
    *this = ::std::move(from);
  }

  inline Values& operator=(const Values& from) {
    CopyFrom(from);
    return *this;
  }
  inline Values& operator=(Values&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Values& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Values* internal_default_instance() {
    return reinterpret_cast<const Values*>(
               &_Values_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Values& a, Values& b) {
    a.Swap(&b);
  }
  inline void Swap(Values* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Values* New() const final {
    return CreateMaybeMessage<Values>(nullptr);
  }

  Values* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Values>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Values& from);
  void MergeFrom(const Values& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Values* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.v2.Values";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoublesFieldNumber = 2,
    kInt32SFieldNumber = 3,
    kBoolsFieldNumber = 4,
    kStringsFieldNumber = 5,
  };
  // repeated double doubles = 2;
  int doubles_size() const;
  private:
  int _internal_doubles_size() const;
  public:
  void clear_doubles();
  private:
  double _internal_doubles(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_doubles() const;
  void _internal_add_doubles(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_doubles();
  public:
  double doubles(int index) const;
  void set_doubles(int index, double value);
  void add_doubles(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      doubles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_doubles();

  // repeated int32 int32s = 3;
  int int32s_size() const;
  private:
  int _internal_int32s_size() const;
  public:
  void clear_int32s();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32s(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int32s() const;
  void _internal_add_int32s(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int32s();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int32s(int index) const;
  void set_int32s(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int32s(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int32s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int32s();

  // repeated bool bools = 4;
  int bools_size() const;
  private:
  int _internal_bools_size() const;
  public:
  void clear_bools();
  private:
  bool _internal_bools(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_bools() const;
  void _internal_add_bools(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_bools();
  public:
  bool bools(int index) const;
  void set_bools(int index, bool value);
  void add_bools(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      bools() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_bools();

  // repeated string strings = 5;
  int strings_size() const;
  private:
  int _internal_strings_size() const;
  public:
  void clear_strings();
  const std::string& strings(int index) const;
  std::string* mutable_strings(int index);
  void set_strings(int index, const std::string& value);
  void set_strings(int index, std::string&& value);
  void set_strings(int index, const char* value);
  void set_strings(int index, const char* value, size_t size);
  std::string* add_strings();
  void add_strings(const std::string& value);
  void add_strings(std::string&& value);
  void add_strings(const char* value);
  void add_strings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_strings();
  private:
  const std::string& _internal_strings(int index) const;
  std::string* _internal_add_strings();
  public:

  // @@protoc_insertion_point(class_scope:xviz.v2.Values)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > doubles_;
  mutable std::atomic<int> _doubles_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int32s_;
  mutable std::atomic<int> _int32s_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > bools_;
  mutable std::atomic<int> _bools_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> strings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_2fv2_2fcore_2eproto;
};
// -------------------------------------------------------------------

class Link :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.v2.Link) */ {
 public:
  Link();
  virtual ~Link();

  Link(const Link& from);
  Link(Link&& from) noexcept
    : Link() {
    *this = ::std::move(from);
  }

  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }
  inline Link& operator=(Link&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Link& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Link* internal_default_instance() {
    return reinterpret_cast<const Link*>(
               &_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Link& a, Link& b) {
    a.Swap(&b);
  }
  inline void Swap(Link* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Link* New() const final {
    return CreateMaybeMessage<Link>(nullptr);
  }

  Link* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Link>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Link* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.v2.Link";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xviz_2fv2_2fcore_2eproto);
    return ::descriptor_table_xviz_2fv2_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPoseFieldNumber = 1,
  };
  // string target_pose = 1;
  void clear_target_pose();
  const std::string& target_pose() const;
  void set_target_pose(const std::string& value);
  void set_target_pose(std::string&& value);
  void set_target_pose(const char* value);
  void set_target_pose(const char* value, size_t size);
  std::string* mutable_target_pose();
  std::string* release_target_pose();
  void set_allocated_target_pose(std::string* target_pose);
  private:
  const std::string& _internal_target_pose() const;
  void _internal_set_target_pose(const std::string& value);
  std::string* _internal_mutable_target_pose();
  public:

  // @@protoc_insertion_point(class_scope:xviz.v2.Link)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xviz_2fv2_2fcore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StreamSet

// double timestamp = 1;
inline void StreamSet::clear_timestamp() {
  timestamp_ = 0;
}
inline double StreamSet::_internal_timestamp() const {
  return timestamp_;
}
inline double StreamSet::timestamp() const {
  // @@protoc_insertion_point(field_get:xviz.v2.StreamSet.timestamp)
  return _internal_timestamp();
}
inline void StreamSet::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void StreamSet::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:xviz.v2.StreamSet.timestamp)
}

// map<string, .xviz.v2.Pose> poses = 2;
inline int StreamSet::_internal_poses_size() const {
  return poses_.size();
}
inline int StreamSet::poses_size() const {
  return _internal_poses_size();
}
inline void StreamSet::clear_poses() {
  poses_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::Pose >&
StreamSet::_internal_poses() const {
  return poses_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::Pose >&
StreamSet::poses() const {
  // @@protoc_insertion_point(field_map:xviz.v2.StreamSet.poses)
  return _internal_poses();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::Pose >*
StreamSet::_internal_mutable_poses() {
  return poses_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::Pose >*
StreamSet::mutable_poses() {
  // @@protoc_insertion_point(field_mutable_map:xviz.v2.StreamSet.poses)
  return _internal_mutable_poses();
}

// map<string, .xviz.v2.PrimitiveState> primitives = 3;
inline int StreamSet::_internal_primitives_size() const {
  return primitives_.size();
}
inline int StreamSet::primitives_size() const {
  return _internal_primitives_size();
}
inline void StreamSet::clear_primitives() {
  primitives_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::PrimitiveState >&
StreamSet::_internal_primitives() const {
  return primitives_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::PrimitiveState >&
StreamSet::primitives() const {
  // @@protoc_insertion_point(field_map:xviz.v2.StreamSet.primitives)
  return _internal_primitives();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::PrimitiveState >*
StreamSet::_internal_mutable_primitives() {
  return primitives_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::PrimitiveState >*
StreamSet::mutable_primitives() {
  // @@protoc_insertion_point(field_mutable_map:xviz.v2.StreamSet.primitives)
  return _internal_mutable_primitives();
}

// repeated .xviz.v2.TimeSeriesState time_series = 4;
inline int StreamSet::_internal_time_series_size() const {
  return time_series_.size();
}
inline int StreamSet::time_series_size() const {
  return _internal_time_series_size();
}
inline void StreamSet::clear_time_series() {
  time_series_.Clear();
}
inline ::xviz::v2::TimeSeriesState* StreamSet::mutable_time_series(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.v2.StreamSet.time_series)
  return time_series_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::TimeSeriesState >*
StreamSet::mutable_time_series() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.StreamSet.time_series)
  return &time_series_;
}
inline const ::xviz::v2::TimeSeriesState& StreamSet::_internal_time_series(int index) const {
  return time_series_.Get(index);
}
inline const ::xviz::v2::TimeSeriesState& StreamSet::time_series(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.StreamSet.time_series)
  return _internal_time_series(index);
}
inline ::xviz::v2::TimeSeriesState* StreamSet::_internal_add_time_series() {
  return time_series_.Add();
}
inline ::xviz::v2::TimeSeriesState* StreamSet::add_time_series() {
  // @@protoc_insertion_point(field_add:xviz.v2.StreamSet.time_series)
  return _internal_add_time_series();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::TimeSeriesState >&
StreamSet::time_series() const {
  // @@protoc_insertion_point(field_list:xviz.v2.StreamSet.time_series)
  return time_series_;
}

// map<string, .xviz.v2.FutureInstances> future_instances = 6;
inline int StreamSet::_internal_future_instances_size() const {
  return future_instances_.size();
}
inline int StreamSet::future_instances_size() const {
  return _internal_future_instances_size();
}
inline void StreamSet::clear_future_instances() {
  future_instances_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::FutureInstances >&
StreamSet::_internal_future_instances() const {
  return future_instances_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::FutureInstances >&
StreamSet::future_instances() const {
  // @@protoc_insertion_point(field_map:xviz.v2.StreamSet.future_instances)
  return _internal_future_instances();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::FutureInstances >*
StreamSet::_internal_mutable_future_instances() {
  return future_instances_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::FutureInstances >*
StreamSet::mutable_future_instances() {
  // @@protoc_insertion_point(field_mutable_map:xviz.v2.StreamSet.future_instances)
  return _internal_mutable_future_instances();
}

// map<string, .xviz.v2.VariableState> variables = 7;
inline int StreamSet::_internal_variables_size() const {
  return variables_.size();
}
inline int StreamSet::variables_size() const {
  return _internal_variables_size();
}
inline void StreamSet::clear_variables() {
  variables_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::VariableState >&
StreamSet::_internal_variables() const {
  return variables_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::VariableState >&
StreamSet::variables() const {
  // @@protoc_insertion_point(field_map:xviz.v2.StreamSet.variables)
  return _internal_variables();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::VariableState >*
StreamSet::_internal_mutable_variables() {
  return variables_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::VariableState >*
StreamSet::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_map:xviz.v2.StreamSet.variables)
  return _internal_mutable_variables();
}

// map<string, .xviz.v2.AnnotationState> annotations = 8;
inline int StreamSet::_internal_annotations_size() const {
  return annotations_.size();
}
inline int StreamSet::annotations_size() const {
  return _internal_annotations_size();
}
inline void StreamSet::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::AnnotationState >&
StreamSet::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::AnnotationState >&
StreamSet::annotations() const {
  // @@protoc_insertion_point(field_map:xviz.v2.StreamSet.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::AnnotationState >*
StreamSet::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::AnnotationState >*
StreamSet::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:xviz.v2.StreamSet.annotations)
  return _internal_mutable_annotations();
}

// map<string, .xviz.v2.UIPrimitiveState> ui_primitives = 9;
inline int StreamSet::_internal_ui_primitives_size() const {
  return ui_primitives_.size();
}
inline int StreamSet::ui_primitives_size() const {
  return _internal_ui_primitives_size();
}
inline void StreamSet::clear_ui_primitives() {
  ui_primitives_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::UIPrimitiveState >&
StreamSet::_internal_ui_primitives() const {
  return ui_primitives_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::UIPrimitiveState >&
StreamSet::ui_primitives() const {
  // @@protoc_insertion_point(field_map:xviz.v2.StreamSet.ui_primitives)
  return _internal_ui_primitives();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::UIPrimitiveState >*
StreamSet::_internal_mutable_ui_primitives() {
  return ui_primitives_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::UIPrimitiveState >*
StreamSet::mutable_ui_primitives() {
  // @@protoc_insertion_point(field_mutable_map:xviz.v2.StreamSet.ui_primitives)
  return _internal_mutable_ui_primitives();
}

// repeated string no_data_streams = 10;
inline int StreamSet::_internal_no_data_streams_size() const {
  return no_data_streams_.size();
}
inline int StreamSet::no_data_streams_size() const {
  return _internal_no_data_streams_size();
}
inline void StreamSet::clear_no_data_streams() {
  no_data_streams_.Clear();
}
inline std::string* StreamSet::add_no_data_streams() {
  // @@protoc_insertion_point(field_add_mutable:xviz.v2.StreamSet.no_data_streams)
  return _internal_add_no_data_streams();
}
inline const std::string& StreamSet::_internal_no_data_streams(int index) const {
  return no_data_streams_.Get(index);
}
inline const std::string& StreamSet::no_data_streams(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.StreamSet.no_data_streams)
  return _internal_no_data_streams(index);
}
inline std::string* StreamSet::mutable_no_data_streams(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.v2.StreamSet.no_data_streams)
  return no_data_streams_.Mutable(index);
}
inline void StreamSet::set_no_data_streams(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.v2.StreamSet.no_data_streams)
  no_data_streams_.Mutable(index)->assign(value);
}
inline void StreamSet::set_no_data_streams(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:xviz.v2.StreamSet.no_data_streams)
  no_data_streams_.Mutable(index)->assign(std::move(value));
}
inline void StreamSet::set_no_data_streams(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  no_data_streams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.v2.StreamSet.no_data_streams)
}
inline void StreamSet::set_no_data_streams(int index, const char* value, size_t size) {
  no_data_streams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.v2.StreamSet.no_data_streams)
}
inline std::string* StreamSet::_internal_add_no_data_streams() {
  return no_data_streams_.Add();
}
inline void StreamSet::add_no_data_streams(const std::string& value) {
  no_data_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.v2.StreamSet.no_data_streams)
}
inline void StreamSet::add_no_data_streams(std::string&& value) {
  no_data_streams_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xviz.v2.StreamSet.no_data_streams)
}
inline void StreamSet::add_no_data_streams(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  no_data_streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.v2.StreamSet.no_data_streams)
}
inline void StreamSet::add_no_data_streams(const char* value, size_t size) {
  no_data_streams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.v2.StreamSet.no_data_streams)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StreamSet::no_data_streams() const {
  // @@protoc_insertion_point(field_list:xviz.v2.StreamSet.no_data_streams)
  return no_data_streams_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StreamSet::mutable_no_data_streams() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.StreamSet.no_data_streams)
  return &no_data_streams_;
}

// map<string, .xviz.v2.Link> links = 11;
inline int StreamSet::_internal_links_size() const {
  return links_.size();
}
inline int StreamSet::links_size() const {
  return _internal_links_size();
}
inline void StreamSet::clear_links() {
  links_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::Link >&
StreamSet::_internal_links() const {
  return links_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::Link >&
StreamSet::links() const {
  // @@protoc_insertion_point(field_map:xviz.v2.StreamSet.links)
  return _internal_links();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::Link >*
StreamSet::_internal_mutable_links() {
  return links_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::xviz::v2::Link >*
StreamSet::mutable_links() {
  // @@protoc_insertion_point(field_mutable_map:xviz.v2.StreamSet.links)
  return _internal_mutable_links();
}

// -------------------------------------------------------------------

// Pose

// double timestamp = 1;
inline void Pose::clear_timestamp() {
  timestamp_ = 0;
}
inline double Pose::_internal_timestamp() const {
  return timestamp_;
}
inline double Pose::timestamp() const {
  // @@protoc_insertion_point(field_get:xviz.v2.Pose.timestamp)
  return _internal_timestamp();
}
inline void Pose::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void Pose::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:xviz.v2.Pose.timestamp)
}

// .xviz.v2.MapOrigin map_origin = 2;
inline bool Pose::_internal_has_map_origin() const {
  return this != internal_default_instance() && map_origin_ != nullptr;
}
inline bool Pose::has_map_origin() const {
  return _internal_has_map_origin();
}
inline void Pose::clear_map_origin() {
  if (GetArenaNoVirtual() == nullptr && map_origin_ != nullptr) {
    delete map_origin_;
  }
  map_origin_ = nullptr;
}
inline const ::xviz::v2::MapOrigin& Pose::_internal_map_origin() const {
  const ::xviz::v2::MapOrigin* p = map_origin_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xviz::v2::MapOrigin*>(
      &::xviz::v2::_MapOrigin_default_instance_);
}
inline const ::xviz::v2::MapOrigin& Pose::map_origin() const {
  // @@protoc_insertion_point(field_get:xviz.v2.Pose.map_origin)
  return _internal_map_origin();
}
inline ::xviz::v2::MapOrigin* Pose::release_map_origin() {
  // @@protoc_insertion_point(field_release:xviz.v2.Pose.map_origin)
  
  ::xviz::v2::MapOrigin* temp = map_origin_;
  map_origin_ = nullptr;
  return temp;
}
inline ::xviz::v2::MapOrigin* Pose::_internal_mutable_map_origin() {
  
  if (map_origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz::v2::MapOrigin>(GetArenaNoVirtual());
    map_origin_ = p;
  }
  return map_origin_;
}
inline ::xviz::v2::MapOrigin* Pose::mutable_map_origin() {
  // @@protoc_insertion_point(field_mutable:xviz.v2.Pose.map_origin)
  return _internal_mutable_map_origin();
}
inline void Pose::set_allocated_map_origin(::xviz::v2::MapOrigin* map_origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete map_origin_;
  }
  if (map_origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map_origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_origin, submessage_arena);
    }
    
  } else {
    
  }
  map_origin_ = map_origin;
  // @@protoc_insertion_point(field_set_allocated:xviz.v2.Pose.map_origin)
}

// repeated double position = 3;
inline int Pose::_internal_position_size() const {
  return position_.size();
}
inline int Pose::position_size() const {
  return _internal_position_size();
}
inline void Pose::clear_position() {
  position_.Clear();
}
inline double Pose::_internal_position(int index) const {
  return position_.Get(index);
}
inline double Pose::position(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.Pose.position)
  return _internal_position(index);
}
inline void Pose::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.v2.Pose.position)
}
inline void Pose::_internal_add_position(double value) {
  position_.Add(value);
}
inline void Pose::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:xviz.v2.Pose.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Pose::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Pose::position() const {
  // @@protoc_insertion_point(field_list:xviz.v2.Pose.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Pose::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Pose::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.Pose.position)
  return _internal_mutable_position();
}

// repeated double orientation = 4;
inline int Pose::_internal_orientation_size() const {
  return orientation_.size();
}
inline int Pose::orientation_size() const {
  return _internal_orientation_size();
}
inline void Pose::clear_orientation() {
  orientation_.Clear();
}
inline double Pose::_internal_orientation(int index) const {
  return orientation_.Get(index);
}
inline double Pose::orientation(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.Pose.orientation)
  return _internal_orientation(index);
}
inline void Pose::set_orientation(int index, double value) {
  orientation_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.v2.Pose.orientation)
}
inline void Pose::_internal_add_orientation(double value) {
  orientation_.Add(value);
}
inline void Pose::add_orientation(double value) {
  _internal_add_orientation(value);
  // @@protoc_insertion_point(field_add:xviz.v2.Pose.orientation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Pose::_internal_orientation() const {
  return orientation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Pose::orientation() const {
  // @@protoc_insertion_point(field_list:xviz.v2.Pose.orientation)
  return _internal_orientation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Pose::_internal_mutable_orientation() {
  return &orientation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Pose::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.Pose.orientation)
  return _internal_mutable_orientation();
}

// -------------------------------------------------------------------

// MapOrigin

// double longitude = 1;
inline void MapOrigin::clear_longitude() {
  longitude_ = 0;
}
inline double MapOrigin::_internal_longitude() const {
  return longitude_;
}
inline double MapOrigin::longitude() const {
  // @@protoc_insertion_point(field_get:xviz.v2.MapOrigin.longitude)
  return _internal_longitude();
}
inline void MapOrigin::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void MapOrigin::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:xviz.v2.MapOrigin.longitude)
}

// double latitude = 2;
inline void MapOrigin::clear_latitude() {
  latitude_ = 0;
}
inline double MapOrigin::_internal_latitude() const {
  return latitude_;
}
inline double MapOrigin::latitude() const {
  // @@protoc_insertion_point(field_get:xviz.v2.MapOrigin.latitude)
  return _internal_latitude();
}
inline void MapOrigin::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void MapOrigin::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:xviz.v2.MapOrigin.latitude)
}

// double altitude = 3;
inline void MapOrigin::clear_altitude() {
  altitude_ = 0;
}
inline double MapOrigin::_internal_altitude() const {
  return altitude_;
}
inline double MapOrigin::altitude() const {
  // @@protoc_insertion_point(field_get:xviz.v2.MapOrigin.altitude)
  return _internal_altitude();
}
inline void MapOrigin::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void MapOrigin::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:xviz.v2.MapOrigin.altitude)
}

// -------------------------------------------------------------------

// PrimitiveState

// repeated .xviz.v2.Polygon polygons = 1;
inline int PrimitiveState::_internal_polygons_size() const {
  return polygons_.size();
}
inline int PrimitiveState::polygons_size() const {
  return _internal_polygons_size();
}
inline ::xviz::v2::Polygon* PrimitiveState::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.v2.PrimitiveState.polygons)
  return polygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Polygon >*
PrimitiveState::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.PrimitiveState.polygons)
  return &polygons_;
}
inline const ::xviz::v2::Polygon& PrimitiveState::_internal_polygons(int index) const {
  return polygons_.Get(index);
}
inline const ::xviz::v2::Polygon& PrimitiveState::polygons(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.PrimitiveState.polygons)
  return _internal_polygons(index);
}
inline ::xviz::v2::Polygon* PrimitiveState::_internal_add_polygons() {
  return polygons_.Add();
}
inline ::xviz::v2::Polygon* PrimitiveState::add_polygons() {
  // @@protoc_insertion_point(field_add:xviz.v2.PrimitiveState.polygons)
  return _internal_add_polygons();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Polygon >&
PrimitiveState::polygons() const {
  // @@protoc_insertion_point(field_list:xviz.v2.PrimitiveState.polygons)
  return polygons_;
}

// repeated .xviz.v2.Polyline polylines = 2;
inline int PrimitiveState::_internal_polylines_size() const {
  return polylines_.size();
}
inline int PrimitiveState::polylines_size() const {
  return _internal_polylines_size();
}
inline ::xviz::v2::Polyline* PrimitiveState::mutable_polylines(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.v2.PrimitiveState.polylines)
  return polylines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Polyline >*
PrimitiveState::mutable_polylines() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.PrimitiveState.polylines)
  return &polylines_;
}
inline const ::xviz::v2::Polyline& PrimitiveState::_internal_polylines(int index) const {
  return polylines_.Get(index);
}
inline const ::xviz::v2::Polyline& PrimitiveState::polylines(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.PrimitiveState.polylines)
  return _internal_polylines(index);
}
inline ::xviz::v2::Polyline* PrimitiveState::_internal_add_polylines() {
  return polylines_.Add();
}
inline ::xviz::v2::Polyline* PrimitiveState::add_polylines() {
  // @@protoc_insertion_point(field_add:xviz.v2.PrimitiveState.polylines)
  return _internal_add_polylines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Polyline >&
PrimitiveState::polylines() const {
  // @@protoc_insertion_point(field_list:xviz.v2.PrimitiveState.polylines)
  return polylines_;
}

// repeated .xviz.v2.Text texts = 3;
inline int PrimitiveState::_internal_texts_size() const {
  return texts_.size();
}
inline int PrimitiveState::texts_size() const {
  return _internal_texts_size();
}
inline ::xviz::v2::Text* PrimitiveState::mutable_texts(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.v2.PrimitiveState.texts)
  return texts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Text >*
PrimitiveState::mutable_texts() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.PrimitiveState.texts)
  return &texts_;
}
inline const ::xviz::v2::Text& PrimitiveState::_internal_texts(int index) const {
  return texts_.Get(index);
}
inline const ::xviz::v2::Text& PrimitiveState::texts(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.PrimitiveState.texts)
  return _internal_texts(index);
}
inline ::xviz::v2::Text* PrimitiveState::_internal_add_texts() {
  return texts_.Add();
}
inline ::xviz::v2::Text* PrimitiveState::add_texts() {
  // @@protoc_insertion_point(field_add:xviz.v2.PrimitiveState.texts)
  return _internal_add_texts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Text >&
PrimitiveState::texts() const {
  // @@protoc_insertion_point(field_list:xviz.v2.PrimitiveState.texts)
  return texts_;
}

// repeated .xviz.v2.Circle circles = 4;
inline int PrimitiveState::_internal_circles_size() const {
  return circles_.size();
}
inline int PrimitiveState::circles_size() const {
  return _internal_circles_size();
}
inline ::xviz::v2::Circle* PrimitiveState::mutable_circles(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.v2.PrimitiveState.circles)
  return circles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Circle >*
PrimitiveState::mutable_circles() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.PrimitiveState.circles)
  return &circles_;
}
inline const ::xviz::v2::Circle& PrimitiveState::_internal_circles(int index) const {
  return circles_.Get(index);
}
inline const ::xviz::v2::Circle& PrimitiveState::circles(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.PrimitiveState.circles)
  return _internal_circles(index);
}
inline ::xviz::v2::Circle* PrimitiveState::_internal_add_circles() {
  return circles_.Add();
}
inline ::xviz::v2::Circle* PrimitiveState::add_circles() {
  // @@protoc_insertion_point(field_add:xviz.v2.PrimitiveState.circles)
  return _internal_add_circles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Circle >&
PrimitiveState::circles() const {
  // @@protoc_insertion_point(field_list:xviz.v2.PrimitiveState.circles)
  return circles_;
}

// repeated .xviz.v2.Point points = 5;
inline int PrimitiveState::_internal_points_size() const {
  return points_.size();
}
inline int PrimitiveState::points_size() const {
  return _internal_points_size();
}
inline ::xviz::v2::Point* PrimitiveState::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.v2.PrimitiveState.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Point >*
PrimitiveState::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.PrimitiveState.points)
  return &points_;
}
inline const ::xviz::v2::Point& PrimitiveState::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::xviz::v2::Point& PrimitiveState::points(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.PrimitiveState.points)
  return _internal_points(index);
}
inline ::xviz::v2::Point* PrimitiveState::_internal_add_points() {
  return points_.Add();
}
inline ::xviz::v2::Point* PrimitiveState::add_points() {
  // @@protoc_insertion_point(field_add:xviz.v2.PrimitiveState.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Point >&
PrimitiveState::points() const {
  // @@protoc_insertion_point(field_list:xviz.v2.PrimitiveState.points)
  return points_;
}

// repeated .xviz.v2.Stadium stadiums = 6;
inline int PrimitiveState::_internal_stadiums_size() const {
  return stadiums_.size();
}
inline int PrimitiveState::stadiums_size() const {
  return _internal_stadiums_size();
}
inline ::xviz::v2::Stadium* PrimitiveState::mutable_stadiums(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.v2.PrimitiveState.stadiums)
  return stadiums_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Stadium >*
PrimitiveState::mutable_stadiums() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.PrimitiveState.stadiums)
  return &stadiums_;
}
inline const ::xviz::v2::Stadium& PrimitiveState::_internal_stadiums(int index) const {
  return stadiums_.Get(index);
}
inline const ::xviz::v2::Stadium& PrimitiveState::stadiums(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.PrimitiveState.stadiums)
  return _internal_stadiums(index);
}
inline ::xviz::v2::Stadium* PrimitiveState::_internal_add_stadiums() {
  return stadiums_.Add();
}
inline ::xviz::v2::Stadium* PrimitiveState::add_stadiums() {
  // @@protoc_insertion_point(field_add:xviz.v2.PrimitiveState.stadiums)
  return _internal_add_stadiums();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Stadium >&
PrimitiveState::stadiums() const {
  // @@protoc_insertion_point(field_list:xviz.v2.PrimitiveState.stadiums)
  return stadiums_;
}

// repeated .xviz.v2.Image images = 7;
inline int PrimitiveState::_internal_images_size() const {
  return images_.size();
}
inline int PrimitiveState::images_size() const {
  return _internal_images_size();
}
inline ::xviz::v2::Image* PrimitiveState::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.v2.PrimitiveState.images)
  return images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Image >*
PrimitiveState::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.PrimitiveState.images)
  return &images_;
}
inline const ::xviz::v2::Image& PrimitiveState::_internal_images(int index) const {
  return images_.Get(index);
}
inline const ::xviz::v2::Image& PrimitiveState::images(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.PrimitiveState.images)
  return _internal_images(index);
}
inline ::xviz::v2::Image* PrimitiveState::_internal_add_images() {
  return images_.Add();
}
inline ::xviz::v2::Image* PrimitiveState::add_images() {
  // @@protoc_insertion_point(field_add:xviz.v2.PrimitiveState.images)
  return _internal_add_images();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Image >&
PrimitiveState::images() const {
  // @@protoc_insertion_point(field_list:xviz.v2.PrimitiveState.images)
  return images_;
}

// -------------------------------------------------------------------

// UIPrimitiveState

// .xviz.v2.TreeTable treetable = 1;
inline bool UIPrimitiveState::_internal_has_treetable() const {
  return this != internal_default_instance() && treetable_ != nullptr;
}
inline bool UIPrimitiveState::has_treetable() const {
  return _internal_has_treetable();
}
inline const ::xviz::v2::TreeTable& UIPrimitiveState::_internal_treetable() const {
  const ::xviz::v2::TreeTable* p = treetable_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xviz::v2::TreeTable*>(
      &::xviz::v2::_TreeTable_default_instance_);
}
inline const ::xviz::v2::TreeTable& UIPrimitiveState::treetable() const {
  // @@protoc_insertion_point(field_get:xviz.v2.UIPrimitiveState.treetable)
  return _internal_treetable();
}
inline ::xviz::v2::TreeTable* UIPrimitiveState::release_treetable() {
  // @@protoc_insertion_point(field_release:xviz.v2.UIPrimitiveState.treetable)
  
  ::xviz::v2::TreeTable* temp = treetable_;
  treetable_ = nullptr;
  return temp;
}
inline ::xviz::v2::TreeTable* UIPrimitiveState::_internal_mutable_treetable() {
  
  if (treetable_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz::v2::TreeTable>(GetArenaNoVirtual());
    treetable_ = p;
  }
  return treetable_;
}
inline ::xviz::v2::TreeTable* UIPrimitiveState::mutable_treetable() {
  // @@protoc_insertion_point(field_mutable:xviz.v2.UIPrimitiveState.treetable)
  return _internal_mutable_treetable();
}
inline void UIPrimitiveState::set_allocated_treetable(::xviz::v2::TreeTable* treetable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(treetable_);
  }
  if (treetable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      treetable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, treetable, submessage_arena);
    }
    
  } else {
    
  }
  treetable_ = treetable;
  // @@protoc_insertion_point(field_set_allocated:xviz.v2.UIPrimitiveState.treetable)
}

// -------------------------------------------------------------------

// TimeSeriesState

// double timestamp = 1;
inline void TimeSeriesState::clear_timestamp() {
  timestamp_ = 0;
}
inline double TimeSeriesState::_internal_timestamp() const {
  return timestamp_;
}
inline double TimeSeriesState::timestamp() const {
  // @@protoc_insertion_point(field_get:xviz.v2.TimeSeriesState.timestamp)
  return _internal_timestamp();
}
inline void TimeSeriesState::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void TimeSeriesState::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:xviz.v2.TimeSeriesState.timestamp)
}

// string object_id = 2;
inline void TimeSeriesState::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TimeSeriesState::object_id() const {
  // @@protoc_insertion_point(field_get:xviz.v2.TimeSeriesState.object_id)
  return _internal_object_id();
}
inline void TimeSeriesState::set_object_id(const std::string& value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:xviz.v2.TimeSeriesState.object_id)
}
inline std::string* TimeSeriesState::mutable_object_id() {
  // @@protoc_insertion_point(field_mutable:xviz.v2.TimeSeriesState.object_id)
  return _internal_mutable_object_id();
}
inline const std::string& TimeSeriesState::_internal_object_id() const {
  return object_id_.GetNoArena();
}
inline void TimeSeriesState::_internal_set_object_id(const std::string& value) {
  
  object_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TimeSeriesState::set_object_id(std::string&& value) {
  
  object_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.v2.TimeSeriesState.object_id)
}
inline void TimeSeriesState::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.v2.TimeSeriesState.object_id)
}
inline void TimeSeriesState::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.v2.TimeSeriesState.object_id)
}
inline std::string* TimeSeriesState::_internal_mutable_object_id() {
  
  return object_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TimeSeriesState::release_object_id() {
  // @@protoc_insertion_point(field_release:xviz.v2.TimeSeriesState.object_id)
  
  return object_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TimeSeriesState::set_allocated_object_id(std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:xviz.v2.TimeSeriesState.object_id)
}

// repeated string streams = 3;
inline int TimeSeriesState::_internal_streams_size() const {
  return streams_.size();
}
inline int TimeSeriesState::streams_size() const {
  return _internal_streams_size();
}
inline void TimeSeriesState::clear_streams() {
  streams_.Clear();
}
inline std::string* TimeSeriesState::add_streams() {
  // @@protoc_insertion_point(field_add_mutable:xviz.v2.TimeSeriesState.streams)
  return _internal_add_streams();
}
inline const std::string& TimeSeriesState::_internal_streams(int index) const {
  return streams_.Get(index);
}
inline const std::string& TimeSeriesState::streams(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.TimeSeriesState.streams)
  return _internal_streams(index);
}
inline std::string* TimeSeriesState::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.v2.TimeSeriesState.streams)
  return streams_.Mutable(index);
}
inline void TimeSeriesState::set_streams(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.v2.TimeSeriesState.streams)
  streams_.Mutable(index)->assign(value);
}
inline void TimeSeriesState::set_streams(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:xviz.v2.TimeSeriesState.streams)
  streams_.Mutable(index)->assign(std::move(value));
}
inline void TimeSeriesState::set_streams(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  streams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.v2.TimeSeriesState.streams)
}
inline void TimeSeriesState::set_streams(int index, const char* value, size_t size) {
  streams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.v2.TimeSeriesState.streams)
}
inline std::string* TimeSeriesState::_internal_add_streams() {
  return streams_.Add();
}
inline void TimeSeriesState::add_streams(const std::string& value) {
  streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.v2.TimeSeriesState.streams)
}
inline void TimeSeriesState::add_streams(std::string&& value) {
  streams_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xviz.v2.TimeSeriesState.streams)
}
inline void TimeSeriesState::add_streams(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  streams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.v2.TimeSeriesState.streams)
}
inline void TimeSeriesState::add_streams(const char* value, size_t size) {
  streams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.v2.TimeSeriesState.streams)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TimeSeriesState::streams() const {
  // @@protoc_insertion_point(field_list:xviz.v2.TimeSeriesState.streams)
  return streams_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TimeSeriesState::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.TimeSeriesState.streams)
  return &streams_;
}

// .xviz.v2.Values values = 4;
inline bool TimeSeriesState::_internal_has_values() const {
  return this != internal_default_instance() && values_ != nullptr;
}
inline bool TimeSeriesState::has_values() const {
  return _internal_has_values();
}
inline void TimeSeriesState::clear_values() {
  if (GetArenaNoVirtual() == nullptr && values_ != nullptr) {
    delete values_;
  }
  values_ = nullptr;
}
inline const ::xviz::v2::Values& TimeSeriesState::_internal_values() const {
  const ::xviz::v2::Values* p = values_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xviz::v2::Values*>(
      &::xviz::v2::_Values_default_instance_);
}
inline const ::xviz::v2::Values& TimeSeriesState::values() const {
  // @@protoc_insertion_point(field_get:xviz.v2.TimeSeriesState.values)
  return _internal_values();
}
inline ::xviz::v2::Values* TimeSeriesState::release_values() {
  // @@protoc_insertion_point(field_release:xviz.v2.TimeSeriesState.values)
  
  ::xviz::v2::Values* temp = values_;
  values_ = nullptr;
  return temp;
}
inline ::xviz::v2::Values* TimeSeriesState::_internal_mutable_values() {
  
  if (values_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz::v2::Values>(GetArenaNoVirtual());
    values_ = p;
  }
  return values_;
}
inline ::xviz::v2::Values* TimeSeriesState::mutable_values() {
  // @@protoc_insertion_point(field_mutable:xviz.v2.TimeSeriesState.values)
  return _internal_mutable_values();
}
inline void TimeSeriesState::set_allocated_values(::xviz::v2::Values* values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete values_;
  }
  if (values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, values, submessage_arena);
    }
    
  } else {
    
  }
  values_ = values;
  // @@protoc_insertion_point(field_set_allocated:xviz.v2.TimeSeriesState.values)
}

// -------------------------------------------------------------------

// FutureInstances

// repeated double timestamps = 1;
inline int FutureInstances::_internal_timestamps_size() const {
  return timestamps_.size();
}
inline int FutureInstances::timestamps_size() const {
  return _internal_timestamps_size();
}
inline void FutureInstances::clear_timestamps() {
  timestamps_.Clear();
}
inline double FutureInstances::_internal_timestamps(int index) const {
  return timestamps_.Get(index);
}
inline double FutureInstances::timestamps(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.FutureInstances.timestamps)
  return _internal_timestamps(index);
}
inline void FutureInstances::set_timestamps(int index, double value) {
  timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.v2.FutureInstances.timestamps)
}
inline void FutureInstances::_internal_add_timestamps(double value) {
  timestamps_.Add(value);
}
inline void FutureInstances::add_timestamps(double value) {
  _internal_add_timestamps(value);
  // @@protoc_insertion_point(field_add:xviz.v2.FutureInstances.timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FutureInstances::_internal_timestamps() const {
  return timestamps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FutureInstances::timestamps() const {
  // @@protoc_insertion_point(field_list:xviz.v2.FutureInstances.timestamps)
  return _internal_timestamps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FutureInstances::_internal_mutable_timestamps() {
  return &timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FutureInstances::mutable_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.FutureInstances.timestamps)
  return _internal_mutable_timestamps();
}

// repeated .xviz.v2.PrimitiveState primitives = 2;
inline int FutureInstances::_internal_primitives_size() const {
  return primitives_.size();
}
inline int FutureInstances::primitives_size() const {
  return _internal_primitives_size();
}
inline void FutureInstances::clear_primitives() {
  primitives_.Clear();
}
inline ::xviz::v2::PrimitiveState* FutureInstances::mutable_primitives(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.v2.FutureInstances.primitives)
  return primitives_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::PrimitiveState >*
FutureInstances::mutable_primitives() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.FutureInstances.primitives)
  return &primitives_;
}
inline const ::xviz::v2::PrimitiveState& FutureInstances::_internal_primitives(int index) const {
  return primitives_.Get(index);
}
inline const ::xviz::v2::PrimitiveState& FutureInstances::primitives(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.FutureInstances.primitives)
  return _internal_primitives(index);
}
inline ::xviz::v2::PrimitiveState* FutureInstances::_internal_add_primitives() {
  return primitives_.Add();
}
inline ::xviz::v2::PrimitiveState* FutureInstances::add_primitives() {
  // @@protoc_insertion_point(field_add:xviz.v2.FutureInstances.primitives)
  return _internal_add_primitives();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::PrimitiveState >&
FutureInstances::primitives() const {
  // @@protoc_insertion_point(field_list:xviz.v2.FutureInstances.primitives)
  return primitives_;
}

// -------------------------------------------------------------------

// VariableState

// repeated .xviz.v2.Variable variables = 1;
inline int VariableState::_internal_variables_size() const {
  return variables_.size();
}
inline int VariableState::variables_size() const {
  return _internal_variables_size();
}
inline void VariableState::clear_variables() {
  variables_.Clear();
}
inline ::xviz::v2::Variable* VariableState::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.v2.VariableState.variables)
  return variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Variable >*
VariableState::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.VariableState.variables)
  return &variables_;
}
inline const ::xviz::v2::Variable& VariableState::_internal_variables(int index) const {
  return variables_.Get(index);
}
inline const ::xviz::v2::Variable& VariableState::variables(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.VariableState.variables)
  return _internal_variables(index);
}
inline ::xviz::v2::Variable* VariableState::_internal_add_variables() {
  return variables_.Add();
}
inline ::xviz::v2::Variable* VariableState::add_variables() {
  // @@protoc_insertion_point(field_add:xviz.v2.VariableState.variables)
  return _internal_add_variables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Variable >&
VariableState::variables() const {
  // @@protoc_insertion_point(field_list:xviz.v2.VariableState.variables)
  return variables_;
}

// -------------------------------------------------------------------

// AnnotationState

// repeated .xviz.v2.Visual visuals = 1;
inline int AnnotationState::_internal_visuals_size() const {
  return visuals_.size();
}
inline int AnnotationState::visuals_size() const {
  return _internal_visuals_size();
}
inline ::xviz::v2::Visual* AnnotationState::mutable_visuals(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.v2.AnnotationState.visuals)
  return visuals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Visual >*
AnnotationState::mutable_visuals() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.AnnotationState.visuals)
  return &visuals_;
}
inline const ::xviz::v2::Visual& AnnotationState::_internal_visuals(int index) const {
  return visuals_.Get(index);
}
inline const ::xviz::v2::Visual& AnnotationState::visuals(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.AnnotationState.visuals)
  return _internal_visuals(index);
}
inline ::xviz::v2::Visual* AnnotationState::_internal_add_visuals() {
  return visuals_.Add();
}
inline ::xviz::v2::Visual* AnnotationState::add_visuals() {
  // @@protoc_insertion_point(field_add:xviz.v2.AnnotationState.visuals)
  return _internal_add_visuals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xviz::v2::Visual >&
AnnotationState::visuals() const {
  // @@protoc_insertion_point(field_list:xviz.v2.AnnotationState.visuals)
  return visuals_;
}

// -------------------------------------------------------------------

// Variable

// .xviz.v2.VariableBase base = 1;
inline bool Variable::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool Variable::has_base() const {
  return _internal_has_base();
}
inline void Variable::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::xviz::v2::VariableBase& Variable::_internal_base() const {
  const ::xviz::v2::VariableBase* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xviz::v2::VariableBase*>(
      &::xviz::v2::_VariableBase_default_instance_);
}
inline const ::xviz::v2::VariableBase& Variable::base() const {
  // @@protoc_insertion_point(field_get:xviz.v2.Variable.base)
  return _internal_base();
}
inline ::xviz::v2::VariableBase* Variable::release_base() {
  // @@protoc_insertion_point(field_release:xviz.v2.Variable.base)
  
  ::xviz::v2::VariableBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::xviz::v2::VariableBase* Variable::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz::v2::VariableBase>(GetArenaNoVirtual());
    base_ = p;
  }
  return base_;
}
inline ::xviz::v2::VariableBase* Variable::mutable_base() {
  // @@protoc_insertion_point(field_mutable:xviz.v2.Variable.base)
  return _internal_mutable_base();
}
inline void Variable::set_allocated_base(::xviz::v2::VariableBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:xviz.v2.Variable.base)
}

// .xviz.v2.Values values = 2;
inline bool Variable::_internal_has_values() const {
  return this != internal_default_instance() && values_ != nullptr;
}
inline bool Variable::has_values() const {
  return _internal_has_values();
}
inline void Variable::clear_values() {
  if (GetArenaNoVirtual() == nullptr && values_ != nullptr) {
    delete values_;
  }
  values_ = nullptr;
}
inline const ::xviz::v2::Values& Variable::_internal_values() const {
  const ::xviz::v2::Values* p = values_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xviz::v2::Values*>(
      &::xviz::v2::_Values_default_instance_);
}
inline const ::xviz::v2::Values& Variable::values() const {
  // @@protoc_insertion_point(field_get:xviz.v2.Variable.values)
  return _internal_values();
}
inline ::xviz::v2::Values* Variable::release_values() {
  // @@protoc_insertion_point(field_release:xviz.v2.Variable.values)
  
  ::xviz::v2::Values* temp = values_;
  values_ = nullptr;
  return temp;
}
inline ::xviz::v2::Values* Variable::_internal_mutable_values() {
  
  if (values_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz::v2::Values>(GetArenaNoVirtual());
    values_ = p;
  }
  return values_;
}
inline ::xviz::v2::Values* Variable::mutable_values() {
  // @@protoc_insertion_point(field_mutable:xviz.v2.Variable.values)
  return _internal_mutable_values();
}
inline void Variable::set_allocated_values(::xviz::v2::Values* values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete values_;
  }
  if (values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, values, submessage_arena);
    }
    
  } else {
    
  }
  values_ = values;
  // @@protoc_insertion_point(field_set_allocated:xviz.v2.Variable.values)
}

// -------------------------------------------------------------------

// VariableBase

// string object_id = 1;
inline void VariableBase::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VariableBase::object_id() const {
  // @@protoc_insertion_point(field_get:xviz.v2.VariableBase.object_id)
  return _internal_object_id();
}
inline void VariableBase::set_object_id(const std::string& value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:xviz.v2.VariableBase.object_id)
}
inline std::string* VariableBase::mutable_object_id() {
  // @@protoc_insertion_point(field_mutable:xviz.v2.VariableBase.object_id)
  return _internal_mutable_object_id();
}
inline const std::string& VariableBase::_internal_object_id() const {
  return object_id_.GetNoArena();
}
inline void VariableBase::_internal_set_object_id(const std::string& value) {
  
  object_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VariableBase::set_object_id(std::string&& value) {
  
  object_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.v2.VariableBase.object_id)
}
inline void VariableBase::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.v2.VariableBase.object_id)
}
inline void VariableBase::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.v2.VariableBase.object_id)
}
inline std::string* VariableBase::_internal_mutable_object_id() {
  
  return object_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VariableBase::release_object_id() {
  // @@protoc_insertion_point(field_release:xviz.v2.VariableBase.object_id)
  
  return object_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VariableBase::set_allocated_object_id(std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:xviz.v2.VariableBase.object_id)
}

// -------------------------------------------------------------------

// Values

// repeated double doubles = 2;
inline int Values::_internal_doubles_size() const {
  return doubles_.size();
}
inline int Values::doubles_size() const {
  return _internal_doubles_size();
}
inline void Values::clear_doubles() {
  doubles_.Clear();
}
inline double Values::_internal_doubles(int index) const {
  return doubles_.Get(index);
}
inline double Values::doubles(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.Values.doubles)
  return _internal_doubles(index);
}
inline void Values::set_doubles(int index, double value) {
  doubles_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.v2.Values.doubles)
}
inline void Values::_internal_add_doubles(double value) {
  doubles_.Add(value);
}
inline void Values::add_doubles(double value) {
  _internal_add_doubles(value);
  // @@protoc_insertion_point(field_add:xviz.v2.Values.doubles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Values::_internal_doubles() const {
  return doubles_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Values::doubles() const {
  // @@protoc_insertion_point(field_list:xviz.v2.Values.doubles)
  return _internal_doubles();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Values::_internal_mutable_doubles() {
  return &doubles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Values::mutable_doubles() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.Values.doubles)
  return _internal_mutable_doubles();
}

// repeated int32 int32s = 3;
inline int Values::_internal_int32s_size() const {
  return int32s_.size();
}
inline int Values::int32s_size() const {
  return _internal_int32s_size();
}
inline void Values::clear_int32s() {
  int32s_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Values::_internal_int32s(int index) const {
  return int32s_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Values::int32s(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.Values.int32s)
  return _internal_int32s(index);
}
inline void Values::set_int32s(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int32s_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.v2.Values.int32s)
}
inline void Values::_internal_add_int32s(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int32s_.Add(value);
}
inline void Values::add_int32s(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int32s(value);
  // @@protoc_insertion_point(field_add:xviz.v2.Values.int32s)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Values::_internal_int32s() const {
  return int32s_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Values::int32s() const {
  // @@protoc_insertion_point(field_list:xviz.v2.Values.int32s)
  return _internal_int32s();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Values::_internal_mutable_int32s() {
  return &int32s_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Values::mutable_int32s() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.Values.int32s)
  return _internal_mutable_int32s();
}

// repeated bool bools = 4;
inline int Values::_internal_bools_size() const {
  return bools_.size();
}
inline int Values::bools_size() const {
  return _internal_bools_size();
}
inline void Values::clear_bools() {
  bools_.Clear();
}
inline bool Values::_internal_bools(int index) const {
  return bools_.Get(index);
}
inline bool Values::bools(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.Values.bools)
  return _internal_bools(index);
}
inline void Values::set_bools(int index, bool value) {
  bools_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.v2.Values.bools)
}
inline void Values::_internal_add_bools(bool value) {
  bools_.Add(value);
}
inline void Values::add_bools(bool value) {
  _internal_add_bools(value);
  // @@protoc_insertion_point(field_add:xviz.v2.Values.bools)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Values::_internal_bools() const {
  return bools_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Values::bools() const {
  // @@protoc_insertion_point(field_list:xviz.v2.Values.bools)
  return _internal_bools();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Values::_internal_mutable_bools() {
  return &bools_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Values::mutable_bools() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.Values.bools)
  return _internal_mutable_bools();
}

// repeated string strings = 5;
inline int Values::_internal_strings_size() const {
  return strings_.size();
}
inline int Values::strings_size() const {
  return _internal_strings_size();
}
inline void Values::clear_strings() {
  strings_.Clear();
}
inline std::string* Values::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:xviz.v2.Values.strings)
  return _internal_add_strings();
}
inline const std::string& Values::_internal_strings(int index) const {
  return strings_.Get(index);
}
inline const std::string& Values::strings(int index) const {
  // @@protoc_insertion_point(field_get:xviz.v2.Values.strings)
  return _internal_strings(index);
}
inline std::string* Values::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:xviz.v2.Values.strings)
  return strings_.Mutable(index);
}
inline void Values::set_strings(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:xviz.v2.Values.strings)
  strings_.Mutable(index)->assign(value);
}
inline void Values::set_strings(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:xviz.v2.Values.strings)
  strings_.Mutable(index)->assign(std::move(value));
}
inline void Values::set_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xviz.v2.Values.strings)
}
inline void Values::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xviz.v2.Values.strings)
}
inline std::string* Values::_internal_add_strings() {
  return strings_.Add();
}
inline void Values::add_strings(const std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xviz.v2.Values.strings)
}
inline void Values::add_strings(std::string&& value) {
  strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xviz.v2.Values.strings)
}
inline void Values::add_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xviz.v2.Values.strings)
}
inline void Values::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xviz.v2.Values.strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Values::strings() const {
  // @@protoc_insertion_point(field_list:xviz.v2.Values.strings)
  return strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Values::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:xviz.v2.Values.strings)
  return &strings_;
}

// -------------------------------------------------------------------

// Link

// string target_pose = 1;
inline void Link::clear_target_pose() {
  target_pose_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Link::target_pose() const {
  // @@protoc_insertion_point(field_get:xviz.v2.Link.target_pose)
  return _internal_target_pose();
}
inline void Link::set_target_pose(const std::string& value) {
  _internal_set_target_pose(value);
  // @@protoc_insertion_point(field_set:xviz.v2.Link.target_pose)
}
inline std::string* Link::mutable_target_pose() {
  // @@protoc_insertion_point(field_mutable:xviz.v2.Link.target_pose)
  return _internal_mutable_target_pose();
}
inline const std::string& Link::_internal_target_pose() const {
  return target_pose_.GetNoArena();
}
inline void Link::_internal_set_target_pose(const std::string& value) {
  
  target_pose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Link::set_target_pose(std::string&& value) {
  
  target_pose_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.v2.Link.target_pose)
}
inline void Link::set_target_pose(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_pose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.v2.Link.target_pose)
}
inline void Link::set_target_pose(const char* value, size_t size) {
  
  target_pose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.v2.Link.target_pose)
}
inline std::string* Link::_internal_mutable_target_pose() {
  
  return target_pose_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Link::release_target_pose() {
  // @@protoc_insertion_point(field_release:xviz.v2.Link.target_pose)
  
  return target_pose_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_allocated_target_pose(std::string* target_pose) {
  if (target_pose != nullptr) {
    
  } else {
    
  }
  target_pose_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_pose);
  // @@protoc_insertion_point(field_set_allocated:xviz.v2.Link.target_pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace xviz

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xviz_2fv2_2fcore_2eproto
